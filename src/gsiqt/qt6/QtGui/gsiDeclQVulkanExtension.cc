
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQVulkanExtension.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QVulkanExtension>
#include "gsiQt.h"
#include "gsiQtGuiCommon.h"
#include "gsiDeclQtGuiTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// struct QVulkanExtension

//  Constructor QVulkanExtension::QVulkanExtension()


static void _init_ctor_QVulkanExtension_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QVulkanExtension> ();
}

static void _call_ctor_QVulkanExtension_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVulkanExtension *> (new QVulkanExtension ());
}


//  bool ::operator==(const QVulkanExtension &lhs, const QVulkanExtension &rhs)
static bool op_QVulkanExtension_operator_eq__eq__5844(const QVulkanExtension *_self, const QVulkanExtension &rhs) {
  return ::operator==(*_self, rhs);
}

//  bool ::operator!=(const QVulkanExtension &lhs, const QVulkanExtension &rhs)
static bool op_QVulkanExtension_operator_excl__eq__5844(const QVulkanExtension *_self, const QVulkanExtension &rhs) {
  return ::operator!=(*_self, rhs);
}


namespace gsi
{

static gsi::Methods methods_QVulkanExtension () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QVulkanExtension::QVulkanExtension()\nThis method creates an object of class QVulkanExtension.", &_init_ctor_QVulkanExtension_0, &_call_ctor_QVulkanExtension_0);
  methods += gsi::method_ext("==", &::op_QVulkanExtension_operator_eq__eq__5844, gsi::arg ("rhs"), "@brief Operator bool ::operator==(const QVulkanExtension &lhs, const QVulkanExtension &rhs)\nThis is the mapping of the global operator to the instance method.");
  methods += gsi::method_ext("!=", &::op_QVulkanExtension_operator_excl__eq__5844, gsi::arg ("rhs"), "@brief Operator bool ::operator!=(const QVulkanExtension &lhs, const QVulkanExtension &rhs)\nThis is the mapping of the global operator to the instance method.");
  return methods;
}

gsi::Class<QVulkanExtension> decl_QVulkanExtension ("QtGui", "QVulkanExtension",
  methods_QVulkanExtension (),
  "@qt\n@brief Binding of QVulkanExtension");


GSI_QTGUI_PUBLIC gsi::Class<QVulkanExtension> &qtdecl_QVulkanExtension () { return decl_QVulkanExtension; }

}

