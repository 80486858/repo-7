
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQVulkanInstance.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QVulkanInstance>
#include <QPlatformVulkanInstance>
#include <QVersionNumber>
#include <QVulkanDeviceFunctions>
#include <QVulkanExtension>
#include <QVulkanFunctions>
#include <QVulkanInfoVector>
#include <QVulkanLayer>
#include <QWindow>
#include "gsiQt.h"
#include "gsiQtGuiCommon.h"
#include "gsiDeclQtGuiTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QVulkanInstance

//  Constructor QVulkanInstance::QVulkanInstance()


static void _init_ctor_QVulkanInstance_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QVulkanInstance> ();
}

static void _call_ctor_QVulkanInstance_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVulkanInstance *> (new QVulkanInstance ());
}


// QVersionNumber QVulkanInstance::apiVersion()


static void _init_f_apiVersion_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QVersionNumber > ();
}

static void _call_f_apiVersion_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVersionNumber > ((QVersionNumber)((QVulkanInstance *)cls)->apiVersion ());
}


// bool QVulkanInstance::create()


static void _init_f_create_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_create_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QVulkanInstance *)cls)->create ());
}


// void QVulkanInstance::destroy()


static void _init_f_destroy_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_destroy_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanInstance *)cls)->destroy ();
}


// QVulkanDeviceFunctions *QVulkanInstance::deviceFunctions(struct VkDevice_T *device)


static void _init_f_deviceFunctions_2407 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  decl->set_return<QVulkanDeviceFunctions * > ();
}

static void _call_f_deviceFunctions_2407 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  ret.write<QVulkanDeviceFunctions * > ((QVulkanDeviceFunctions *)((QVulkanInstance *)cls)->deviceFunctions (arg1));
}


// enum VkResult QVulkanInstance::errorCode()


static void _init_f_errorCode_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<enum VkResult > ();
}

static void _call_f_errorCode_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanInstance *)cls)->errorCode ());
}


// QByteArrayList QVulkanInstance::extensions()


static void _init_f_extensions_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QByteArrayList > ();
}

static void _call_f_extensions_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QByteArrayList > ((QByteArrayList)((QVulkanInstance *)cls)->extensions ());
}


// QFlags<QVulkanInstance::Flag> QVulkanInstance::flags()


static void _init_f_flags_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QFlags<QVulkanInstance::Flag> > ();
}

static void _call_f_flags_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QFlags<QVulkanInstance::Flag> > ((QFlags<QVulkanInstance::Flag>)((QVulkanInstance *)cls)->flags ());
}


// QVulkanFunctions *QVulkanInstance::functions()


static void _init_f_functions_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QVulkanFunctions * > ();
}

static void _call_f_functions_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVulkanFunctions * > ((QVulkanFunctions *)((QVulkanInstance *)cls)->functions ());
}


// void *QVulkanInstance::getInstanceProcAddr(const char *name)()


static void _init_f_getInstanceProcAddr_1731 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const char * > (argspec_0);
  decl->set_return<void *() > ();
}

static void _call_f_getInstanceProcAddr_1731 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const char *arg1 = gsi::arg_reader<const char * >() (args, heap);
  ret.write<void *() > ((void *())((QVulkanInstance *)cls)->getInstanceProcAddr (arg1));
}


// QPlatformVulkanInstance *QVulkanInstance::handle()


static void _init_f_handle_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QPlatformVulkanInstance * > ();
}

static void _call_f_handle_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QPlatformVulkanInstance * > ((QPlatformVulkanInstance *)((QVulkanInstance *)cls)->handle ());
}


// void QVulkanInstance::installDebugOutputFilter(bool *filter(unsigned int flags, enum VkDebugReportObjectTypeEXT objectType, unsigned long int object, unsigned long int location, signed int messageCode, const char *pLayerPrefix, const char *pMessage))


static void _init_f_installDebugOutputFilter_21239 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("filter");
  decl->add_arg<bool *(unsigned int flags, enum VkDebugReportObjectTypeEXT objectType, unsigned long int object, unsigned long int location, signed int messageCode, const char *pLayerPrefix, const char *pMessage) > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_installDebugOutputFilter_21239 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool *arg1(unsigned int flags, enum VkDebugReportObjectTypeEXT objectType, unsigned long int object, unsigned long int location, signed int messageCode, const char *pLayerPrefix, const char *pMessage) = gsi::arg_reader<bool *(unsigned int flags, enum VkDebugReportObjectTypeEXT objectType, unsigned long int object, unsigned long int location, signed int messageCode, const char *pLayerPrefix, const char *pMessage) >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanInstance *)cls)->installDebugOutputFilter (arg1);
}


// bool QVulkanInstance::isValid()


static void _init_f_isValid_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isValid_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QVulkanInstance *)cls)->isValid ());
}


// QByteArrayList QVulkanInstance::layers()


static void _init_f_layers_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QByteArrayList > ();
}

static void _call_f_layers_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QByteArrayList > ((QByteArrayList)((QVulkanInstance *)cls)->layers ());
}


// void QVulkanInstance::presentAboutToBeQueued(QWindow *window)


static void _init_f_presentAboutToBeQueued_1335 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("window");
  decl->add_arg<QWindow * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_presentAboutToBeQueued_1335 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QWindow *arg1 = gsi::arg_reader<QWindow * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanInstance *)cls)->presentAboutToBeQueued (arg1);
}


// void QVulkanInstance::presentQueued(QWindow *window)


static void _init_f_presentQueued_1335 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("window");
  decl->add_arg<QWindow * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_presentQueued_1335 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QWindow *arg1 = gsi::arg_reader<QWindow * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanInstance *)cls)->presentQueued (arg1);
}


// void QVulkanInstance::removeDebugOutputFilter(bool *filter(unsigned int flags, enum VkDebugReportObjectTypeEXT objectType, unsigned long int object, unsigned long int location, signed int messageCode, const char *pLayerPrefix, const char *pMessage))


static void _init_f_removeDebugOutputFilter_21239 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("filter");
  decl->add_arg<bool *(unsigned int flags, enum VkDebugReportObjectTypeEXT objectType, unsigned long int object, unsigned long int location, signed int messageCode, const char *pLayerPrefix, const char *pMessage) > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_removeDebugOutputFilter_21239 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool *arg1(unsigned int flags, enum VkDebugReportObjectTypeEXT objectType, unsigned long int object, unsigned long int location, signed int messageCode, const char *pLayerPrefix, const char *pMessage) = gsi::arg_reader<bool *(unsigned int flags, enum VkDebugReportObjectTypeEXT objectType, unsigned long int object, unsigned long int location, signed int messageCode, const char *pLayerPrefix, const char *pMessage) >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanInstance *)cls)->removeDebugOutputFilter (arg1);
}


// void QVulkanInstance::resetDeviceFunctions(struct VkDevice_T *device)


static void _init_f_resetDeviceFunctions_2407 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_resetDeviceFunctions_2407 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanInstance *)cls)->resetDeviceFunctions (arg1);
}


// void QVulkanInstance::setApiVersion(const QVersionNumber &vulkanVersion)


static void _init_f_setApiVersion_2753 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("vulkanVersion");
  decl->add_arg<const QVersionNumber & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setApiVersion_2753 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QVersionNumber &arg1 = gsi::arg_reader<const QVersionNumber & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanInstance *)cls)->setApiVersion (arg1);
}


// void QVulkanInstance::setExtensions(const QByteArrayList &extensions)


static void _init_f_setExtensions_2721 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("extensions");
  decl->add_arg<const QByteArrayList & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setExtensions_2721 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QByteArrayList &arg1 = gsi::arg_reader<const QByteArrayList & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanInstance *)cls)->setExtensions (arg1);
}


// void QVulkanInstance::setFlags(QFlags<QVulkanInstance::Flag> flags)


static void _init_f_setFlags_3153 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("flags");
  decl->add_arg<QFlags<QVulkanInstance::Flag> > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFlags_3153 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QFlags<QVulkanInstance::Flag> arg1 = gsi::arg_reader<QFlags<QVulkanInstance::Flag> >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanInstance *)cls)->setFlags (arg1);
}


// void QVulkanInstance::setLayers(const QByteArrayList &layers)


static void _init_f_setLayers_2721 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("layers");
  decl->add_arg<const QByteArrayList & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setLayers_2721 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QByteArrayList &arg1 = gsi::arg_reader<const QByteArrayList & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanInstance *)cls)->setLayers (arg1);
}


// void QVulkanInstance::setVkInstance(struct VkInstance_T *existingVkInstance)


static void _init_f_setVkInstance_2636 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("existingVkInstance");
  decl->add_arg<struct VkInstance_T * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setVkInstance_2636 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkInstance_T *arg1 = gsi::arg_reader<struct VkInstance_T * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanInstance *)cls)->setVkInstance (arg1);
}


// QVersionNumber QVulkanInstance::supportedApiVersion()


static void _init_f_supportedApiVersion_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QVersionNumber > ();
}

static void _call_f_supportedApiVersion_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVersionNumber > ((QVersionNumber)((QVulkanInstance *)cls)->supportedApiVersion ());
}


// QVulkanInfoVector<QVulkanExtension> QVulkanInstance::supportedExtensions()


static void _init_f_supportedExtensions_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QVulkanInfoVector<QVulkanExtension> > ();
}

static void _call_f_supportedExtensions_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVulkanInfoVector<QVulkanExtension> > ((QVulkanInfoVector<QVulkanExtension>)((QVulkanInstance *)cls)->supportedExtensions ());
}


// QVulkanInfoVector<QVulkanExtension> QVulkanInstance::supportedExtensions()


static void _init_f_supportedExtensions_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QVulkanInfoVector<QVulkanExtension> > ();
}

static void _call_f_supportedExtensions_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVulkanInfoVector<QVulkanExtension> > ((QVulkanInfoVector<QVulkanExtension>)((QVulkanInstance *)cls)->supportedExtensions ());
}


// QVulkanInfoVector<QVulkanLayer> QVulkanInstance::supportedLayers()


static void _init_f_supportedLayers_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QVulkanInfoVector<QVulkanLayer> > ();
}

static void _call_f_supportedLayers_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVulkanInfoVector<QVulkanLayer> > ((QVulkanInfoVector<QVulkanLayer>)((QVulkanInstance *)cls)->supportedLayers ());
}


// QVulkanInfoVector<QVulkanLayer> QVulkanInstance::supportedLayers()


static void _init_f_supportedLayers_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QVulkanInfoVector<QVulkanLayer> > ();
}

static void _call_f_supportedLayers_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVulkanInfoVector<QVulkanLayer> > ((QVulkanInfoVector<QVulkanLayer>)((QVulkanInstance *)cls)->supportedLayers ());
}


// bool QVulkanInstance::supportsPresent(struct VkPhysicalDevice_T *physicalDevice, unsigned int queueFamilyIndex, QWindow *window)


static void _init_f_supportsPresent_6127 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("physicalDevice");
  decl->add_arg<struct VkPhysicalDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("queueFamilyIndex");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("window");
  decl->add_arg<QWindow * > (argspec_2);
  decl->set_return<bool > ();
}

static void _call_f_supportsPresent_6127 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkPhysicalDevice_T *arg1 = gsi::arg_reader<struct VkPhysicalDevice_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  QWindow *arg3 = gsi::arg_reader<QWindow * >() (args, heap);
  ret.write<bool > ((bool)((QVulkanInstance *)cls)->supportsPresent (arg1, arg2, arg3));
}


// struct VkInstance_T *QVulkanInstance::vkInstance()


static void _init_f_vkInstance_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<struct VkInstance_T * > ();
}

static void _call_f_vkInstance_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<struct VkInstance_T * > ((struct VkInstance_T *)((QVulkanInstance *)cls)->vkInstance ());
}


// static struct VkSurfaceKHR_T *QVulkanInstance::surfaceForWindow(QWindow *window)


static void _init_f_surfaceForWindow_1335 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("window");
  decl->add_arg<QWindow * > (argspec_0);
  decl->set_return<struct VkSurfaceKHR_T * > ();
}

static void _call_f_surfaceForWindow_1335 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QWindow *arg1 = gsi::arg_reader<QWindow * >() (args, heap);
  ret.write<struct VkSurfaceKHR_T * > ((struct VkSurfaceKHR_T *)QVulkanInstance::surfaceForWindow (arg1));
}



namespace gsi
{

static gsi::Methods methods_QVulkanInstance () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QVulkanInstance::QVulkanInstance()\nThis method creates an object of class QVulkanInstance.", &_init_ctor_QVulkanInstance_0, &_call_ctor_QVulkanInstance_0);
  methods += new qt_gsi::GenericMethod ("apiVersion", "@brief Method QVersionNumber QVulkanInstance::apiVersion()\n", true, &_init_f_apiVersion_c0, &_call_f_apiVersion_c0);
  methods += new qt_gsi::GenericMethod ("qt_create", "@brief Method bool QVulkanInstance::create()\n", false, &_init_f_create_0, &_call_f_create_0);
  methods += new qt_gsi::GenericMethod ("qt_destroy", "@brief Method void QVulkanInstance::destroy()\n", false, &_init_f_destroy_0, &_call_f_destroy_0);
  methods += new qt_gsi::GenericMethod ("deviceFunctions", "@brief Method QVulkanDeviceFunctions *QVulkanInstance::deviceFunctions(struct VkDevice_T *device)\n", false, &_init_f_deviceFunctions_2407, &_call_f_deviceFunctions_2407);
  methods += new qt_gsi::GenericMethod ("errorCode", "@brief Method enum VkResult QVulkanInstance::errorCode()\n", true, &_init_f_errorCode_c0, &_call_f_errorCode_c0);
  methods += new qt_gsi::GenericMethod ("extensions", "@brief Method QByteArrayList QVulkanInstance::extensions()\n", true, &_init_f_extensions_c0, &_call_f_extensions_c0);
  methods += new qt_gsi::GenericMethod ("flags", "@brief Method QFlags<QVulkanInstance::Flag> QVulkanInstance::flags()\n", true, &_init_f_flags_c0, &_call_f_flags_c0);
  methods += new qt_gsi::GenericMethod ("functions", "@brief Method QVulkanFunctions *QVulkanInstance::functions()\n", true, &_init_f_functions_c0, &_call_f_functions_c0);
  methods += new qt_gsi::GenericMethod ("getInstanceProcAddr", "@brief Method void *QVulkanInstance::getInstanceProcAddr(const char *name)()\n", false, &_init_f_getInstanceProcAddr_1731, &_call_f_getInstanceProcAddr_1731);
  methods += new qt_gsi::GenericMethod ("handle", "@brief Method QPlatformVulkanInstance *QVulkanInstance::handle()\n", true, &_init_f_handle_c0, &_call_f_handle_c0);
  methods += new qt_gsi::GenericMethod ("installDebugOutputFilter", "@brief Method void QVulkanInstance::installDebugOutputFilter(bool *filter(unsigned int flags, enum VkDebugReportObjectTypeEXT objectType, unsigned long int object, unsigned long int location, signed int messageCode, const char *pLayerPrefix, const char *pMessage))\n", false, &_init_f_installDebugOutputFilter_21239, &_call_f_installDebugOutputFilter_21239);
  methods += new qt_gsi::GenericMethod ("isValid?", "@brief Method bool QVulkanInstance::isValid()\n", true, &_init_f_isValid_c0, &_call_f_isValid_c0);
  methods += new qt_gsi::GenericMethod ("layers", "@brief Method QByteArrayList QVulkanInstance::layers()\n", true, &_init_f_layers_c0, &_call_f_layers_c0);
  methods += new qt_gsi::GenericMethod ("presentAboutToBeQueued", "@brief Method void QVulkanInstance::presentAboutToBeQueued(QWindow *window)\n", false, &_init_f_presentAboutToBeQueued_1335, &_call_f_presentAboutToBeQueued_1335);
  methods += new qt_gsi::GenericMethod ("presentQueued", "@brief Method void QVulkanInstance::presentQueued(QWindow *window)\n", false, &_init_f_presentQueued_1335, &_call_f_presentQueued_1335);
  methods += new qt_gsi::GenericMethod ("removeDebugOutputFilter", "@brief Method void QVulkanInstance::removeDebugOutputFilter(bool *filter(unsigned int flags, enum VkDebugReportObjectTypeEXT objectType, unsigned long int object, unsigned long int location, signed int messageCode, const char *pLayerPrefix, const char *pMessage))\n", false, &_init_f_removeDebugOutputFilter_21239, &_call_f_removeDebugOutputFilter_21239);
  methods += new qt_gsi::GenericMethod ("resetDeviceFunctions", "@brief Method void QVulkanInstance::resetDeviceFunctions(struct VkDevice_T *device)\n", false, &_init_f_resetDeviceFunctions_2407, &_call_f_resetDeviceFunctions_2407);
  methods += new qt_gsi::GenericMethod ("setApiVersion", "@brief Method void QVulkanInstance::setApiVersion(const QVersionNumber &vulkanVersion)\n", false, &_init_f_setApiVersion_2753, &_call_f_setApiVersion_2753);
  methods += new qt_gsi::GenericMethod ("setExtensions", "@brief Method void QVulkanInstance::setExtensions(const QByteArrayList &extensions)\n", false, &_init_f_setExtensions_2721, &_call_f_setExtensions_2721);
  methods += new qt_gsi::GenericMethod ("setFlags", "@brief Method void QVulkanInstance::setFlags(QFlags<QVulkanInstance::Flag> flags)\n", false, &_init_f_setFlags_3153, &_call_f_setFlags_3153);
  methods += new qt_gsi::GenericMethod ("setLayers", "@brief Method void QVulkanInstance::setLayers(const QByteArrayList &layers)\n", false, &_init_f_setLayers_2721, &_call_f_setLayers_2721);
  methods += new qt_gsi::GenericMethod ("setVkInstance", "@brief Method void QVulkanInstance::setVkInstance(struct VkInstance_T *existingVkInstance)\n", false, &_init_f_setVkInstance_2636, &_call_f_setVkInstance_2636);
  methods += new qt_gsi::GenericMethod ("supportedApiVersion", "@brief Method QVersionNumber QVulkanInstance::supportedApiVersion()\n", true, &_init_f_supportedApiVersion_c0, &_call_f_supportedApiVersion_c0);
  methods += new qt_gsi::GenericMethod ("supportedExtensions", "@brief Method QVulkanInfoVector<QVulkanExtension> QVulkanInstance::supportedExtensions()\n", false, &_init_f_supportedExtensions_0, &_call_f_supportedExtensions_0);
  methods += new qt_gsi::GenericMethod ("supportedExtensions", "@brief Method QVulkanInfoVector<QVulkanExtension> QVulkanInstance::supportedExtensions()\n", true, &_init_f_supportedExtensions_c0, &_call_f_supportedExtensions_c0);
  methods += new qt_gsi::GenericMethod ("supportedLayers", "@brief Method QVulkanInfoVector<QVulkanLayer> QVulkanInstance::supportedLayers()\n", false, &_init_f_supportedLayers_0, &_call_f_supportedLayers_0);
  methods += new qt_gsi::GenericMethod ("supportedLayers", "@brief Method QVulkanInfoVector<QVulkanLayer> QVulkanInstance::supportedLayers()\n", true, &_init_f_supportedLayers_c0, &_call_f_supportedLayers_c0);
  methods += new qt_gsi::GenericMethod ("supportsPresent", "@brief Method bool QVulkanInstance::supportsPresent(struct VkPhysicalDevice_T *physicalDevice, unsigned int queueFamilyIndex, QWindow *window)\n", false, &_init_f_supportsPresent_6127, &_call_f_supportsPresent_6127);
  methods += new qt_gsi::GenericMethod ("vkInstance", "@brief Method struct VkInstance_T *QVulkanInstance::vkInstance()\n", true, &_init_f_vkInstance_c0, &_call_f_vkInstance_c0);
  methods += new qt_gsi::GenericStaticMethod ("surfaceForWindow", "@brief Static method struct VkSurfaceKHR_T *QVulkanInstance::surfaceForWindow(QWindow *window)\nThis method is static and can be called without an instance.", &_init_f_surfaceForWindow_1335, &_call_f_surfaceForWindow_1335);
  return methods;
}

gsi::Class<QVulkanInstance> decl_QVulkanInstance ("QtGui", "QVulkanInstance",
  methods_QVulkanInstance (),
  "@qt\n@brief Binding of QVulkanInstance");


GSI_QTGUI_PUBLIC gsi::Class<QVulkanInstance> &qtdecl_QVulkanInstance () { return decl_QVulkanInstance; }

}


//  Implementation of the enum wrapper class for QVulkanInstance::Flag
namespace qt_gsi
{

static gsi::Enum<QVulkanInstance::Flag> decl_QVulkanInstance_Flag_Enum ("QtGui", "QVulkanInstance_Flag",
    gsi::enum_const ("NoDebugOutputRedirect", QVulkanInstance::NoDebugOutputRedirect, "@brief Enum constant QVulkanInstance::NoDebugOutputRedirect"),
  "@qt\n@brief This class represents the QVulkanInstance::Flag enum");

static gsi::QFlagsClass<QVulkanInstance::Flag > decl_QVulkanInstance_Flag_Enums ("QtGui", "QVulkanInstance_QFlags_Flag",
  "@qt\n@brief This class represents the QFlags<QVulkanInstance::Flag> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<QVulkanInstance> inject_QVulkanInstance_Flag_Enum_in_parent (decl_QVulkanInstance_Flag_Enum.defs ());
static gsi::ClassExt<QVulkanInstance> decl_QVulkanInstance_Flag_Enum_as_child (decl_QVulkanInstance_Flag_Enum, "Flag");
static gsi::ClassExt<QVulkanInstance> decl_QVulkanInstance_Flag_Enums_as_child (decl_QVulkanInstance_Flag_Enums, "QFlags_Flag");

}

