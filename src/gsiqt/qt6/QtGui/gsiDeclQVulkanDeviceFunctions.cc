
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQVulkanDeviceFunctions.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QVulkanDeviceFunctions>
#include "gsiQt.h"
#include "gsiQtGuiCommon.h"
#include "gsiDeclQtGuiTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QVulkanDeviceFunctions

//  Constructor QVulkanDeviceFunctions::QVulkanDeviceFunctions()


static void _init_ctor_QVulkanDeviceFunctions_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QVulkanDeviceFunctions> ();
}

static void _call_ctor_QVulkanDeviceFunctions_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVulkanDeviceFunctions *> (new QVulkanDeviceFunctions ());
}


// enum VkResult QVulkanDeviceFunctions::vkAllocateCommandBuffers(struct VkDevice_T *device, const struct VkCommandBufferAllocateInfo *pAllocateInfo, struct VkCommandBuffer_T **pCommandBuffers)


static void _init_f_vkAllocateCommandBuffers_10190 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pAllocateInfo");
  decl->add_arg<const struct VkCommandBufferAllocateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pCommandBuffers");
  decl->add_arg<struct VkCommandBuffer_T ** > (argspec_2);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkAllocateCommandBuffers_10190 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkCommandBufferAllocateInfo *arg2 = gsi::arg_reader<const struct VkCommandBufferAllocateInfo * >() (args, heap);
  struct VkCommandBuffer_T **arg3 = gsi::arg_reader<struct VkCommandBuffer_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkAllocateCommandBuffers (arg1, arg2, arg3));
}


// enum VkResult QVulkanDeviceFunctions::vkAllocateDescriptorSets(struct VkDevice_T *device, const struct VkDescriptorSetAllocateInfo *pAllocateInfo, struct VkDescriptorSet_T **pDescriptorSets)


static void _init_f_vkAllocateDescriptorSets_10290 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pAllocateInfo");
  decl->add_arg<const struct VkDescriptorSetAllocateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pDescriptorSets");
  decl->add_arg<struct VkDescriptorSet_T ** > (argspec_2);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkAllocateDescriptorSets_10290 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkDescriptorSetAllocateInfo *arg2 = gsi::arg_reader<const struct VkDescriptorSetAllocateInfo * >() (args, heap);
  struct VkDescriptorSet_T **arg3 = gsi::arg_reader<struct VkDescriptorSet_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkAllocateDescriptorSets (arg1, arg2, arg3));
}


// enum VkResult QVulkanDeviceFunctions::vkAllocateMemory(struct VkDevice_T *device, const struct VkMemoryAllocateInfo *pAllocateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkDeviceMemory_T **pMemory)


static void _init_f_vkAllocateMemory_13587 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pAllocateInfo");
  decl->add_arg<const struct VkMemoryAllocateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pMemory");
  decl->add_arg<struct VkDeviceMemory_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkAllocateMemory_13587 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkMemoryAllocateInfo *arg2 = gsi::arg_reader<const struct VkMemoryAllocateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkDeviceMemory_T **arg4 = gsi::arg_reader<struct VkDeviceMemory_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkAllocateMemory (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkBeginCommandBuffer(struct VkCommandBuffer_T *commandBuffer, const struct VkCommandBufferBeginInfo *pBeginInfo)


static void _init_f_vkBeginCommandBuffer_7529 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pBeginInfo");
  decl->add_arg<const struct VkCommandBufferBeginInfo * > (argspec_1);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkBeginCommandBuffer_7529 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  const struct VkCommandBufferBeginInfo *arg2 = gsi::arg_reader<const struct VkCommandBufferBeginInfo * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkBeginCommandBuffer (arg1, arg2));
}


// enum VkResult QVulkanDeviceFunctions::vkBindBufferMemory(struct VkDevice_T *device, struct VkBuffer_T *buffer, struct VkDeviceMemory_T *memory, unsigned long int memoryOffset)


static void _init_f_vkBindBufferMemory_9888 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("buffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("memory");
  decl->add_arg<struct VkDeviceMemory_T * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("memoryOffset");
  decl->add_arg<unsigned long int > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkBindBufferMemory_9888 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkBuffer_T *arg2 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  struct VkDeviceMemory_T *arg3 = gsi::arg_reader<struct VkDeviceMemory_T * >() (args, heap);
  unsigned long int arg4 = gsi::arg_reader<unsigned long int >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkBindBufferMemory (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkBindBufferMemory2(struct VkDevice_T *device, unsigned int bindInfoCount, const struct VkBindBufferMemoryInfo *pBindInfos)


static void _init_f_vkBindBufferMemory2_8306 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("bindInfoCount");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pBindInfos");
  decl->add_arg<const struct VkBindBufferMemoryInfo * > (argspec_2);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkBindBufferMemory2_8306 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkBindBufferMemoryInfo *arg3 = gsi::arg_reader<const struct VkBindBufferMemoryInfo * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkBindBufferMemory2 (arg1, arg2, arg3));
}


// enum VkResult QVulkanDeviceFunctions::vkBindImageMemory(struct VkDevice_T *device, struct VkImage_T *image, struct VkDeviceMemory_T *memory, unsigned long int memoryOffset)


static void _init_f_vkBindImageMemory_9769 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("image");
  decl->add_arg<struct VkImage_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("memory");
  decl->add_arg<struct VkDeviceMemory_T * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("memoryOffset");
  decl->add_arg<unsigned long int > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkBindImageMemory_9769 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkImage_T *arg2 = gsi::arg_reader<struct VkImage_T * >() (args, heap);
  struct VkDeviceMemory_T *arg3 = gsi::arg_reader<struct VkDeviceMemory_T * >() (args, heap);
  unsigned long int arg4 = gsi::arg_reader<unsigned long int >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkBindImageMemory (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkBindImageMemory2(struct VkDevice_T *device, unsigned int bindInfoCount, const struct VkBindImageMemoryInfo *pBindInfos)


static void _init_f_vkBindImageMemory2_8187 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("bindInfoCount");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pBindInfos");
  decl->add_arg<const struct VkBindImageMemoryInfo * > (argspec_2);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkBindImageMemory2_8187 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkBindImageMemoryInfo *arg3 = gsi::arg_reader<const struct VkBindImageMemoryInfo * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkBindImageMemory2 (arg1, arg2, arg3));
}


// void QVulkanDeviceFunctions::vkCmdBeginQuery(struct VkCommandBuffer_T *commandBuffer, struct VkQueryPool_T *queryPool, unsigned int query, unsigned int flags)


static void _init_f_vkCmdBeginQuery_9099 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("queryPool");
  decl->add_arg<struct VkQueryPool_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("query");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("flags");
  decl->add_arg<unsigned int > (argspec_3);
  decl->set_return<void > ();
}

static void _call_f_vkCmdBeginQuery_9099 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkQueryPool_T *arg2 = gsi::arg_reader<struct VkQueryPool_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdBeginQuery (arg1, arg2, arg3, arg4);
}


// void QVulkanDeviceFunctions::vkCmdBeginRenderPass(struct VkCommandBuffer_T *commandBuffer, const struct VkRenderPassBeginInfo *pRenderPassBegin, enum VkSubpassContents contents)


static void _init_f_vkCmdBeginRenderPass_9924 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pRenderPassBegin");
  decl->add_arg<const struct VkRenderPassBeginInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("contents");
  decl->add_arg<enum VkSubpassContents > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkCmdBeginRenderPass_9924 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  const struct VkRenderPassBeginInfo *arg2 = gsi::arg_reader<const struct VkRenderPassBeginInfo * >() (args, heap);
  enum VkSubpassContents arg3 = gsi::arg_reader<enum VkSubpassContents >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdBeginRenderPass (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkCmdBeginRenderPass2(struct VkCommandBuffer_T *commandBuffer, const struct VkRenderPassBeginInfo *pRenderPassBegin, const struct VkSubpassBeginInfo *pSubpassBeginInfo)


static void _init_f_vkCmdBeginRenderPass2_11080 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pRenderPassBegin");
  decl->add_arg<const struct VkRenderPassBeginInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pSubpassBeginInfo");
  decl->add_arg<const struct VkSubpassBeginInfo * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkCmdBeginRenderPass2_11080 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  const struct VkRenderPassBeginInfo *arg2 = gsi::arg_reader<const struct VkRenderPassBeginInfo * >() (args, heap);
  const struct VkSubpassBeginInfo *arg3 = gsi::arg_reader<const struct VkSubpassBeginInfo * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdBeginRenderPass2 (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkCmdBindDescriptorSets(struct VkCommandBuffer_T *commandBuffer, enum VkPipelineBindPoint pipelineBindPoint, struct VkPipelineLayout_T *layout, unsigned int firstSet, unsigned int descriptorSetCount, const struct VkDescriptorSet_T **pDescriptorSets, unsigned int dynamicOffsetCount, const unsigned int *pDynamicOffsets)


static void _init_f_vkCmdBindDescriptorSets_20450 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pipelineBindPoint");
  decl->add_arg<enum VkPipelineBindPoint > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("layout");
  decl->add_arg<struct VkPipelineLayout_T * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("firstSet");
  decl->add_arg<unsigned int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("descriptorSetCount");
  decl->add_arg<unsigned int > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("pDescriptorSets");
  decl->add_arg<const struct VkDescriptorSet_T ** > (argspec_5);
  static gsi::ArgSpecBase argspec_6 ("dynamicOffsetCount");
  decl->add_arg<unsigned int > (argspec_6);
  static gsi::ArgSpecBase argspec_7 ("pDynamicOffsets");
  decl->add_arg<const unsigned int * > (argspec_7);
  decl->set_return<void > ();
}

static void _call_f_vkCmdBindDescriptorSets_20450 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  enum VkPipelineBindPoint arg2 = gsi::arg_reader<enum VkPipelineBindPoint >() (args, heap);
  struct VkPipelineLayout_T *arg3 = gsi::arg_reader<struct VkPipelineLayout_T * >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg5 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkDescriptorSet_T **arg6 = gsi::arg_reader<const struct VkDescriptorSet_T ** >() (args, heap);
  unsigned int arg7 = gsi::arg_reader<unsigned int >() (args, heap);
  const unsigned int *arg8 = gsi::arg_reader<const unsigned int * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdBindDescriptorSets (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}


// void QVulkanDeviceFunctions::vkCmdBindIndexBuffer(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *buffer, unsigned long int offset, enum VkIndexType indexType)


static void _init_f_vkCmdBindIndexBuffer_9693 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("buffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("offset");
  decl->add_arg<unsigned long int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("indexType");
  decl->add_arg<enum VkIndexType > (argspec_3);
  decl->set_return<void > ();
}

static void _call_f_vkCmdBindIndexBuffer_9693 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkBuffer_T *arg2 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  unsigned long int arg3 = gsi::arg_reader<unsigned long int >() (args, heap);
  enum VkIndexType arg4 = gsi::arg_reader<enum VkIndexType >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdBindIndexBuffer (arg1, arg2, arg3, arg4);
}


// void QVulkanDeviceFunctions::vkCmdBindPipeline(struct VkCommandBuffer_T *commandBuffer, enum VkPipelineBindPoint pipelineBindPoint, struct VkPipeline_T *pipeline)


static void _init_f_vkCmdBindPipeline_8476 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pipelineBindPoint");
  decl->add_arg<enum VkPipelineBindPoint > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pipeline");
  decl->add_arg<struct VkPipeline_T * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkCmdBindPipeline_8476 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  enum VkPipelineBindPoint arg2 = gsi::arg_reader<enum VkPipelineBindPoint >() (args, heap);
  struct VkPipeline_T *arg3 = gsi::arg_reader<struct VkPipeline_T * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdBindPipeline (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkCmdBindVertexBuffers(struct VkCommandBuffer_T *commandBuffer, unsigned int firstBinding, unsigned int bindingCount, const struct VkBuffer_T **pBuffers, const unsigned long int *pOffsets)


static void _init_f_vkCmdBindVertexBuffers_12615 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("firstBinding");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("bindingCount");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pBuffers");
  decl->add_arg<const struct VkBuffer_T ** > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("pOffsets");
  decl->add_arg<const unsigned long int * > (argspec_4);
  decl->set_return<void > ();
}

static void _call_f_vkCmdBindVertexBuffers_12615 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkBuffer_T **arg4 = gsi::arg_reader<const struct VkBuffer_T ** >() (args, heap);
  const unsigned long int *arg5 = gsi::arg_reader<const unsigned long int * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdBindVertexBuffers (arg1, arg2, arg3, arg4, arg5);
}


// void QVulkanDeviceFunctions::vkCmdBlitImage(struct VkCommandBuffer_T *commandBuffer, struct VkImage_T *srcImage, enum VkImageLayout srcImageLayout, struct VkImage_T *dstImage, enum VkImageLayout dstImageLayout, unsigned int regionCount, const struct VkImageBlit *pRegions, enum VkFilter filter)


static void _init_f_vkCmdBlitImage_18427 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("srcImage");
  decl->add_arg<struct VkImage_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("srcImageLayout");
  decl->add_arg<enum VkImageLayout > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("dstImage");
  decl->add_arg<struct VkImage_T * > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("dstImageLayout");
  decl->add_arg<enum VkImageLayout > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("regionCount");
  decl->add_arg<unsigned int > (argspec_5);
  static gsi::ArgSpecBase argspec_6 ("pRegions");
  decl->add_arg<const struct VkImageBlit * > (argspec_6);
  static gsi::ArgSpecBase argspec_7 ("filter");
  decl->add_arg<enum VkFilter > (argspec_7);
  decl->set_return<void > ();
}

static void _call_f_vkCmdBlitImage_18427 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkImage_T *arg2 = gsi::arg_reader<struct VkImage_T * >() (args, heap);
  enum VkImageLayout arg3 = gsi::arg_reader<enum VkImageLayout >() (args, heap);
  struct VkImage_T *arg4 = gsi::arg_reader<struct VkImage_T * >() (args, heap);
  enum VkImageLayout arg5 = gsi::arg_reader<enum VkImageLayout >() (args, heap);
  unsigned int arg6 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkImageBlit *arg7 = gsi::arg_reader<const struct VkImageBlit * >() (args, heap);
  enum VkFilter arg8 = gsi::arg_reader<enum VkFilter >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdBlitImage (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}


// void QVulkanDeviceFunctions::vkCmdClearAttachments(struct VkCommandBuffer_T *commandBuffer, unsigned int attachmentCount, const struct VkClearAttachment *pAttachments, unsigned int rectCount, const struct VkClearRect *pRects)


static void _init_f_vkCmdClearAttachments_13299 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("attachmentCount");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAttachments");
  decl->add_arg<const struct VkClearAttachment * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("rectCount");
  decl->add_arg<unsigned int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("pRects");
  decl->add_arg<const struct VkClearRect * > (argspec_4);
  decl->set_return<void > ();
}

static void _call_f_vkCmdClearAttachments_13299 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkClearAttachment *arg3 = gsi::arg_reader<const struct VkClearAttachment * >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkClearRect *arg5 = gsi::arg_reader<const struct VkClearRect * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdClearAttachments (arg1, arg2, arg3, arg4, arg5);
}


// void QVulkanDeviceFunctions::vkCmdClearColorImage(struct VkCommandBuffer_T *commandBuffer, struct VkImage_T *image, enum VkImageLayout imageLayout, const union VkClearColorValue *pColor, unsigned int rangeCount, const struct VkImageSubresourceRange *pRanges)


static void _init_f_vkCmdClearColorImage_17172 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("image");
  decl->add_arg<struct VkImage_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("imageLayout");
  decl->add_arg<enum VkImageLayout > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pColor");
  decl->add_arg<const union VkClearColorValue * > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("rangeCount");
  decl->add_arg<unsigned int > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("pRanges");
  decl->add_arg<const struct VkImageSubresourceRange * > (argspec_5);
  decl->set_return<void > ();
}

static void _call_f_vkCmdClearColorImage_17172 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkImage_T *arg2 = gsi::arg_reader<struct VkImage_T * >() (args, heap);
  enum VkImageLayout arg3 = gsi::arg_reader<enum VkImageLayout >() (args, heap);
  const union VkClearColorValue *arg4 = gsi::arg_reader<const union VkClearColorValue * >() (args, heap);
  unsigned int arg5 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkImageSubresourceRange *arg6 = gsi::arg_reader<const struct VkImageSubresourceRange * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdClearColorImage (arg1, arg2, arg3, arg4, arg5, arg6);
}


// void QVulkanDeviceFunctions::vkCmdClearDepthStencilImage(struct VkCommandBuffer_T *commandBuffer, struct VkImage_T *image, enum VkImageLayout imageLayout, const struct VkClearDepthStencilValue *pDepthStencil, unsigned int rangeCount, const struct VkImageSubresourceRange *pRanges)


static void _init_f_vkCmdClearDepthStencilImage_18008 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("image");
  decl->add_arg<struct VkImage_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("imageLayout");
  decl->add_arg<enum VkImageLayout > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pDepthStencil");
  decl->add_arg<const struct VkClearDepthStencilValue * > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("rangeCount");
  decl->add_arg<unsigned int > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("pRanges");
  decl->add_arg<const struct VkImageSubresourceRange * > (argspec_5);
  decl->set_return<void > ();
}

static void _call_f_vkCmdClearDepthStencilImage_18008 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkImage_T *arg2 = gsi::arg_reader<struct VkImage_T * >() (args, heap);
  enum VkImageLayout arg3 = gsi::arg_reader<enum VkImageLayout >() (args, heap);
  const struct VkClearDepthStencilValue *arg4 = gsi::arg_reader<const struct VkClearDepthStencilValue * >() (args, heap);
  unsigned int arg5 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkImageSubresourceRange *arg6 = gsi::arg_reader<const struct VkImageSubresourceRange * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdClearDepthStencilImage (arg1, arg2, arg3, arg4, arg5, arg6);
}


// void QVulkanDeviceFunctions::vkCmdCopyBuffer(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *srcBuffer, struct VkBuffer_T *dstBuffer, unsigned int regionCount, const struct VkBufferCopy *pRegions)


static void _init_f_vkCmdCopyBuffer_12638 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("srcBuffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("dstBuffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("regionCount");
  decl->add_arg<unsigned int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("pRegions");
  decl->add_arg<const struct VkBufferCopy * > (argspec_4);
  decl->set_return<void > ();
}

static void _call_f_vkCmdCopyBuffer_12638 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkBuffer_T *arg2 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  struct VkBuffer_T *arg3 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkBufferCopy *arg5 = gsi::arg_reader<const struct VkBufferCopy * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdCopyBuffer (arg1, arg2, arg3, arg4, arg5);
}


// void QVulkanDeviceFunctions::vkCmdCopyBufferToImage(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *srcBuffer, struct VkImage_T *dstImage, enum VkImageLayout dstImageLayout, unsigned int regionCount, const struct VkBufferImageCopy *pRegions)


static void _init_f_vkCmdCopyBufferToImage_15225 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("srcBuffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("dstImage");
  decl->add_arg<struct VkImage_T * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("dstImageLayout");
  decl->add_arg<enum VkImageLayout > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("regionCount");
  decl->add_arg<unsigned int > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("pRegions");
  decl->add_arg<const struct VkBufferImageCopy * > (argspec_5);
  decl->set_return<void > ();
}

static void _call_f_vkCmdCopyBufferToImage_15225 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkBuffer_T *arg2 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  struct VkImage_T *arg3 = gsi::arg_reader<struct VkImage_T * >() (args, heap);
  enum VkImageLayout arg4 = gsi::arg_reader<enum VkImageLayout >() (args, heap);
  unsigned int arg5 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkBufferImageCopy *arg6 = gsi::arg_reader<const struct VkBufferImageCopy * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdCopyBufferToImage (arg1, arg2, arg3, arg4, arg5, arg6);
}


// void QVulkanDeviceFunctions::vkCmdCopyImage(struct VkCommandBuffer_T *commandBuffer, struct VkImage_T *srcImage, enum VkImageLayout srcImageLayout, struct VkImage_T *dstImage, enum VkImageLayout dstImageLayout, unsigned int regionCount, const struct VkImageCopy *pRegions)


static void _init_f_vkCmdCopyImage_16727 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("srcImage");
  decl->add_arg<struct VkImage_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("srcImageLayout");
  decl->add_arg<enum VkImageLayout > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("dstImage");
  decl->add_arg<struct VkImage_T * > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("dstImageLayout");
  decl->add_arg<enum VkImageLayout > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("regionCount");
  decl->add_arg<unsigned int > (argspec_5);
  static gsi::ArgSpecBase argspec_6 ("pRegions");
  decl->add_arg<const struct VkImageCopy * > (argspec_6);
  decl->set_return<void > ();
}

static void _call_f_vkCmdCopyImage_16727 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkImage_T *arg2 = gsi::arg_reader<struct VkImage_T * >() (args, heap);
  enum VkImageLayout arg3 = gsi::arg_reader<enum VkImageLayout >() (args, heap);
  struct VkImage_T *arg4 = gsi::arg_reader<struct VkImage_T * >() (args, heap);
  enum VkImageLayout arg5 = gsi::arg_reader<enum VkImageLayout >() (args, heap);
  unsigned int arg6 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkImageCopy *arg7 = gsi::arg_reader<const struct VkImageCopy * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdCopyImage (arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}


// void QVulkanDeviceFunctions::vkCmdCopyImageToBuffer(struct VkCommandBuffer_T *commandBuffer, struct VkImage_T *srcImage, enum VkImageLayout srcImageLayout, struct VkBuffer_T *dstBuffer, unsigned int regionCount, const struct VkBufferImageCopy *pRegions)


static void _init_f_vkCmdCopyImageToBuffer_15225 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("srcImage");
  decl->add_arg<struct VkImage_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("srcImageLayout");
  decl->add_arg<enum VkImageLayout > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("dstBuffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("regionCount");
  decl->add_arg<unsigned int > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("pRegions");
  decl->add_arg<const struct VkBufferImageCopy * > (argspec_5);
  decl->set_return<void > ();
}

static void _call_f_vkCmdCopyImageToBuffer_15225 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkImage_T *arg2 = gsi::arg_reader<struct VkImage_T * >() (args, heap);
  enum VkImageLayout arg3 = gsi::arg_reader<enum VkImageLayout >() (args, heap);
  struct VkBuffer_T *arg4 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  unsigned int arg5 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkBufferImageCopy *arg6 = gsi::arg_reader<const struct VkBufferImageCopy * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdCopyImageToBuffer (arg1, arg2, arg3, arg4, arg5, arg6);
}


// void QVulkanDeviceFunctions::vkCmdCopyQueryPoolResults(struct VkCommandBuffer_T *commandBuffer, struct VkQueryPool_T *queryPool, unsigned int firstQuery, unsigned int queryCount, struct VkBuffer_T *dstBuffer, unsigned long int dstOffset, unsigned long int stride, unsigned int flags)


static void _init_f_vkCmdCopyQueryPoolResults_17552 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("queryPool");
  decl->add_arg<struct VkQueryPool_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("firstQuery");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("queryCount");
  decl->add_arg<unsigned int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("dstBuffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("dstOffset");
  decl->add_arg<unsigned long int > (argspec_5);
  static gsi::ArgSpecBase argspec_6 ("stride");
  decl->add_arg<unsigned long int > (argspec_6);
  static gsi::ArgSpecBase argspec_7 ("flags");
  decl->add_arg<unsigned int > (argspec_7);
  decl->set_return<void > ();
}

static void _call_f_vkCmdCopyQueryPoolResults_17552 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkQueryPool_T *arg2 = gsi::arg_reader<struct VkQueryPool_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  struct VkBuffer_T *arg5 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  unsigned long int arg6 = gsi::arg_reader<unsigned long int >() (args, heap);
  unsigned long int arg7 = gsi::arg_reader<unsigned long int >() (args, heap);
  unsigned int arg8 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdCopyQueryPoolResults (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}


// void QVulkanDeviceFunctions::vkCmdDispatch(struct VkCommandBuffer_T *commandBuffer, unsigned int groupCountX, unsigned int groupCountY, unsigned int groupCountZ)


static void _init_f_vkCmdDispatch_8112 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("groupCountX");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("groupCountY");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("groupCountZ");
  decl->add_arg<unsigned int > (argspec_3);
  decl->set_return<void > ();
}

static void _call_f_vkCmdDispatch_8112 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdDispatch (arg1, arg2, arg3, arg4);
}


// void QVulkanDeviceFunctions::vkCmdDispatchBase(struct VkCommandBuffer_T *commandBuffer, unsigned int baseGroupX, unsigned int baseGroupY, unsigned int baseGroupZ, unsigned int groupCountX, unsigned int groupCountY, unsigned int groupCountZ)


static void _init_f_vkCmdDispatchBase_13104 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("baseGroupX");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("baseGroupY");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("baseGroupZ");
  decl->add_arg<unsigned int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("groupCountX");
  decl->add_arg<unsigned int > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("groupCountY");
  decl->add_arg<unsigned int > (argspec_5);
  static gsi::ArgSpecBase argspec_6 ("groupCountZ");
  decl->add_arg<unsigned int > (argspec_6);
  decl->set_return<void > ();
}

static void _call_f_vkCmdDispatchBase_13104 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg5 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg6 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg7 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdDispatchBase (arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}


// void QVulkanDeviceFunctions::vkCmdDispatchIndirect(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *buffer, unsigned long int offset)


static void _init_f_vkCmdDispatchIndirect_7669 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("buffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("offset");
  decl->add_arg<unsigned long int > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkCmdDispatchIndirect_7669 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkBuffer_T *arg2 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  unsigned long int arg3 = gsi::arg_reader<unsigned long int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdDispatchIndirect (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkCmdDraw(struct VkCommandBuffer_T *commandBuffer, unsigned int vertexCount, unsigned int instanceCount, unsigned int firstVertex, unsigned int firstInstance)


static void _init_f_vkCmdDraw_9776 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("vertexCount");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("instanceCount");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("firstVertex");
  decl->add_arg<unsigned int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("firstInstance");
  decl->add_arg<unsigned int > (argspec_4);
  decl->set_return<void > ();
}

static void _call_f_vkCmdDraw_9776 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg5 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdDraw (arg1, arg2, arg3, arg4, arg5);
}


// void QVulkanDeviceFunctions::vkCmdDrawIndexed(struct VkCommandBuffer_T *commandBuffer, unsigned int indexCount, unsigned int instanceCount, unsigned int firstIndex, signed int vertexOffset, unsigned int firstInstance)


static void _init_f_vkCmdDrawIndexed_11213 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("indexCount");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("instanceCount");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("firstIndex");
  decl->add_arg<unsigned int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("vertexOffset");
  decl->add_arg<signed int > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("firstInstance");
  decl->add_arg<unsigned int > (argspec_5);
  decl->set_return<void > ();
}

static void _call_f_vkCmdDrawIndexed_11213 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  signed int arg5 = gsi::arg_reader<signed int >() (args, heap);
  unsigned int arg6 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdDrawIndexed (arg1, arg2, arg3, arg4, arg5, arg6);
}


// void QVulkanDeviceFunctions::vkCmdDrawIndexedIndirect(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *buffer, unsigned long int offset, unsigned int drawCount, unsigned int stride)


static void _init_f_vkCmdDrawIndexedIndirect_10997 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("buffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("offset");
  decl->add_arg<unsigned long int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("drawCount");
  decl->add_arg<unsigned int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("stride");
  decl->add_arg<unsigned int > (argspec_4);
  decl->set_return<void > ();
}

static void _call_f_vkCmdDrawIndexedIndirect_10997 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkBuffer_T *arg2 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  unsigned long int arg3 = gsi::arg_reader<unsigned long int >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg5 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdDrawIndexedIndirect (arg1, arg2, arg3, arg4, arg5);
}


// void QVulkanDeviceFunctions::vkCmdDrawIndexedIndirectCount(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *buffer, unsigned long int offset, struct VkBuffer_T *countBuffer, unsigned long int countBufferOffset, unsigned int maxDrawCount, unsigned int stride)


static void _init_f_vkCmdDrawIndexedIndirectCount_15546 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("buffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("offset");
  decl->add_arg<unsigned long int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("countBuffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("countBufferOffset");
  decl->add_arg<unsigned long int > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("maxDrawCount");
  decl->add_arg<unsigned int > (argspec_5);
  static gsi::ArgSpecBase argspec_6 ("stride");
  decl->add_arg<unsigned int > (argspec_6);
  decl->set_return<void > ();
}

static void _call_f_vkCmdDrawIndexedIndirectCount_15546 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkBuffer_T *arg2 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  unsigned long int arg3 = gsi::arg_reader<unsigned long int >() (args, heap);
  struct VkBuffer_T *arg4 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  unsigned long int arg5 = gsi::arg_reader<unsigned long int >() (args, heap);
  unsigned int arg6 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg7 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdDrawIndexedIndirectCount (arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}


// void QVulkanDeviceFunctions::vkCmdDrawIndirect(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *buffer, unsigned long int offset, unsigned int drawCount, unsigned int stride)


static void _init_f_vkCmdDrawIndirect_10997 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("buffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("offset");
  decl->add_arg<unsigned long int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("drawCount");
  decl->add_arg<unsigned int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("stride");
  decl->add_arg<unsigned int > (argspec_4);
  decl->set_return<void > ();
}

static void _call_f_vkCmdDrawIndirect_10997 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkBuffer_T *arg2 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  unsigned long int arg3 = gsi::arg_reader<unsigned long int >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg5 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdDrawIndirect (arg1, arg2, arg3, arg4, arg5);
}


// void QVulkanDeviceFunctions::vkCmdDrawIndirectCount(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *buffer, unsigned long int offset, struct VkBuffer_T *countBuffer, unsigned long int countBufferOffset, unsigned int maxDrawCount, unsigned int stride)


static void _init_f_vkCmdDrawIndirectCount_15546 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("buffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("offset");
  decl->add_arg<unsigned long int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("countBuffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("countBufferOffset");
  decl->add_arg<unsigned long int > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("maxDrawCount");
  decl->add_arg<unsigned int > (argspec_5);
  static gsi::ArgSpecBase argspec_6 ("stride");
  decl->add_arg<unsigned int > (argspec_6);
  decl->set_return<void > ();
}

static void _call_f_vkCmdDrawIndirectCount_15546 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkBuffer_T *arg2 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  unsigned long int arg3 = gsi::arg_reader<unsigned long int >() (args, heap);
  struct VkBuffer_T *arg4 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  unsigned long int arg5 = gsi::arg_reader<unsigned long int >() (args, heap);
  unsigned int arg6 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg7 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdDrawIndirectCount (arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}


// void QVulkanDeviceFunctions::vkCmdEndQuery(struct VkCommandBuffer_T *commandBuffer, struct VkQueryPool_T *queryPool, unsigned int query)


static void _init_f_vkCmdEndQuery_7435 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("queryPool");
  decl->add_arg<struct VkQueryPool_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("query");
  decl->add_arg<unsigned int > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkCmdEndQuery_7435 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkQueryPool_T *arg2 = gsi::arg_reader<struct VkQueryPool_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdEndQuery (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkCmdEndRenderPass(struct VkCommandBuffer_T *commandBuffer)


static void _init_f_vkCmdEndRenderPass_3120 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_vkCmdEndRenderPass_3120 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdEndRenderPass (arg1);
}


// void QVulkanDeviceFunctions::vkCmdEndRenderPass2(struct VkCommandBuffer_T *commandBuffer, const struct VkSubpassEndInfo *pSubpassEndInfo)


static void _init_f_vkCmdEndRenderPass2_6755 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pSubpassEndInfo");
  decl->add_arg<const struct VkSubpassEndInfo * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_vkCmdEndRenderPass2_6755 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  const struct VkSubpassEndInfo *arg2 = gsi::arg_reader<const struct VkSubpassEndInfo * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdEndRenderPass2 (arg1, arg2);
}


// void QVulkanDeviceFunctions::vkCmdExecuteCommands(struct VkCommandBuffer_T *commandBuffer, unsigned int commandBufferCount, const struct VkCommandBuffer_T **pCommandBuffers)


static void _init_f_vkCmdExecuteCommands_8533 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("commandBufferCount");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pCommandBuffers");
  decl->add_arg<const struct VkCommandBuffer_T ** > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkCmdExecuteCommands_8533 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkCommandBuffer_T **arg3 = gsi::arg_reader<const struct VkCommandBuffer_T ** >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdExecuteCommands (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkCmdFillBuffer(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *dstBuffer, unsigned long int dstOffset, unsigned long int size, unsigned int data)


static void _init_f_vkCmdFillBuffer_11573 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("dstBuffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("dstOffset");
  decl->add_arg<unsigned long int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("size");
  decl->add_arg<unsigned long int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("data");
  decl->add_arg<unsigned int > (argspec_4);
  decl->set_return<void > ();
}

static void _call_f_vkCmdFillBuffer_11573 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkBuffer_T *arg2 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  unsigned long int arg3 = gsi::arg_reader<unsigned long int >() (args, heap);
  unsigned long int arg4 = gsi::arg_reader<unsigned long int >() (args, heap);
  unsigned int arg5 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdFillBuffer (arg1, arg2, arg3, arg4, arg5);
}


// void QVulkanDeviceFunctions::vkCmdNextSubpass(struct VkCommandBuffer_T *commandBuffer, enum VkSubpassContents contents)


static void _init_f_vkCmdNextSubpass_5805 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("contents");
  decl->add_arg<enum VkSubpassContents > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_vkCmdNextSubpass_5805 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  enum VkSubpassContents arg2 = gsi::arg_reader<enum VkSubpassContents >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdNextSubpass (arg1, arg2);
}


// void QVulkanDeviceFunctions::vkCmdNextSubpass2(struct VkCommandBuffer_T *commandBuffer, const struct VkSubpassBeginInfo *pSubpassBeginInfo, const struct VkSubpassEndInfo *pSubpassEndInfo)


static void _init_f_vkCmdNextSubpass2_10596 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pSubpassBeginInfo");
  decl->add_arg<const struct VkSubpassBeginInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pSubpassEndInfo");
  decl->add_arg<const struct VkSubpassEndInfo * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkCmdNextSubpass2_10596 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  const struct VkSubpassBeginInfo *arg2 = gsi::arg_reader<const struct VkSubpassBeginInfo * >() (args, heap);
  const struct VkSubpassEndInfo *arg3 = gsi::arg_reader<const struct VkSubpassEndInfo * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdNextSubpass2 (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkCmdPipelineBarrier(struct VkCommandBuffer_T *commandBuffer, unsigned int srcStageMask, unsigned int dstStageMask, unsigned int dependencyFlags, unsigned int memoryBarrierCount, const struct VkMemoryBarrier *pMemoryBarriers, unsigned int bufferMemoryBarrierCount, const struct VkBufferMemoryBarrier *pBufferMemoryBarriers, unsigned int imageMemoryBarrierCount, const struct VkImageMemoryBarrier *pImageMemoryBarriers)


static void _init_f_vkCmdPipelineBarrier_24890 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("srcStageMask");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("dstStageMask");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("dependencyFlags");
  decl->add_arg<unsigned int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("memoryBarrierCount");
  decl->add_arg<unsigned int > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("pMemoryBarriers");
  decl->add_arg<const struct VkMemoryBarrier * > (argspec_5);
  static gsi::ArgSpecBase argspec_6 ("bufferMemoryBarrierCount");
  decl->add_arg<unsigned int > (argspec_6);
  static gsi::ArgSpecBase argspec_7 ("pBufferMemoryBarriers");
  decl->add_arg<const struct VkBufferMemoryBarrier * > (argspec_7);
  static gsi::ArgSpecBase argspec_8 ("imageMemoryBarrierCount");
  decl->add_arg<unsigned int > (argspec_8);
  static gsi::ArgSpecBase argspec_9 ("pImageMemoryBarriers");
  decl->add_arg<const struct VkImageMemoryBarrier * > (argspec_9);
  decl->set_return<void > ();
}

static void _call_f_vkCmdPipelineBarrier_24890 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg5 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkMemoryBarrier *arg6 = gsi::arg_reader<const struct VkMemoryBarrier * >() (args, heap);
  unsigned int arg7 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkBufferMemoryBarrier *arg8 = gsi::arg_reader<const struct VkBufferMemoryBarrier * >() (args, heap);
  unsigned int arg9 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkImageMemoryBarrier *arg10 = gsi::arg_reader<const struct VkImageMemoryBarrier * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdPipelineBarrier (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
}


// void QVulkanDeviceFunctions::vkCmdPushConstants(struct VkCommandBuffer_T *commandBuffer, struct VkPipelineLayout_T *layout, unsigned int stageFlags, unsigned int offset, unsigned int size, const void *pValues)


static void _init_f_vkCmdPushConstants_12922 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("layout");
  decl->add_arg<struct VkPipelineLayout_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("stageFlags");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("offset");
  decl->add_arg<unsigned int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("size");
  decl->add_arg<unsigned int > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("pValues");
  decl->add_arg<const void * > (argspec_5);
  decl->set_return<void > ();
}

static void _call_f_vkCmdPushConstants_12922 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkPipelineLayout_T *arg2 = gsi::arg_reader<struct VkPipelineLayout_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg5 = gsi::arg_reader<unsigned int >() (args, heap);
  const void *arg6 = gsi::arg_reader<const void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdPushConstants (arg1, arg2, arg3, arg4, arg5, arg6);
}


// void QVulkanDeviceFunctions::vkCmdResetEvent(struct VkCommandBuffer_T *commandBuffer, struct VkEvent_T *event, unsigned int stageMask)


static void _init_f_vkCmdResetEvent_7005 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("event");
  decl->add_arg<struct VkEvent_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("stageMask");
  decl->add_arg<unsigned int > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkCmdResetEvent_7005 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkEvent_T *arg2 = gsi::arg_reader<struct VkEvent_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdResetEvent (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkCmdResetQueryPool(struct VkCommandBuffer_T *commandBuffer, struct VkQueryPool_T *queryPool, unsigned int firstQuery, unsigned int queryCount)


static void _init_f_vkCmdResetQueryPool_9099 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("queryPool");
  decl->add_arg<struct VkQueryPool_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("firstQuery");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("queryCount");
  decl->add_arg<unsigned int > (argspec_3);
  decl->set_return<void > ();
}

static void _call_f_vkCmdResetQueryPool_9099 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkQueryPool_T *arg2 = gsi::arg_reader<struct VkQueryPool_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdResetQueryPool (arg1, arg2, arg3, arg4);
}


// void QVulkanDeviceFunctions::vkCmdResolveImage(struct VkCommandBuffer_T *commandBuffer, struct VkImage_T *srcImage, enum VkImageLayout srcImageLayout, struct VkImage_T *dstImage, enum VkImageLayout dstImageLayout, unsigned int regionCount, const struct VkImageResolve *pRegions)


static void _init_f_vkCmdResolveImage_17052 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("srcImage");
  decl->add_arg<struct VkImage_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("srcImageLayout");
  decl->add_arg<enum VkImageLayout > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("dstImage");
  decl->add_arg<struct VkImage_T * > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("dstImageLayout");
  decl->add_arg<enum VkImageLayout > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("regionCount");
  decl->add_arg<unsigned int > (argspec_5);
  static gsi::ArgSpecBase argspec_6 ("pRegions");
  decl->add_arg<const struct VkImageResolve * > (argspec_6);
  decl->set_return<void > ();
}

static void _call_f_vkCmdResolveImage_17052 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkImage_T *arg2 = gsi::arg_reader<struct VkImage_T * >() (args, heap);
  enum VkImageLayout arg3 = gsi::arg_reader<enum VkImageLayout >() (args, heap);
  struct VkImage_T *arg4 = gsi::arg_reader<struct VkImage_T * >() (args, heap);
  enum VkImageLayout arg5 = gsi::arg_reader<enum VkImageLayout >() (args, heap);
  unsigned int arg6 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkImageResolve *arg7 = gsi::arg_reader<const struct VkImageResolve * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdResolveImage (arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}


// void QVulkanDeviceFunctions::vkCmdSetBlendConstants(struct VkCommandBuffer_T *commandBuffer, const float blendConstants [])


static void _init_f_vkCmdSetBlendConstants_5005 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("blendConstants");
  decl->add_arg<const float [] > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_vkCmdSetBlendConstants_5005 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  const float arg2 [] = gsi::arg_reader<const float [] >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdSetBlendConstants (arg1, arg2);
}


// void QVulkanDeviceFunctions::vkCmdSetDepthBias(struct VkCommandBuffer_T *commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)


static void _init_f_vkCmdSetDepthBias_5706 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("depthBiasConstantFactor");
  decl->add_arg<float > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("depthBiasClamp");
  decl->add_arg<float > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("depthBiasSlopeFactor");
  decl->add_arg<float > (argspec_3);
  decl->set_return<void > ();
}

static void _call_f_vkCmdSetDepthBias_5706 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  float arg2 = gsi::arg_reader<float >() (args, heap);
  float arg3 = gsi::arg_reader<float >() (args, heap);
  float arg4 = gsi::arg_reader<float >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdSetDepthBias (arg1, arg2, arg3, arg4);
}


// void QVulkanDeviceFunctions::vkCmdSetDepthBounds(struct VkCommandBuffer_T *commandBuffer, float minDepthBounds, float maxDepthBounds)


static void _init_f_vkCmdSetDepthBounds_4844 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("minDepthBounds");
  decl->add_arg<float > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("maxDepthBounds");
  decl->add_arg<float > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkCmdSetDepthBounds_4844 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  float arg2 = gsi::arg_reader<float >() (args, heap);
  float arg3 = gsi::arg_reader<float >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdSetDepthBounds (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkCmdSetDeviceMask(struct VkCommandBuffer_T *commandBuffer, unsigned int deviceMask)


static void _init_f_vkCmdSetDeviceMask_4784 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("deviceMask");
  decl->add_arg<unsigned int > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_vkCmdSetDeviceMask_4784 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdSetDeviceMask (arg1, arg2);
}


// void QVulkanDeviceFunctions::vkCmdSetEvent(struct VkCommandBuffer_T *commandBuffer, struct VkEvent_T *event, unsigned int stageMask)


static void _init_f_vkCmdSetEvent_7005 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("event");
  decl->add_arg<struct VkEvent_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("stageMask");
  decl->add_arg<unsigned int > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkCmdSetEvent_7005 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkEvent_T *arg2 = gsi::arg_reader<struct VkEvent_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdSetEvent (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkCmdSetLineWidth(struct VkCommandBuffer_T *commandBuffer, float lineWidth)


static void _init_f_vkCmdSetLineWidth_3982 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("lineWidth");
  decl->add_arg<float > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_vkCmdSetLineWidth_3982 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  float arg2 = gsi::arg_reader<float >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdSetLineWidth (arg1, arg2);
}


// void QVulkanDeviceFunctions::vkCmdSetScissor(struct VkCommandBuffer_T *commandBuffer, unsigned int firstScissor, unsigned int scissorCount, const struct VkRect2D *pScissors)


static void _init_f_vkCmdSetScissor_9187 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("firstScissor");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("scissorCount");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pScissors");
  decl->add_arg<const struct VkRect2D * > (argspec_3);
  decl->set_return<void > ();
}

static void _call_f_vkCmdSetScissor_9187 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkRect2D *arg4 = gsi::arg_reader<const struct VkRect2D * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdSetScissor (arg1, arg2, arg3, arg4);
}


// void QVulkanDeviceFunctions::vkCmdSetStencilCompareMask(struct VkCommandBuffer_T *commandBuffer, unsigned int faceMask, unsigned int compareMask)


static void _init_f_vkCmdSetStencilCompareMask_6448 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("faceMask");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("compareMask");
  decl->add_arg<unsigned int > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkCmdSetStencilCompareMask_6448 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdSetStencilCompareMask (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkCmdSetStencilReference(struct VkCommandBuffer_T *commandBuffer, unsigned int faceMask, unsigned int reference)


static void _init_f_vkCmdSetStencilReference_6448 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("faceMask");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("reference");
  decl->add_arg<unsigned int > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkCmdSetStencilReference_6448 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdSetStencilReference (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkCmdSetStencilWriteMask(struct VkCommandBuffer_T *commandBuffer, unsigned int faceMask, unsigned int writeMask)


static void _init_f_vkCmdSetStencilWriteMask_6448 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("faceMask");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("writeMask");
  decl->add_arg<unsigned int > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkCmdSetStencilWriteMask_6448 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdSetStencilWriteMask (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkCmdSetViewport(struct VkCommandBuffer_T *commandBuffer, unsigned int firstViewport, unsigned int viewportCount, const struct VkViewport *pViewports)


static void _init_f_vkCmdSetViewport_9535 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("firstViewport");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("viewportCount");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pViewports");
  decl->add_arg<const struct VkViewport * > (argspec_3);
  decl->set_return<void > ();
}

static void _call_f_vkCmdSetViewport_9535 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkViewport *arg4 = gsi::arg_reader<const struct VkViewport * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdSetViewport (arg1, arg2, arg3, arg4);
}


// void QVulkanDeviceFunctions::vkCmdUpdateBuffer(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *dstBuffer, unsigned long int dstOffset, unsigned long int dataSize, const void *pData)


static void _init_f_vkCmdUpdateBuffer_11552 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("dstBuffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("dstOffset");
  decl->add_arg<unsigned long int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("dataSize");
  decl->add_arg<unsigned long int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("pData");
  decl->add_arg<const void * > (argspec_4);
  decl->set_return<void > ();
}

static void _call_f_vkCmdUpdateBuffer_11552 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  struct VkBuffer_T *arg2 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  unsigned long int arg3 = gsi::arg_reader<unsigned long int >() (args, heap);
  unsigned long int arg4 = gsi::arg_reader<unsigned long int >() (args, heap);
  const void *arg5 = gsi::arg_reader<const void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdUpdateBuffer (arg1, arg2, arg3, arg4, arg5);
}


// void QVulkanDeviceFunctions::vkCmdWaitEvents(struct VkCommandBuffer_T *commandBuffer, unsigned int eventCount, const struct VkEvent_T **pEvents, unsigned int srcStageMask, unsigned int dstStageMask, unsigned int memoryBarrierCount, const struct VkMemoryBarrier *pMemoryBarriers, unsigned int bufferMemoryBarrierCount, const struct VkBufferMemoryBarrier *pBufferMemoryBarriers, unsigned int imageMemoryBarrierCount, const struct VkImageMemoryBarrier *pImageMemoryBarriers)


static void _init_f_vkCmdWaitEvents_27848 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("eventCount");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pEvents");
  decl->add_arg<const struct VkEvent_T ** > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("srcStageMask");
  decl->add_arg<unsigned int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("dstStageMask");
  decl->add_arg<unsigned int > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("memoryBarrierCount");
  decl->add_arg<unsigned int > (argspec_5);
  static gsi::ArgSpecBase argspec_6 ("pMemoryBarriers");
  decl->add_arg<const struct VkMemoryBarrier * > (argspec_6);
  static gsi::ArgSpecBase argspec_7 ("bufferMemoryBarrierCount");
  decl->add_arg<unsigned int > (argspec_7);
  static gsi::ArgSpecBase argspec_8 ("pBufferMemoryBarriers");
  decl->add_arg<const struct VkBufferMemoryBarrier * > (argspec_8);
  static gsi::ArgSpecBase argspec_9 ("imageMemoryBarrierCount");
  decl->add_arg<unsigned int > (argspec_9);
  static gsi::ArgSpecBase argspec_10 ("pImageMemoryBarriers");
  decl->add_arg<const struct VkImageMemoryBarrier * > (argspec_10);
  decl->set_return<void > ();
}

static void _call_f_vkCmdWaitEvents_27848 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkEvent_T **arg3 = gsi::arg_reader<const struct VkEvent_T ** >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg5 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg6 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkMemoryBarrier *arg7 = gsi::arg_reader<const struct VkMemoryBarrier * >() (args, heap);
  unsigned int arg8 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkBufferMemoryBarrier *arg9 = gsi::arg_reader<const struct VkBufferMemoryBarrier * >() (args, heap);
  unsigned int arg10 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkImageMemoryBarrier *arg11 = gsi::arg_reader<const struct VkImageMemoryBarrier * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdWaitEvents (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
}


// void QVulkanDeviceFunctions::vkCmdWriteTimestamp(struct VkCommandBuffer_T *commandBuffer, enum VkPipelineStageFlagBits pipelineStage, struct VkQueryPool_T *queryPool, unsigned int query)


static void _init_f_vkCmdWriteTimestamp_10639 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pipelineStage");
  decl->add_arg<enum VkPipelineStageFlagBits > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("queryPool");
  decl->add_arg<struct VkQueryPool_T * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("query");
  decl->add_arg<unsigned int > (argspec_3);
  decl->set_return<void > ();
}

static void _call_f_vkCmdWriteTimestamp_10639 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  enum VkPipelineStageFlagBits arg2 = gsi::arg_reader<enum VkPipelineStageFlagBits >() (args, heap);
  struct VkQueryPool_T *arg3 = gsi::arg_reader<struct VkQueryPool_T * >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkCmdWriteTimestamp (arg1, arg2, arg3, arg4);
}


// enum VkResult QVulkanDeviceFunctions::vkCreateBuffer(struct VkDevice_T *device, const struct VkBufferCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkBuffer_T **pBuffer)


static void _init_f_vkCreateBuffer_12724 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkBufferCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pBuffer");
  decl->add_arg<struct VkBuffer_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateBuffer_12724 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkBufferCreateInfo *arg2 = gsi::arg_reader<const struct VkBufferCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkBuffer_T **arg4 = gsi::arg_reader<struct VkBuffer_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateBuffer (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateBufferView(struct VkDevice_T *device, const struct VkBufferViewCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkBufferView_T **pView)


static void _init_f_vkCreateBufferView_13546 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkBufferViewCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pView");
  decl->add_arg<struct VkBufferView_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateBufferView_13546 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkBufferViewCreateInfo *arg2 = gsi::arg_reader<const struct VkBufferViewCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkBufferView_T **arg4 = gsi::arg_reader<struct VkBufferView_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateBufferView (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateCommandPool(struct VkDevice_T *device, const struct VkCommandPoolCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkCommandPool_T **pCommandPool)


static void _init_f_vkCreateCommandPool_13746 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkCommandPoolCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pCommandPool");
  decl->add_arg<struct VkCommandPool_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateCommandPool_13746 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkCommandPoolCreateInfo *arg2 = gsi::arg_reader<const struct VkCommandPoolCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkCommandPool_T **arg4 = gsi::arg_reader<struct VkCommandPool_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateCommandPool (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateComputePipelines(struct VkDevice_T *device, struct VkPipelineCache_T *pipelineCache, unsigned int createInfoCount, const struct VkComputePipelineCreateInfo *pCreateInfos, const struct VkAllocationCallbacks *pAllocator, struct VkPipeline_T **pPipelines)


static void _init_f_vkCreateComputePipelines_18558 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pipelineCache");
  decl->add_arg<struct VkPipelineCache_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("createInfoCount");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pCreateInfos");
  decl->add_arg<const struct VkComputePipelineCreateInfo * > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("pPipelines");
  decl->add_arg<struct VkPipeline_T ** > (argspec_5);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateComputePipelines_18558 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkPipelineCache_T *arg2 = gsi::arg_reader<struct VkPipelineCache_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkComputePipelineCreateInfo *arg4 = gsi::arg_reader<const struct VkComputePipelineCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg5 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkPipeline_T **arg6 = gsi::arg_reader<struct VkPipeline_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateComputePipelines (arg1, arg2, arg3, arg4, arg5, arg6));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateDescriptorPool(struct VkDevice_T *device, const struct VkDescriptorPoolCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkDescriptorPool_T **pDescriptorPool)


static void _init_f_vkCreateDescriptorPool_14450 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkDescriptorPoolCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pDescriptorPool");
  decl->add_arg<struct VkDescriptorPool_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateDescriptorPool_14450 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkDescriptorPoolCreateInfo *arg2 = gsi::arg_reader<const struct VkDescriptorPoolCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkDescriptorPool_T **arg4 = gsi::arg_reader<struct VkDescriptorPool_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateDescriptorPool (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateDescriptorSetLayout(struct VkDevice_T *device, const struct VkDescriptorSetLayoutCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkDescriptorSetLayout_T **pSetLayout)


static void _init_f_vkCreateDescriptorSetLayout_15506 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkDescriptorSetLayoutCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pSetLayout");
  decl->add_arg<struct VkDescriptorSetLayout_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateDescriptorSetLayout_15506 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkDescriptorSetLayoutCreateInfo *arg2 = gsi::arg_reader<const struct VkDescriptorSetLayoutCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkDescriptorSetLayout_T **arg4 = gsi::arg_reader<struct VkDescriptorSetLayout_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateDescriptorSetLayout (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateDescriptorUpdateTemplate(struct VkDevice_T *device, const struct VkDescriptorUpdateTemplateCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkDescriptorUpdateTemplate_T **pDescriptorUpdateTemplate)


static void _init_f_vkCreateDescriptorUpdateTemplate_16508 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkDescriptorUpdateTemplateCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pDescriptorUpdateTemplate");
  decl->add_arg<struct VkDescriptorUpdateTemplate_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateDescriptorUpdateTemplate_16508 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkDescriptorUpdateTemplateCreateInfo *arg2 = gsi::arg_reader<const struct VkDescriptorUpdateTemplateCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkDescriptorUpdateTemplate_T **arg4 = gsi::arg_reader<struct VkDescriptorUpdateTemplate_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateDescriptorUpdateTemplate (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateEvent(struct VkDevice_T *device, const struct VkEventCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkEvent_T **pEvent)


static void _init_f_vkCreateEvent_12548 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkEventCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pEvent");
  decl->add_arg<struct VkEvent_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateEvent_12548 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkEventCreateInfo *arg2 = gsi::arg_reader<const struct VkEventCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkEvent_T **arg4 = gsi::arg_reader<struct VkEvent_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateEvent (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateFence(struct VkDevice_T *device, const struct VkFenceCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkFence_T **pFence)


static void _init_f_vkCreateFence_12482 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkFenceCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pFence");
  decl->add_arg<struct VkFence_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateFence_12482 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkFenceCreateInfo *arg2 = gsi::arg_reader<const struct VkFenceCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkFence_T **arg4 = gsi::arg_reader<struct VkFence_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateFence (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateFramebuffer(struct VkDevice_T *device, const struct VkFramebufferCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkFramebuffer_T **pFramebuffer)


static void _init_f_vkCreateFramebuffer_13770 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkFramebufferCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pFramebuffer");
  decl->add_arg<struct VkFramebuffer_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateFramebuffer_13770 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkFramebufferCreateInfo *arg2 = gsi::arg_reader<const struct VkFramebufferCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkFramebuffer_T **arg4 = gsi::arg_reader<struct VkFramebuffer_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateFramebuffer (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateGraphicsPipelines(struct VkDevice_T *device, struct VkPipelineCache_T *pipelineCache, unsigned int createInfoCount, const struct VkGraphicsPipelineCreateInfo *pCreateInfos, const struct VkAllocationCallbacks *pAllocator, struct VkPipeline_T **pPipelines)


static void _init_f_vkCreateGraphicsPipelines_18642 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pipelineCache");
  decl->add_arg<struct VkPipelineCache_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("createInfoCount");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pCreateInfos");
  decl->add_arg<const struct VkGraphicsPipelineCreateInfo * > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("pPipelines");
  decl->add_arg<struct VkPipeline_T ** > (argspec_5);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateGraphicsPipelines_18642 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkPipelineCache_T *arg2 = gsi::arg_reader<struct VkPipelineCache_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkGraphicsPipelineCreateInfo *arg4 = gsi::arg_reader<const struct VkGraphicsPipelineCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg5 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkPipeline_T **arg6 = gsi::arg_reader<struct VkPipeline_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateGraphicsPipelines (arg1, arg2, arg3, arg4, arg5, arg6));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateImage(struct VkDevice_T *device, const struct VkImageCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkImage_T **pImage)


static void _init_f_vkCreateImage_12486 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkImageCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pImage");
  decl->add_arg<struct VkImage_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateImage_12486 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkImageCreateInfo *arg2 = gsi::arg_reader<const struct VkImageCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkImage_T **arg4 = gsi::arg_reader<struct VkImage_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateImage (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateImageView(struct VkDevice_T *device, const struct VkImageViewCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkImageView_T **pView)


static void _init_f_vkCreateImageView_13308 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkImageViewCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pView");
  decl->add_arg<struct VkImageView_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateImageView_13308 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkImageViewCreateInfo *arg2 = gsi::arg_reader<const struct VkImageViewCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkImageView_T **arg4 = gsi::arg_reader<struct VkImageView_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateImageView (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreatePipelineCache(struct VkDevice_T *device, const struct VkPipelineCacheCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkPipelineCache_T **pPipelineCache)


static void _init_f_vkCreatePipelineCache_14100 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkPipelineCacheCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pPipelineCache");
  decl->add_arg<struct VkPipelineCache_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreatePipelineCache_14100 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkPipelineCacheCreateInfo *arg2 = gsi::arg_reader<const struct VkPipelineCacheCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkPipelineCache_T **arg4 = gsi::arg_reader<struct VkPipelineCache_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreatePipelineCache (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreatePipelineLayout(struct VkDevice_T *device, const struct VkPipelineLayoutCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkPipelineLayout_T **pPipelineLayout)


static void _init_f_vkCreatePipelineLayout_14440 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkPipelineLayoutCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pPipelineLayout");
  decl->add_arg<struct VkPipelineLayout_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreatePipelineLayout_14440 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkPipelineLayoutCreateInfo *arg2 = gsi::arg_reader<const struct VkPipelineLayoutCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkPipelineLayout_T **arg4 = gsi::arg_reader<struct VkPipelineLayout_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreatePipelineLayout (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateQueryPool(struct VkDevice_T *device, const struct VkQueryPoolCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkQueryPool_T **pQueryPool)


static void _init_f_vkCreateQueryPool_13408 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkQueryPoolCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pQueryPool");
  decl->add_arg<struct VkQueryPool_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateQueryPool_13408 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkQueryPoolCreateInfo *arg2 = gsi::arg_reader<const struct VkQueryPoolCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkQueryPool_T **arg4 = gsi::arg_reader<struct VkQueryPool_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateQueryPool (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateRenderPass(struct VkDevice_T *device, const struct VkRenderPassCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkRenderPass_T **pRenderPass)


static void _init_f_vkCreateRenderPass_13550 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkRenderPassCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pRenderPass");
  decl->add_arg<struct VkRenderPass_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateRenderPass_13550 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkRenderPassCreateInfo *arg2 = gsi::arg_reader<const struct VkRenderPassCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkRenderPass_T **arg4 = gsi::arg_reader<struct VkRenderPass_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateRenderPass (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateRenderPass2(struct VkDevice_T *device, const struct VkRenderPassCreateInfo2 *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkRenderPass_T **pRenderPass)


static void _init_f_vkCreateRenderPass2_13600 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkRenderPassCreateInfo2 * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pRenderPass");
  decl->add_arg<struct VkRenderPass_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateRenderPass2_13600 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkRenderPassCreateInfo2 *arg2 = gsi::arg_reader<const struct VkRenderPassCreateInfo2 * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkRenderPass_T **arg4 = gsi::arg_reader<struct VkRenderPass_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateRenderPass2 (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateSampler(struct VkDevice_T *device, const struct VkSamplerCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkSampler_T **pSampler)


static void _init_f_vkCreateSampler_12968 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkSamplerCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pSampler");
  decl->add_arg<struct VkSampler_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateSampler_12968 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkSamplerCreateInfo *arg2 = gsi::arg_reader<const struct VkSamplerCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkSampler_T **arg4 = gsi::arg_reader<struct VkSampler_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateSampler (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateSamplerYcbcrConversion(struct VkDevice_T *device, const struct VkSamplerYcbcrConversionCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkSamplerYcbcrConversion_T **pYcbcrConversion)


static void _init_f_vkCreateSamplerYcbcrConversion_16090 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkSamplerYcbcrConversionCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pYcbcrConversion");
  decl->add_arg<struct VkSamplerYcbcrConversion_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateSamplerYcbcrConversion_16090 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkSamplerYcbcrConversionCreateInfo *arg2 = gsi::arg_reader<const struct VkSamplerYcbcrConversionCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkSamplerYcbcrConversion_T **arg4 = gsi::arg_reader<struct VkSamplerYcbcrConversion_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateSamplerYcbcrConversion (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateSemaphore(struct VkDevice_T *device, const struct VkSemaphoreCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkSemaphore_T **pSemaphore)


static void _init_f_vkCreateSemaphore_13384 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkSemaphoreCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pSemaphore");
  decl->add_arg<struct VkSemaphore_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateSemaphore_13384 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkSemaphoreCreateInfo *arg2 = gsi::arg_reader<const struct VkSemaphoreCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkSemaphore_T **arg4 = gsi::arg_reader<struct VkSemaphore_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateSemaphore (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkCreateShaderModule(struct VkDevice_T *device, const struct VkShaderModuleCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkShaderModule_T **pShaderModule)


static void _init_f_vkCreateShaderModule_13946 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkShaderModuleCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pShaderModule");
  decl->add_arg<struct VkShaderModule_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkCreateShaderModule_13946 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkShaderModuleCreateInfo *arg2 = gsi::arg_reader<const struct VkShaderModuleCreateInfo * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  struct VkShaderModule_T **arg4 = gsi::arg_reader<struct VkShaderModule_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkCreateShaderModule (arg1, arg2, arg3, arg4));
}


// void QVulkanDeviceFunctions::vkDestroyBuffer(struct VkDevice_T *device, struct VkBuffer_T *buffer, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyBuffer_8865 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("buffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyBuffer_8865 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkBuffer_T *arg2 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyBuffer (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroyBufferView(struct VkDevice_T *device, struct VkBufferView_T *bufferView, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyBufferView_9276 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("bufferView");
  decl->add_arg<struct VkBufferView_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyBufferView_9276 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkBufferView_T *arg2 = gsi::arg_reader<struct VkBufferView_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyBufferView (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroyCommandPool(struct VkDevice_T *device, struct VkCommandPool_T *commandPool, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyCommandPool_9376 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("commandPool");
  decl->add_arg<struct VkCommandPool_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyCommandPool_9376 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkCommandPool_T *arg2 = gsi::arg_reader<struct VkCommandPool_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyCommandPool (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroyDescriptorPool(struct VkDevice_T *device, struct VkDescriptorPool_T *descriptorPool, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyDescriptorPool_9728 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("descriptorPool");
  decl->add_arg<struct VkDescriptorPool_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyDescriptorPool_9728 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkDescriptorPool_T *arg2 = gsi::arg_reader<struct VkDescriptorPool_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyDescriptorPool (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroyDescriptorSetLayout(struct VkDevice_T *device, struct VkDescriptorSetLayout_T *descriptorSetLayout, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyDescriptorSetLayout_10256 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("descriptorSetLayout");
  decl->add_arg<struct VkDescriptorSetLayout_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyDescriptorSetLayout_10256 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkDescriptorSetLayout_T *arg2 = gsi::arg_reader<struct VkDescriptorSetLayout_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyDescriptorSetLayout (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroyDescriptorUpdateTemplate(struct VkDevice_T *device, struct VkDescriptorUpdateTemplate_T *descriptorUpdateTemplate, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyDescriptorUpdateTemplate_10757 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("descriptorUpdateTemplate");
  decl->add_arg<struct VkDescriptorUpdateTemplate_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyDescriptorUpdateTemplate_10757 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkDescriptorUpdateTemplate_T *arg2 = gsi::arg_reader<struct VkDescriptorUpdateTemplate_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyDescriptorUpdateTemplate (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroyDevice(struct VkDevice_T *device, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyDevice_6556 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyDevice_6556 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg2 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyDevice (arg1, arg2);
}


// void QVulkanDeviceFunctions::vkDestroyEvent(struct VkDevice_T *device, struct VkEvent_T *event, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyEvent_8777 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("event");
  decl->add_arg<struct VkEvent_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyEvent_8777 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkEvent_T *arg2 = gsi::arg_reader<struct VkEvent_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyEvent (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroyFence(struct VkDevice_T *device, struct VkFence_T *fence, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyFence_8744 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("fence");
  decl->add_arg<struct VkFence_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyFence_8744 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkFence_T *arg2 = gsi::arg_reader<struct VkFence_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyFence (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroyFramebuffer(struct VkDevice_T *device, struct VkFramebuffer_T *framebuffer, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyFramebuffer_9388 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("framebuffer");
  decl->add_arg<struct VkFramebuffer_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyFramebuffer_9388 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkFramebuffer_T *arg2 = gsi::arg_reader<struct VkFramebuffer_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyFramebuffer (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroyImage(struct VkDevice_T *device, struct VkImage_T *image, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyImage_8746 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("image");
  decl->add_arg<struct VkImage_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyImage_8746 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkImage_T *arg2 = gsi::arg_reader<struct VkImage_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyImage (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroyImageView(struct VkDevice_T *device, struct VkImageView_T *imageView, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyImageView_9157 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("imageView");
  decl->add_arg<struct VkImageView_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyImageView_9157 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkImageView_T *arg2 = gsi::arg_reader<struct VkImageView_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyImageView (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroyPipeline(struct VkDevice_T *device, struct VkPipeline_T *pipeline, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyPipeline_9085 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pipeline");
  decl->add_arg<struct VkPipeline_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyPipeline_9085 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkPipeline_T *arg2 = gsi::arg_reader<struct VkPipeline_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyPipeline (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroyPipelineCache(struct VkDevice_T *device, struct VkPipelineCache_T *pipelineCache, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyPipelineCache_9553 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pipelineCache");
  decl->add_arg<struct VkPipelineCache_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyPipelineCache_9553 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkPipelineCache_T *arg2 = gsi::arg_reader<struct VkPipelineCache_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyPipelineCache (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroyPipelineLayout(struct VkDevice_T *device, struct VkPipelineLayout_T *pipelineLayout, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyPipelineLayout_9723 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pipelineLayout");
  decl->add_arg<struct VkPipelineLayout_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyPipelineLayout_9723 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkPipelineLayout_T *arg2 = gsi::arg_reader<struct VkPipelineLayout_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyPipelineLayout (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroyQueryPool(struct VkDevice_T *device, struct VkQueryPool_T *queryPool, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyQueryPool_9207 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("queryPool");
  decl->add_arg<struct VkQueryPool_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyQueryPool_9207 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkQueryPool_T *arg2 = gsi::arg_reader<struct VkQueryPool_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyQueryPool (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroyRenderPass(struct VkDevice_T *device, struct VkRenderPass_T *renderPass, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyRenderPass_9278 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("renderPass");
  decl->add_arg<struct VkRenderPass_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyRenderPass_9278 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkRenderPass_T *arg2 = gsi::arg_reader<struct VkRenderPass_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyRenderPass (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroySampler(struct VkDevice_T *device, struct VkSampler_T *sampler, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroySampler_8987 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("sampler");
  decl->add_arg<struct VkSampler_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroySampler_8987 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkSampler_T *arg2 = gsi::arg_reader<struct VkSampler_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroySampler (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroySamplerYcbcrConversion(struct VkDevice_T *device, struct VkSamplerYcbcrConversion_T *ycbcrConversion, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroySamplerYcbcrConversion_10548 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("ycbcrConversion");
  decl->add_arg<struct VkSamplerYcbcrConversion_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroySamplerYcbcrConversion_10548 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkSamplerYcbcrConversion_T *arg2 = gsi::arg_reader<struct VkSamplerYcbcrConversion_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroySamplerYcbcrConversion (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroySemaphore(struct VkDevice_T *device, struct VkSemaphore_T *semaphore, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroySemaphore_9195 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("semaphore");
  decl->add_arg<struct VkSemaphore_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroySemaphore_9195 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkSemaphore_T *arg2 = gsi::arg_reader<struct VkSemaphore_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroySemaphore (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkDestroyShaderModule(struct VkDevice_T *device, struct VkShaderModule_T *shaderModule, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkDestroyShaderModule_9476 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("shaderModule");
  decl->add_arg<struct VkShaderModule_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkDestroyShaderModule_9476 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkShaderModule_T *arg2 = gsi::arg_reader<struct VkShaderModule_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkDestroyShaderModule (arg1, arg2, arg3);
}


// enum VkResult QVulkanDeviceFunctions::vkDeviceWaitIdle(struct VkDevice_T *device)


static void _init_f_vkDeviceWaitIdle_2407 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkDeviceWaitIdle_2407 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkDeviceWaitIdle (arg1));
}


// enum VkResult QVulkanDeviceFunctions::vkEndCommandBuffer(struct VkCommandBuffer_T *commandBuffer)


static void _init_f_vkEndCommandBuffer_3120 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkEndCommandBuffer_3120 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkEndCommandBuffer (arg1));
}


// enum VkResult QVulkanDeviceFunctions::vkFlushMappedMemoryRanges(struct VkDevice_T *device, unsigned int memoryRangeCount, const struct VkMappedMemoryRange *pMemoryRanges)


static void _init_f_vkFlushMappedMemoryRanges_8019 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("memoryRangeCount");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pMemoryRanges");
  decl->add_arg<const struct VkMappedMemoryRange * > (argspec_2);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkFlushMappedMemoryRanges_8019 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkMappedMemoryRange *arg3 = gsi::arg_reader<const struct VkMappedMemoryRange * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkFlushMappedMemoryRanges (arg1, arg2, arg3));
}


// void QVulkanDeviceFunctions::vkFreeCommandBuffers(struct VkDevice_T *device, struct VkCommandPool_T *commandPool, unsigned int commandBufferCount, const struct VkCommandBuffer_T **pCommandBuffers)


static void _init_f_vkFreeCommandBuffers_10640 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("commandPool");
  decl->add_arg<struct VkCommandPool_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("commandBufferCount");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pCommandBuffers");
  decl->add_arg<const struct VkCommandBuffer_T ** > (argspec_3);
  decl->set_return<void > ();
}

static void _call_f_vkFreeCommandBuffers_10640 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkCommandPool_T *arg2 = gsi::arg_reader<struct VkCommandPool_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkCommandBuffer_T **arg4 = gsi::arg_reader<const struct VkCommandBuffer_T ** >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkFreeCommandBuffers (arg1, arg2, arg3, arg4);
}


// enum VkResult QVulkanDeviceFunctions::vkFreeDescriptorSets(struct VkDevice_T *device, struct VkDescriptorPool_T *descriptorPool, unsigned int descriptorSetCount, const struct VkDescriptorSet_T **pDescriptorSets)


static void _init_f_vkFreeDescriptorSets_11042 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("descriptorPool");
  decl->add_arg<struct VkDescriptorPool_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("descriptorSetCount");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pDescriptorSets");
  decl->add_arg<const struct VkDescriptorSet_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkFreeDescriptorSets_11042 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkDescriptorPool_T *arg2 = gsi::arg_reader<struct VkDescriptorPool_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkDescriptorSet_T **arg4 = gsi::arg_reader<const struct VkDescriptorSet_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkFreeDescriptorSets (arg1, arg2, arg3, arg4));
}


// void QVulkanDeviceFunctions::vkFreeMemory(struct VkDevice_T *device, struct VkDeviceMemory_T *memory, const struct VkAllocationCallbacks *pAllocator)


static void _init_f_vkFreeMemory_9488 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("memory");
  decl->add_arg<struct VkDeviceMemory_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pAllocator");
  decl->add_arg<const struct VkAllocationCallbacks * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkFreeMemory_9488 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkDeviceMemory_T *arg2 = gsi::arg_reader<struct VkDeviceMemory_T * >() (args, heap);
  const struct VkAllocationCallbacks *arg3 = gsi::arg_reader<const struct VkAllocationCallbacks * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkFreeMemory (arg1, arg2, arg3);
}


// unsigned long int QVulkanDeviceFunctions::vkGetBufferDeviceAddress(struct VkDevice_T *device, const struct VkBufferDeviceAddressInfo *pInfo)


static void _init_f_vkGetBufferDeviceAddress_6930 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pInfo");
  decl->add_arg<const struct VkBufferDeviceAddressInfo * > (argspec_1);
  decl->set_return<unsigned long int > ();
}

static void _call_f_vkGetBufferDeviceAddress_6930 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkBufferDeviceAddressInfo *arg2 = gsi::arg_reader<const struct VkBufferDeviceAddressInfo * >() (args, heap);
  ret.write<unsigned long int > ((unsigned long int)((QVulkanDeviceFunctions *)cls)->vkGetBufferDeviceAddress (arg1, arg2));
}


// void QVulkanDeviceFunctions::vkGetBufferMemoryRequirements(struct VkDevice_T *device, struct VkBuffer_T *buffer, struct VkMemoryRequirements *pMemoryRequirements)


static void _init_f_vkGetBufferMemoryRequirements_8161 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("buffer");
  decl->add_arg<struct VkBuffer_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pMemoryRequirements");
  decl->add_arg<struct VkMemoryRequirements * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkGetBufferMemoryRequirements_8161 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkBuffer_T *arg2 = gsi::arg_reader<struct VkBuffer_T * >() (args, heap);
  struct VkMemoryRequirements *arg3 = gsi::arg_reader<struct VkMemoryRequirements * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkGetBufferMemoryRequirements (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkGetBufferMemoryRequirements2(struct VkDevice_T *device, const struct VkBufferMemoryRequirementsInfo2 *pInfo, struct VkMemoryRequirements2 *pMemoryRequirements)


static void _init_f_vkGetBufferMemoryRequirements2_11090 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pInfo");
  decl->add_arg<const struct VkBufferMemoryRequirementsInfo2 * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pMemoryRequirements");
  decl->add_arg<struct VkMemoryRequirements2 * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkGetBufferMemoryRequirements2_11090 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkBufferMemoryRequirementsInfo2 *arg2 = gsi::arg_reader<const struct VkBufferMemoryRequirementsInfo2 * >() (args, heap);
  struct VkMemoryRequirements2 *arg3 = gsi::arg_reader<struct VkMemoryRequirements2 * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkGetBufferMemoryRequirements2 (arg1, arg2, arg3);
}


// unsigned long int QVulkanDeviceFunctions::vkGetBufferOpaqueCaptureAddress(struct VkDevice_T *device, const struct VkBufferDeviceAddressInfo *pInfo)


static void _init_f_vkGetBufferOpaqueCaptureAddress_6930 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pInfo");
  decl->add_arg<const struct VkBufferDeviceAddressInfo * > (argspec_1);
  decl->set_return<unsigned long int > ();
}

static void _call_f_vkGetBufferOpaqueCaptureAddress_6930 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkBufferDeviceAddressInfo *arg2 = gsi::arg_reader<const struct VkBufferDeviceAddressInfo * >() (args, heap);
  ret.write<unsigned long int > ((unsigned long int)((QVulkanDeviceFunctions *)cls)->vkGetBufferOpaqueCaptureAddress (arg1, arg2));
}


// void QVulkanDeviceFunctions::vkGetDescriptorSetLayoutSupport(struct VkDevice_T *device, const struct VkDescriptorSetLayoutCreateInfo *pCreateInfo, struct VkDescriptorSetLayoutSupport *pSupport)


static void _init_f_vkGetDescriptorSetLayoutSupport_11901 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pCreateInfo");
  decl->add_arg<const struct VkDescriptorSetLayoutCreateInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pSupport");
  decl->add_arg<struct VkDescriptorSetLayoutSupport * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkGetDescriptorSetLayoutSupport_11901 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkDescriptorSetLayoutCreateInfo *arg2 = gsi::arg_reader<const struct VkDescriptorSetLayoutCreateInfo * >() (args, heap);
  struct VkDescriptorSetLayoutSupport *arg3 = gsi::arg_reader<struct VkDescriptorSetLayoutSupport * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkGetDescriptorSetLayoutSupport (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkGetDeviceGroupPeerMemoryFeatures(struct VkDevice_T *device, unsigned int heapIndex, unsigned int localDeviceIndex, unsigned int remoteDeviceIndex, unsigned int *pPeerMemoryFeatures)


static void _init_f_vkGetDeviceGroupPeerMemoryFeatures_9249 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("heapIndex");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("localDeviceIndex");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("remoteDeviceIndex");
  decl->add_arg<unsigned int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("pPeerMemoryFeatures");
  decl->add_arg<unsigned int * > (argspec_4);
  decl->set_return<void > ();
}

static void _call_f_vkGetDeviceGroupPeerMemoryFeatures_9249 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int *arg5 = gsi::arg_reader<unsigned int * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkGetDeviceGroupPeerMemoryFeatures (arg1, arg2, arg3, arg4, arg5);
}


// void QVulkanDeviceFunctions::vkGetDeviceMemoryCommitment(struct VkDevice_T *device, struct VkDeviceMemory_T *memory, unsigned long int *pCommittedMemoryInBytes)


static void _init_f_vkGetDeviceMemoryCommitment_7765 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("memory");
  decl->add_arg<struct VkDeviceMemory_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pCommittedMemoryInBytes");
  decl->add_arg<unsigned long int * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkGetDeviceMemoryCommitment_7765 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkDeviceMemory_T *arg2 = gsi::arg_reader<struct VkDeviceMemory_T * >() (args, heap);
  unsigned long int *arg3 = gsi::arg_reader<unsigned long int * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkGetDeviceMemoryCommitment (arg1, arg2, arg3);
}


// unsigned long int QVulkanDeviceFunctions::vkGetDeviceMemoryOpaqueCaptureAddress(struct VkDevice_T *device, const struct VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo)


static void _init_f_vkGetDeviceMemoryOpaqueCaptureAddress_8304 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pInfo");
  decl->add_arg<const struct VkDeviceMemoryOpaqueCaptureAddressInfo * > (argspec_1);
  decl->set_return<unsigned long int > ();
}

static void _call_f_vkGetDeviceMemoryOpaqueCaptureAddress_8304 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkDeviceMemoryOpaqueCaptureAddressInfo *arg2 = gsi::arg_reader<const struct VkDeviceMemoryOpaqueCaptureAddressInfo * >() (args, heap);
  ret.write<unsigned long int > ((unsigned long int)((QVulkanDeviceFunctions *)cls)->vkGetDeviceMemoryOpaqueCaptureAddress (arg1, arg2));
}


// void QVulkanDeviceFunctions::vkGetDeviceQueue(struct VkDevice_T *device, unsigned int queueFamilyIndex, unsigned int queueIndex, struct VkQueue_T **pQueue)


static void _init_f_vkGetDeviceQueue_8001 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("queueFamilyIndex");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("queueIndex");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pQueue");
  decl->add_arg<struct VkQueue_T ** > (argspec_3);
  decl->set_return<void > ();
}

static void _call_f_vkGetDeviceQueue_8001 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  struct VkQueue_T **arg4 = gsi::arg_reader<struct VkQueue_T ** >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkGetDeviceQueue (arg1, arg2, arg3, arg4);
}


// void QVulkanDeviceFunctions::vkGetDeviceQueue2(struct VkDevice_T *device, const struct VkDeviceQueueInfo2 *pQueueInfo, struct VkQueue_T **pQueue)


static void _init_f_vkGetDeviceQueue2_8451 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pQueueInfo");
  decl->add_arg<const struct VkDeviceQueueInfo2 * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pQueue");
  decl->add_arg<struct VkQueue_T ** > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkGetDeviceQueue2_8451 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkDeviceQueueInfo2 *arg2 = gsi::arg_reader<const struct VkDeviceQueueInfo2 * >() (args, heap);
  struct VkQueue_T **arg3 = gsi::arg_reader<struct VkQueue_T ** >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkGetDeviceQueue2 (arg1, arg2, arg3);
}


// enum VkResult QVulkanDeviceFunctions::vkGetEventStatus(struct VkDevice_T *device, struct VkEvent_T *event)


static void _init_f_vkGetEventStatus_4628 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("event");
  decl->add_arg<struct VkEvent_T * > (argspec_1);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkGetEventStatus_4628 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkEvent_T *arg2 = gsi::arg_reader<struct VkEvent_T * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkGetEventStatus (arg1, arg2));
}


// enum VkResult QVulkanDeviceFunctions::vkGetFenceStatus(struct VkDevice_T *device, struct VkFence_T *fence)


static void _init_f_vkGetFenceStatus_4595 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("fence");
  decl->add_arg<struct VkFence_T * > (argspec_1);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkGetFenceStatus_4595 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkFence_T *arg2 = gsi::arg_reader<struct VkFence_T * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkGetFenceStatus (arg1, arg2));
}


// void QVulkanDeviceFunctions::vkGetImageMemoryRequirements(struct VkDevice_T *device, struct VkImage_T *image, struct VkMemoryRequirements *pMemoryRequirements)


static void _init_f_vkGetImageMemoryRequirements_8042 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("image");
  decl->add_arg<struct VkImage_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pMemoryRequirements");
  decl->add_arg<struct VkMemoryRequirements * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkGetImageMemoryRequirements_8042 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkImage_T *arg2 = gsi::arg_reader<struct VkImage_T * >() (args, heap);
  struct VkMemoryRequirements *arg3 = gsi::arg_reader<struct VkMemoryRequirements * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkGetImageMemoryRequirements (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkGetImageMemoryRequirements2(struct VkDevice_T *device, const struct VkImageMemoryRequirementsInfo2 *pInfo, struct VkMemoryRequirements2 *pMemoryRequirements)


static void _init_f_vkGetImageMemoryRequirements2_10971 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pInfo");
  decl->add_arg<const struct VkImageMemoryRequirementsInfo2 * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pMemoryRequirements");
  decl->add_arg<struct VkMemoryRequirements2 * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkGetImageMemoryRequirements2_10971 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkImageMemoryRequirementsInfo2 *arg2 = gsi::arg_reader<const struct VkImageMemoryRequirementsInfo2 * >() (args, heap);
  struct VkMemoryRequirements2 *arg3 = gsi::arg_reader<struct VkMemoryRequirements2 * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkGetImageMemoryRequirements2 (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkGetImageSparseMemoryRequirements(struct VkDevice_T *device, struct VkImage_T *image, unsigned int *pSparseMemoryRequirementCount, struct VkSparseImageMemoryRequirements *pSparseMemoryRequirements)


static void _init_f_vkGetImageSparseMemoryRequirements_10997 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("image");
  decl->add_arg<struct VkImage_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pSparseMemoryRequirementCount");
  decl->add_arg<unsigned int * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pSparseMemoryRequirements");
  decl->add_arg<struct VkSparseImageMemoryRequirements * > (argspec_3);
  decl->set_return<void > ();
}

static void _call_f_vkGetImageSparseMemoryRequirements_10997 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkImage_T *arg2 = gsi::arg_reader<struct VkImage_T * >() (args, heap);
  unsigned int *arg3 = gsi::arg_reader<unsigned int * >() (args, heap);
  struct VkSparseImageMemoryRequirements *arg4 = gsi::arg_reader<struct VkSparseImageMemoryRequirements * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkGetImageSparseMemoryRequirements (arg1, arg2, arg3, arg4);
}


// void QVulkanDeviceFunctions::vkGetImageSparseMemoryRequirements2(struct VkDevice_T *device, const struct VkImageSparseMemoryRequirementsInfo2 *pInfo, unsigned int *pSparseMemoryRequirementCount, struct VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements)


static void _init_f_vkGetImageSparseMemoryRequirements2_14548 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pInfo");
  decl->add_arg<const struct VkImageSparseMemoryRequirementsInfo2 * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pSparseMemoryRequirementCount");
  decl->add_arg<unsigned int * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pSparseMemoryRequirements");
  decl->add_arg<struct VkSparseImageMemoryRequirements2 * > (argspec_3);
  decl->set_return<void > ();
}

static void _call_f_vkGetImageSparseMemoryRequirements2_14548 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkImageSparseMemoryRequirementsInfo2 *arg2 = gsi::arg_reader<const struct VkImageSparseMemoryRequirementsInfo2 * >() (args, heap);
  unsigned int *arg3 = gsi::arg_reader<unsigned int * >() (args, heap);
  struct VkSparseImageMemoryRequirements2 *arg4 = gsi::arg_reader<struct VkSparseImageMemoryRequirements2 * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkGetImageSparseMemoryRequirements2 (arg1, arg2, arg3, arg4);
}


// void QVulkanDeviceFunctions::vkGetImageSubresourceLayout(struct VkDevice_T *device, struct VkImage_T *image, const struct VkImageSubresource *pSubresource, struct VkSubresourceLayout *pLayout)


static void _init_f_vkGetImageSubresourceLayout_11809 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("image");
  decl->add_arg<struct VkImage_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pSubresource");
  decl->add_arg<const struct VkImageSubresource * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pLayout");
  decl->add_arg<struct VkSubresourceLayout * > (argspec_3);
  decl->set_return<void > ();
}

static void _call_f_vkGetImageSubresourceLayout_11809 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkImage_T *arg2 = gsi::arg_reader<struct VkImage_T * >() (args, heap);
  const struct VkImageSubresource *arg3 = gsi::arg_reader<const struct VkImageSubresource * >() (args, heap);
  struct VkSubresourceLayout *arg4 = gsi::arg_reader<struct VkSubresourceLayout * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkGetImageSubresourceLayout (arg1, arg2, arg3, arg4);
}


// enum VkResult QVulkanDeviceFunctions::vkGetPipelineCacheData(struct VkDevice_T *device, struct VkPipelineCache_T *pipelineCache, unsigned long int *pDataSize, void *pData)


static void _init_f_vkGetPipelineCacheData_8778 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pipelineCache");
  decl->add_arg<struct VkPipelineCache_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pDataSize");
  decl->add_arg<unsigned long int * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pData");
  decl->add_arg<void * > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkGetPipelineCacheData_8778 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkPipelineCache_T *arg2 = gsi::arg_reader<struct VkPipelineCache_T * >() (args, heap);
  unsigned long int *arg3 = gsi::arg_reader<unsigned long int * >() (args, heap);
  void *arg4 = gsi::arg_reader<void * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkGetPipelineCacheData (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkGetQueryPoolResults(struct VkDevice_T *device, struct VkQueryPool_T *queryPool, unsigned int firstQuery, unsigned int queryCount, unsigned long int dataSize, void *pData, unsigned long int stride, unsigned int flags)


static void _init_f_vkGetQueryPoolResults_15478 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("queryPool");
  decl->add_arg<struct VkQueryPool_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("firstQuery");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("queryCount");
  decl->add_arg<unsigned int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("dataSize");
  decl->add_arg<unsigned long int > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("pData");
  decl->add_arg<void * > (argspec_5);
  static gsi::ArgSpecBase argspec_6 ("stride");
  decl->add_arg<unsigned long int > (argspec_6);
  static gsi::ArgSpecBase argspec_7 ("flags");
  decl->add_arg<unsigned int > (argspec_7);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkGetQueryPoolResults_15478 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkQueryPool_T *arg2 = gsi::arg_reader<struct VkQueryPool_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned long int arg5 = gsi::arg_reader<unsigned long int >() (args, heap);
  void *arg6 = gsi::arg_reader<void * >() (args, heap);
  unsigned long int arg7 = gsi::arg_reader<unsigned long int >() (args, heap);
  unsigned int arg8 = gsi::arg_reader<unsigned int >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkGetQueryPoolResults (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8));
}


// void QVulkanDeviceFunctions::vkGetRenderAreaGranularity(struct VkDevice_T *device, struct VkRenderPass_T *renderPass, struct VkExtent2D *pGranularity)


static void _init_f_vkGetRenderAreaGranularity_7407 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("renderPass");
  decl->add_arg<struct VkRenderPass_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pGranularity");
  decl->add_arg<struct VkExtent2D * > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkGetRenderAreaGranularity_7407 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkRenderPass_T *arg2 = gsi::arg_reader<struct VkRenderPass_T * >() (args, heap);
  struct VkExtent2D *arg3 = gsi::arg_reader<struct VkExtent2D * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkGetRenderAreaGranularity (arg1, arg2, arg3);
}


// enum VkResult QVulkanDeviceFunctions::vkGetSemaphoreCounterValue(struct VkDevice_T *device, struct VkSemaphore_T *semaphore, unsigned long int *pValue)


static void _init_f_vkGetSemaphoreCounterValue_7472 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("semaphore");
  decl->add_arg<struct VkSemaphore_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pValue");
  decl->add_arg<unsigned long int * > (argspec_2);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkGetSemaphoreCounterValue_7472 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkSemaphore_T *arg2 = gsi::arg_reader<struct VkSemaphore_T * >() (args, heap);
  unsigned long int *arg3 = gsi::arg_reader<unsigned long int * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkGetSemaphoreCounterValue (arg1, arg2, arg3));
}


// enum VkResult QVulkanDeviceFunctions::vkInvalidateMappedMemoryRanges(struct VkDevice_T *device, unsigned int memoryRangeCount, const struct VkMappedMemoryRange *pMemoryRanges)


static void _init_f_vkInvalidateMappedMemoryRanges_8019 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("memoryRangeCount");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pMemoryRanges");
  decl->add_arg<const struct VkMappedMemoryRange * > (argspec_2);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkInvalidateMappedMemoryRanges_8019 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkMappedMemoryRange *arg3 = gsi::arg_reader<const struct VkMappedMemoryRange * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkInvalidateMappedMemoryRanges (arg1, arg2, arg3));
}


// enum VkResult QVulkanDeviceFunctions::vkMapMemory(struct VkDevice_T *device, struct VkDeviceMemory_T *memory, unsigned long int offset, unsigned long int size, unsigned int flags, void **ppData)


static void _init_f_vkMapMemory_12473 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("memory");
  decl->add_arg<struct VkDeviceMemory_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("offset");
  decl->add_arg<unsigned long int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("size");
  decl->add_arg<unsigned long int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("flags");
  decl->add_arg<unsigned int > (argspec_4);
  static gsi::ArgSpecBase argspec_5 ("ppData");
  decl->add_arg<void ** > (argspec_5);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkMapMemory_12473 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkDeviceMemory_T *arg2 = gsi::arg_reader<struct VkDeviceMemory_T * >() (args, heap);
  unsigned long int arg3 = gsi::arg_reader<unsigned long int >() (args, heap);
  unsigned long int arg4 = gsi::arg_reader<unsigned long int >() (args, heap);
  unsigned int arg5 = gsi::arg_reader<unsigned int >() (args, heap);
  void **arg6 = gsi::arg_reader<void ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkMapMemory (arg1, arg2, arg3, arg4, arg5, arg6));
}


// enum VkResult QVulkanDeviceFunctions::vkMergePipelineCaches(struct VkDevice_T *device, struct VkPipelineCache_T *dstCache, unsigned int srcCacheCount, const struct VkPipelineCache_T **pSrcCaches)


static void _init_f_vkMergePipelineCaches_10802 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("dstCache");
  decl->add_arg<struct VkPipelineCache_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("srcCacheCount");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pSrcCaches");
  decl->add_arg<const struct VkPipelineCache_T ** > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkMergePipelineCaches_10802 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkPipelineCache_T *arg2 = gsi::arg_reader<struct VkPipelineCache_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkPipelineCache_T **arg4 = gsi::arg_reader<const struct VkPipelineCache_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkMergePipelineCaches (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkQueueBindSparse(struct VkQueue_T *queue, unsigned int bindInfoCount, const struct VkBindSparseInfo *pBindInfo, struct VkFence_T *fence)


static void _init_f_vkQueueBindSparse_9806 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("queue");
  decl->add_arg<struct VkQueue_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("bindInfoCount");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pBindInfo");
  decl->add_arg<const struct VkBindSparseInfo * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("fence");
  decl->add_arg<struct VkFence_T * > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkQueueBindSparse_9806 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkQueue_T *arg1 = gsi::arg_reader<struct VkQueue_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkBindSparseInfo *arg3 = gsi::arg_reader<const struct VkBindSparseInfo * >() (args, heap);
  struct VkFence_T *arg4 = gsi::arg_reader<struct VkFence_T * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkQueueBindSparse (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkQueueSubmit(struct VkQueue_T *queue, unsigned int submitCount, const struct VkSubmitInfo *pSubmits, struct VkFence_T *fence)


static void _init_f_vkQueueSubmit_9431 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("queue");
  decl->add_arg<struct VkQueue_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("submitCount");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pSubmits");
  decl->add_arg<const struct VkSubmitInfo * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("fence");
  decl->add_arg<struct VkFence_T * > (argspec_3);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkQueueSubmit_9431 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkQueue_T *arg1 = gsi::arg_reader<struct VkQueue_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkSubmitInfo *arg3 = gsi::arg_reader<const struct VkSubmitInfo * >() (args, heap);
  struct VkFence_T *arg4 = gsi::arg_reader<struct VkFence_T * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkQueueSubmit (arg1, arg2, arg3, arg4));
}


// enum VkResult QVulkanDeviceFunctions::vkQueueWaitIdle(struct VkQueue_T *queue)


static void _init_f_vkQueueWaitIdle_2332 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("queue");
  decl->add_arg<struct VkQueue_T * > (argspec_0);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkQueueWaitIdle_2332 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkQueue_T *arg1 = gsi::arg_reader<struct VkQueue_T * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkQueueWaitIdle (arg1));
}


// enum VkResult QVulkanDeviceFunctions::vkResetCommandBuffer(struct VkCommandBuffer_T *commandBuffer, unsigned int flags)


static void _init_f_vkResetCommandBuffer_4784 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("commandBuffer");
  decl->add_arg<struct VkCommandBuffer_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("flags");
  decl->add_arg<unsigned int > (argspec_1);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkResetCommandBuffer_4784 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkCommandBuffer_T *arg1 = gsi::arg_reader<struct VkCommandBuffer_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkResetCommandBuffer (arg1, arg2));
}


// enum VkResult QVulkanDeviceFunctions::vkResetCommandPool(struct VkDevice_T *device, struct VkCommandPool_T *commandPool, unsigned int flags)


static void _init_f_vkResetCommandPool_6891 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("commandPool");
  decl->add_arg<struct VkCommandPool_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("flags");
  decl->add_arg<unsigned int > (argspec_2);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkResetCommandPool_6891 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkCommandPool_T *arg2 = gsi::arg_reader<struct VkCommandPool_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkResetCommandPool (arg1, arg2, arg3));
}


// enum VkResult QVulkanDeviceFunctions::vkResetDescriptorPool(struct VkDevice_T *device, struct VkDescriptorPool_T *descriptorPool, unsigned int flags)


static void _init_f_vkResetDescriptorPool_7243 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("descriptorPool");
  decl->add_arg<struct VkDescriptorPool_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("flags");
  decl->add_arg<unsigned int > (argspec_2);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkResetDescriptorPool_7243 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkDescriptorPool_T *arg2 = gsi::arg_reader<struct VkDescriptorPool_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkResetDescriptorPool (arg1, arg2, arg3));
}


// enum VkResult QVulkanDeviceFunctions::vkResetEvent(struct VkDevice_T *device, struct VkEvent_T *event)


static void _init_f_vkResetEvent_4628 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("event");
  decl->add_arg<struct VkEvent_T * > (argspec_1);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkResetEvent_4628 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkEvent_T *arg2 = gsi::arg_reader<struct VkEvent_T * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkResetEvent (arg1, arg2));
}


// enum VkResult QVulkanDeviceFunctions::vkResetFences(struct VkDevice_T *device, unsigned int fenceCount, const struct VkFence_T **pFences)


static void _init_f_vkResetFences_6996 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("fenceCount");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pFences");
  decl->add_arg<const struct VkFence_T ** > (argspec_2);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkResetFences_6996 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkFence_T **arg3 = gsi::arg_reader<const struct VkFence_T ** >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkResetFences (arg1, arg2, arg3));
}


// void QVulkanDeviceFunctions::vkResetQueryPool(struct VkDevice_T *device, struct VkQueryPool_T *queryPool, unsigned int firstQuery, unsigned int queryCount)


static void _init_f_vkResetQueryPool_8386 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("queryPool");
  decl->add_arg<struct VkQueryPool_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("firstQuery");
  decl->add_arg<unsigned int > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("queryCount");
  decl->add_arg<unsigned int > (argspec_3);
  decl->set_return<void > ();
}

static void _call_f_vkResetQueryPool_8386 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkQueryPool_T *arg2 = gsi::arg_reader<struct VkQueryPool_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkResetQueryPool (arg1, arg2, arg3, arg4);
}


// enum VkResult QVulkanDeviceFunctions::vkSetEvent(struct VkDevice_T *device, struct VkEvent_T *event)


static void _init_f_vkSetEvent_4628 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("event");
  decl->add_arg<struct VkEvent_T * > (argspec_1);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkSetEvent_4628 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkEvent_T *arg2 = gsi::arg_reader<struct VkEvent_T * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkSetEvent (arg1, arg2));
}


// enum VkResult QVulkanDeviceFunctions::vkSignalSemaphore(struct VkDevice_T *device, const struct VkSemaphoreSignalInfo *pSignalInfo)


static void _init_f_vkSignalSemaphore_6564 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pSignalInfo");
  decl->add_arg<const struct VkSemaphoreSignalInfo * > (argspec_1);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkSignalSemaphore_6564 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkSemaphoreSignalInfo *arg2 = gsi::arg_reader<const struct VkSemaphoreSignalInfo * >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkSignalSemaphore (arg1, arg2));
}


// void QVulkanDeviceFunctions::vkTrimCommandPool(struct VkDevice_T *device, struct VkCommandPool_T *commandPool, unsigned int flags)


static void _init_f_vkTrimCommandPool_6891 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("commandPool");
  decl->add_arg<struct VkCommandPool_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("flags");
  decl->add_arg<unsigned int > (argspec_2);
  decl->set_return<void > ();
}

static void _call_f_vkTrimCommandPool_6891 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkCommandPool_T *arg2 = gsi::arg_reader<struct VkCommandPool_T * >() (args, heap);
  unsigned int arg3 = gsi::arg_reader<unsigned int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkTrimCommandPool (arg1, arg2, arg3);
}


// void QVulkanDeviceFunctions::vkUnmapMemory(struct VkDevice_T *device, struct VkDeviceMemory_T *memory)


static void _init_f_vkUnmapMemory_5339 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("memory");
  decl->add_arg<struct VkDeviceMemory_T * > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_vkUnmapMemory_5339 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkDeviceMemory_T *arg2 = gsi::arg_reader<struct VkDeviceMemory_T * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkUnmapMemory (arg1, arg2);
}


// void QVulkanDeviceFunctions::vkUpdateDescriptorSetWithTemplate(struct VkDevice_T *device, struct VkDescriptorSet_T *descriptorSet, struct VkDescriptorUpdateTemplate_T *descriptorUpdateTemplate, const void *pData)


static void _init_f_vkUpdateDescriptorSetWithTemplate_11313 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("descriptorSet");
  decl->add_arg<struct VkDescriptorSet_T * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("descriptorUpdateTemplate");
  decl->add_arg<struct VkDescriptorUpdateTemplate_T * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("pData");
  decl->add_arg<const void * > (argspec_3);
  decl->set_return<void > ();
}

static void _call_f_vkUpdateDescriptorSetWithTemplate_11313 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  struct VkDescriptorSet_T *arg2 = gsi::arg_reader<struct VkDescriptorSet_T * >() (args, heap);
  struct VkDescriptorUpdateTemplate_T *arg3 = gsi::arg_reader<struct VkDescriptorUpdateTemplate_T * >() (args, heap);
  const void *arg4 = gsi::arg_reader<const void * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkUpdateDescriptorSetWithTemplate (arg1, arg2, arg3, arg4);
}


// void QVulkanDeviceFunctions::vkUpdateDescriptorSets(struct VkDevice_T *device, unsigned int descriptorWriteCount, const struct VkWriteDescriptorSet *pDescriptorWrites, unsigned int descriptorCopyCount, const struct VkCopyDescriptorSet *pDescriptorCopies)


static void _init_f_vkUpdateDescriptorSets_13825 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("descriptorWriteCount");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pDescriptorWrites");
  decl->add_arg<const struct VkWriteDescriptorSet * > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("descriptorCopyCount");
  decl->add_arg<unsigned int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("pDescriptorCopies");
  decl->add_arg<const struct VkCopyDescriptorSet * > (argspec_4);
  decl->set_return<void > ();
}

static void _call_f_vkUpdateDescriptorSets_13825 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkWriteDescriptorSet *arg3 = gsi::arg_reader<const struct VkWriteDescriptorSet * >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkCopyDescriptorSet *arg5 = gsi::arg_reader<const struct VkCopyDescriptorSet * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanDeviceFunctions *)cls)->vkUpdateDescriptorSets (arg1, arg2, arg3, arg4, arg5);
}


// enum VkResult QVulkanDeviceFunctions::vkWaitForFences(struct VkDevice_T *device, unsigned int fenceCount, const struct VkFence_T **pFences, unsigned int waitAll, unsigned long int timeout)


static void _init_f_vkWaitForFences_10900 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("fenceCount");
  decl->add_arg<unsigned int > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("pFences");
  decl->add_arg<const struct VkFence_T ** > (argspec_2);
  static gsi::ArgSpecBase argspec_3 ("waitAll");
  decl->add_arg<unsigned int > (argspec_3);
  static gsi::ArgSpecBase argspec_4 ("timeout");
  decl->add_arg<unsigned long int > (argspec_4);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkWaitForFences_10900 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  unsigned int arg2 = gsi::arg_reader<unsigned int >() (args, heap);
  const struct VkFence_T **arg3 = gsi::arg_reader<const struct VkFence_T ** >() (args, heap);
  unsigned int arg4 = gsi::arg_reader<unsigned int >() (args, heap);
  unsigned long int arg5 = gsi::arg_reader<unsigned long int >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkWaitForFences (arg1, arg2, arg3, arg4, arg5));
}


// enum VkResult QVulkanDeviceFunctions::vkWaitSemaphores(struct VkDevice_T *device, const struct VkSemaphoreWaitInfo *pWaitInfo, unsigned long int timeout)


static void _init_f_vkWaitSemaphores_8603 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<struct VkDevice_T * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("pWaitInfo");
  decl->add_arg<const struct VkSemaphoreWaitInfo * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("timeout");
  decl->add_arg<unsigned long int > (argspec_2);
  decl->set_return<enum VkResult > ();
}

static void _call_f_vkWaitSemaphores_8603 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  struct VkDevice_T *arg1 = gsi::arg_reader<struct VkDevice_T * >() (args, heap);
  const struct VkSemaphoreWaitInfo *arg2 = gsi::arg_reader<const struct VkSemaphoreWaitInfo * >() (args, heap);
  unsigned long int arg3 = gsi::arg_reader<unsigned long int >() (args, heap);
  ret.write<enum VkResult > ((enum VkResult)((QVulkanDeviceFunctions *)cls)->vkWaitSemaphores (arg1, arg2, arg3));
}



namespace gsi
{

static gsi::Methods methods_QVulkanDeviceFunctions () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QVulkanDeviceFunctions::QVulkanDeviceFunctions()\nThis method creates an object of class QVulkanDeviceFunctions.", &_init_ctor_QVulkanDeviceFunctions_0, &_call_ctor_QVulkanDeviceFunctions_0);
  methods += new qt_gsi::GenericMethod ("vkAllocateCommandBuffers", "@brief Method enum VkResult QVulkanDeviceFunctions::vkAllocateCommandBuffers(struct VkDevice_T *device, const struct VkCommandBufferAllocateInfo *pAllocateInfo, struct VkCommandBuffer_T **pCommandBuffers)\n", false, &_init_f_vkAllocateCommandBuffers_10190, &_call_f_vkAllocateCommandBuffers_10190);
  methods += new qt_gsi::GenericMethod ("vkAllocateDescriptorSets", "@brief Method enum VkResult QVulkanDeviceFunctions::vkAllocateDescriptorSets(struct VkDevice_T *device, const struct VkDescriptorSetAllocateInfo *pAllocateInfo, struct VkDescriptorSet_T **pDescriptorSets)\n", false, &_init_f_vkAllocateDescriptorSets_10290, &_call_f_vkAllocateDescriptorSets_10290);
  methods += new qt_gsi::GenericMethod ("vkAllocateMemory", "@brief Method enum VkResult QVulkanDeviceFunctions::vkAllocateMemory(struct VkDevice_T *device, const struct VkMemoryAllocateInfo *pAllocateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkDeviceMemory_T **pMemory)\n", false, &_init_f_vkAllocateMemory_13587, &_call_f_vkAllocateMemory_13587);
  methods += new qt_gsi::GenericMethod ("vkBeginCommandBuffer", "@brief Method enum VkResult QVulkanDeviceFunctions::vkBeginCommandBuffer(struct VkCommandBuffer_T *commandBuffer, const struct VkCommandBufferBeginInfo *pBeginInfo)\n", false, &_init_f_vkBeginCommandBuffer_7529, &_call_f_vkBeginCommandBuffer_7529);
  methods += new qt_gsi::GenericMethod ("vkBindBufferMemory", "@brief Method enum VkResult QVulkanDeviceFunctions::vkBindBufferMemory(struct VkDevice_T *device, struct VkBuffer_T *buffer, struct VkDeviceMemory_T *memory, unsigned long int memoryOffset)\n", false, &_init_f_vkBindBufferMemory_9888, &_call_f_vkBindBufferMemory_9888);
  methods += new qt_gsi::GenericMethod ("vkBindBufferMemory2", "@brief Method enum VkResult QVulkanDeviceFunctions::vkBindBufferMemory2(struct VkDevice_T *device, unsigned int bindInfoCount, const struct VkBindBufferMemoryInfo *pBindInfos)\n", false, &_init_f_vkBindBufferMemory2_8306, &_call_f_vkBindBufferMemory2_8306);
  methods += new qt_gsi::GenericMethod ("vkBindImageMemory", "@brief Method enum VkResult QVulkanDeviceFunctions::vkBindImageMemory(struct VkDevice_T *device, struct VkImage_T *image, struct VkDeviceMemory_T *memory, unsigned long int memoryOffset)\n", false, &_init_f_vkBindImageMemory_9769, &_call_f_vkBindImageMemory_9769);
  methods += new qt_gsi::GenericMethod ("vkBindImageMemory2", "@brief Method enum VkResult QVulkanDeviceFunctions::vkBindImageMemory2(struct VkDevice_T *device, unsigned int bindInfoCount, const struct VkBindImageMemoryInfo *pBindInfos)\n", false, &_init_f_vkBindImageMemory2_8187, &_call_f_vkBindImageMemory2_8187);
  methods += new qt_gsi::GenericMethod ("vkCmdBeginQuery", "@brief Method void QVulkanDeviceFunctions::vkCmdBeginQuery(struct VkCommandBuffer_T *commandBuffer, struct VkQueryPool_T *queryPool, unsigned int query, unsigned int flags)\n", false, &_init_f_vkCmdBeginQuery_9099, &_call_f_vkCmdBeginQuery_9099);
  methods += new qt_gsi::GenericMethod ("vkCmdBeginRenderPass", "@brief Method void QVulkanDeviceFunctions::vkCmdBeginRenderPass(struct VkCommandBuffer_T *commandBuffer, const struct VkRenderPassBeginInfo *pRenderPassBegin, enum VkSubpassContents contents)\n", false, &_init_f_vkCmdBeginRenderPass_9924, &_call_f_vkCmdBeginRenderPass_9924);
  methods += new qt_gsi::GenericMethod ("vkCmdBeginRenderPass2", "@brief Method void QVulkanDeviceFunctions::vkCmdBeginRenderPass2(struct VkCommandBuffer_T *commandBuffer, const struct VkRenderPassBeginInfo *pRenderPassBegin, const struct VkSubpassBeginInfo *pSubpassBeginInfo)\n", false, &_init_f_vkCmdBeginRenderPass2_11080, &_call_f_vkCmdBeginRenderPass2_11080);
  methods += new qt_gsi::GenericMethod ("vkCmdBindDescriptorSets", "@brief Method void QVulkanDeviceFunctions::vkCmdBindDescriptorSets(struct VkCommandBuffer_T *commandBuffer, enum VkPipelineBindPoint pipelineBindPoint, struct VkPipelineLayout_T *layout, unsigned int firstSet, unsigned int descriptorSetCount, const struct VkDescriptorSet_T **pDescriptorSets, unsigned int dynamicOffsetCount, const unsigned int *pDynamicOffsets)\n", false, &_init_f_vkCmdBindDescriptorSets_20450, &_call_f_vkCmdBindDescriptorSets_20450);
  methods += new qt_gsi::GenericMethod ("vkCmdBindIndexBuffer", "@brief Method void QVulkanDeviceFunctions::vkCmdBindIndexBuffer(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *buffer, unsigned long int offset, enum VkIndexType indexType)\n", false, &_init_f_vkCmdBindIndexBuffer_9693, &_call_f_vkCmdBindIndexBuffer_9693);
  methods += new qt_gsi::GenericMethod ("vkCmdBindPipeline", "@brief Method void QVulkanDeviceFunctions::vkCmdBindPipeline(struct VkCommandBuffer_T *commandBuffer, enum VkPipelineBindPoint pipelineBindPoint, struct VkPipeline_T *pipeline)\n", false, &_init_f_vkCmdBindPipeline_8476, &_call_f_vkCmdBindPipeline_8476);
  methods += new qt_gsi::GenericMethod ("vkCmdBindVertexBuffers", "@brief Method void QVulkanDeviceFunctions::vkCmdBindVertexBuffers(struct VkCommandBuffer_T *commandBuffer, unsigned int firstBinding, unsigned int bindingCount, const struct VkBuffer_T **pBuffers, const unsigned long int *pOffsets)\n", false, &_init_f_vkCmdBindVertexBuffers_12615, &_call_f_vkCmdBindVertexBuffers_12615);
  methods += new qt_gsi::GenericMethod ("vkCmdBlitImage", "@brief Method void QVulkanDeviceFunctions::vkCmdBlitImage(struct VkCommandBuffer_T *commandBuffer, struct VkImage_T *srcImage, enum VkImageLayout srcImageLayout, struct VkImage_T *dstImage, enum VkImageLayout dstImageLayout, unsigned int regionCount, const struct VkImageBlit *pRegions, enum VkFilter filter)\n", false, &_init_f_vkCmdBlitImage_18427, &_call_f_vkCmdBlitImage_18427);
  methods += new qt_gsi::GenericMethod ("vkCmdClearAttachments", "@brief Method void QVulkanDeviceFunctions::vkCmdClearAttachments(struct VkCommandBuffer_T *commandBuffer, unsigned int attachmentCount, const struct VkClearAttachment *pAttachments, unsigned int rectCount, const struct VkClearRect *pRects)\n", false, &_init_f_vkCmdClearAttachments_13299, &_call_f_vkCmdClearAttachments_13299);
  methods += new qt_gsi::GenericMethod ("vkCmdClearColorImage", "@brief Method void QVulkanDeviceFunctions::vkCmdClearColorImage(struct VkCommandBuffer_T *commandBuffer, struct VkImage_T *image, enum VkImageLayout imageLayout, const union VkClearColorValue *pColor, unsigned int rangeCount, const struct VkImageSubresourceRange *pRanges)\n", false, &_init_f_vkCmdClearColorImage_17172, &_call_f_vkCmdClearColorImage_17172);
  methods += new qt_gsi::GenericMethod ("vkCmdClearDepthStencilImage", "@brief Method void QVulkanDeviceFunctions::vkCmdClearDepthStencilImage(struct VkCommandBuffer_T *commandBuffer, struct VkImage_T *image, enum VkImageLayout imageLayout, const struct VkClearDepthStencilValue *pDepthStencil, unsigned int rangeCount, const struct VkImageSubresourceRange *pRanges)\n", false, &_init_f_vkCmdClearDepthStencilImage_18008, &_call_f_vkCmdClearDepthStencilImage_18008);
  methods += new qt_gsi::GenericMethod ("vkCmdCopyBuffer", "@brief Method void QVulkanDeviceFunctions::vkCmdCopyBuffer(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *srcBuffer, struct VkBuffer_T *dstBuffer, unsigned int regionCount, const struct VkBufferCopy *pRegions)\n", false, &_init_f_vkCmdCopyBuffer_12638, &_call_f_vkCmdCopyBuffer_12638);
  methods += new qt_gsi::GenericMethod ("vkCmdCopyBufferToImage", "@brief Method void QVulkanDeviceFunctions::vkCmdCopyBufferToImage(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *srcBuffer, struct VkImage_T *dstImage, enum VkImageLayout dstImageLayout, unsigned int regionCount, const struct VkBufferImageCopy *pRegions)\n", false, &_init_f_vkCmdCopyBufferToImage_15225, &_call_f_vkCmdCopyBufferToImage_15225);
  methods += new qt_gsi::GenericMethod ("vkCmdCopyImage", "@brief Method void QVulkanDeviceFunctions::vkCmdCopyImage(struct VkCommandBuffer_T *commandBuffer, struct VkImage_T *srcImage, enum VkImageLayout srcImageLayout, struct VkImage_T *dstImage, enum VkImageLayout dstImageLayout, unsigned int regionCount, const struct VkImageCopy *pRegions)\n", false, &_init_f_vkCmdCopyImage_16727, &_call_f_vkCmdCopyImage_16727);
  methods += new qt_gsi::GenericMethod ("vkCmdCopyImageToBuffer", "@brief Method void QVulkanDeviceFunctions::vkCmdCopyImageToBuffer(struct VkCommandBuffer_T *commandBuffer, struct VkImage_T *srcImage, enum VkImageLayout srcImageLayout, struct VkBuffer_T *dstBuffer, unsigned int regionCount, const struct VkBufferImageCopy *pRegions)\n", false, &_init_f_vkCmdCopyImageToBuffer_15225, &_call_f_vkCmdCopyImageToBuffer_15225);
  methods += new qt_gsi::GenericMethod ("vkCmdCopyQueryPoolResults", "@brief Method void QVulkanDeviceFunctions::vkCmdCopyQueryPoolResults(struct VkCommandBuffer_T *commandBuffer, struct VkQueryPool_T *queryPool, unsigned int firstQuery, unsigned int queryCount, struct VkBuffer_T *dstBuffer, unsigned long int dstOffset, unsigned long int stride, unsigned int flags)\n", false, &_init_f_vkCmdCopyQueryPoolResults_17552, &_call_f_vkCmdCopyQueryPoolResults_17552);
  methods += new qt_gsi::GenericMethod ("vkCmdDispatch", "@brief Method void QVulkanDeviceFunctions::vkCmdDispatch(struct VkCommandBuffer_T *commandBuffer, unsigned int groupCountX, unsigned int groupCountY, unsigned int groupCountZ)\n", false, &_init_f_vkCmdDispatch_8112, &_call_f_vkCmdDispatch_8112);
  methods += new qt_gsi::GenericMethod ("vkCmdDispatchBase", "@brief Method void QVulkanDeviceFunctions::vkCmdDispatchBase(struct VkCommandBuffer_T *commandBuffer, unsigned int baseGroupX, unsigned int baseGroupY, unsigned int baseGroupZ, unsigned int groupCountX, unsigned int groupCountY, unsigned int groupCountZ)\n", false, &_init_f_vkCmdDispatchBase_13104, &_call_f_vkCmdDispatchBase_13104);
  methods += new qt_gsi::GenericMethod ("vkCmdDispatchIndirect", "@brief Method void QVulkanDeviceFunctions::vkCmdDispatchIndirect(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *buffer, unsigned long int offset)\n", false, &_init_f_vkCmdDispatchIndirect_7669, &_call_f_vkCmdDispatchIndirect_7669);
  methods += new qt_gsi::GenericMethod ("vkCmdDraw", "@brief Method void QVulkanDeviceFunctions::vkCmdDraw(struct VkCommandBuffer_T *commandBuffer, unsigned int vertexCount, unsigned int instanceCount, unsigned int firstVertex, unsigned int firstInstance)\n", false, &_init_f_vkCmdDraw_9776, &_call_f_vkCmdDraw_9776);
  methods += new qt_gsi::GenericMethod ("vkCmdDrawIndexed", "@brief Method void QVulkanDeviceFunctions::vkCmdDrawIndexed(struct VkCommandBuffer_T *commandBuffer, unsigned int indexCount, unsigned int instanceCount, unsigned int firstIndex, signed int vertexOffset, unsigned int firstInstance)\n", false, &_init_f_vkCmdDrawIndexed_11213, &_call_f_vkCmdDrawIndexed_11213);
  methods += new qt_gsi::GenericMethod ("vkCmdDrawIndexedIndirect", "@brief Method void QVulkanDeviceFunctions::vkCmdDrawIndexedIndirect(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *buffer, unsigned long int offset, unsigned int drawCount, unsigned int stride)\n", false, &_init_f_vkCmdDrawIndexedIndirect_10997, &_call_f_vkCmdDrawIndexedIndirect_10997);
  methods += new qt_gsi::GenericMethod ("vkCmdDrawIndexedIndirectCount", "@brief Method void QVulkanDeviceFunctions::vkCmdDrawIndexedIndirectCount(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *buffer, unsigned long int offset, struct VkBuffer_T *countBuffer, unsigned long int countBufferOffset, unsigned int maxDrawCount, unsigned int stride)\n", false, &_init_f_vkCmdDrawIndexedIndirectCount_15546, &_call_f_vkCmdDrawIndexedIndirectCount_15546);
  methods += new qt_gsi::GenericMethod ("vkCmdDrawIndirect", "@brief Method void QVulkanDeviceFunctions::vkCmdDrawIndirect(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *buffer, unsigned long int offset, unsigned int drawCount, unsigned int stride)\n", false, &_init_f_vkCmdDrawIndirect_10997, &_call_f_vkCmdDrawIndirect_10997);
  methods += new qt_gsi::GenericMethod ("vkCmdDrawIndirectCount", "@brief Method void QVulkanDeviceFunctions::vkCmdDrawIndirectCount(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *buffer, unsigned long int offset, struct VkBuffer_T *countBuffer, unsigned long int countBufferOffset, unsigned int maxDrawCount, unsigned int stride)\n", false, &_init_f_vkCmdDrawIndirectCount_15546, &_call_f_vkCmdDrawIndirectCount_15546);
  methods += new qt_gsi::GenericMethod ("vkCmdEndQuery", "@brief Method void QVulkanDeviceFunctions::vkCmdEndQuery(struct VkCommandBuffer_T *commandBuffer, struct VkQueryPool_T *queryPool, unsigned int query)\n", false, &_init_f_vkCmdEndQuery_7435, &_call_f_vkCmdEndQuery_7435);
  methods += new qt_gsi::GenericMethod ("vkCmdEndRenderPass", "@brief Method void QVulkanDeviceFunctions::vkCmdEndRenderPass(struct VkCommandBuffer_T *commandBuffer)\n", false, &_init_f_vkCmdEndRenderPass_3120, &_call_f_vkCmdEndRenderPass_3120);
  methods += new qt_gsi::GenericMethod ("vkCmdEndRenderPass2", "@brief Method void QVulkanDeviceFunctions::vkCmdEndRenderPass2(struct VkCommandBuffer_T *commandBuffer, const struct VkSubpassEndInfo *pSubpassEndInfo)\n", false, &_init_f_vkCmdEndRenderPass2_6755, &_call_f_vkCmdEndRenderPass2_6755);
  methods += new qt_gsi::GenericMethod ("vkCmdExecuteCommands", "@brief Method void QVulkanDeviceFunctions::vkCmdExecuteCommands(struct VkCommandBuffer_T *commandBuffer, unsigned int commandBufferCount, const struct VkCommandBuffer_T **pCommandBuffers)\n", false, &_init_f_vkCmdExecuteCommands_8533, &_call_f_vkCmdExecuteCommands_8533);
  methods += new qt_gsi::GenericMethod ("vkCmdFillBuffer", "@brief Method void QVulkanDeviceFunctions::vkCmdFillBuffer(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *dstBuffer, unsigned long int dstOffset, unsigned long int size, unsigned int data)\n", false, &_init_f_vkCmdFillBuffer_11573, &_call_f_vkCmdFillBuffer_11573);
  methods += new qt_gsi::GenericMethod ("vkCmdNextSubpass", "@brief Method void QVulkanDeviceFunctions::vkCmdNextSubpass(struct VkCommandBuffer_T *commandBuffer, enum VkSubpassContents contents)\n", false, &_init_f_vkCmdNextSubpass_5805, &_call_f_vkCmdNextSubpass_5805);
  methods += new qt_gsi::GenericMethod ("vkCmdNextSubpass2", "@brief Method void QVulkanDeviceFunctions::vkCmdNextSubpass2(struct VkCommandBuffer_T *commandBuffer, const struct VkSubpassBeginInfo *pSubpassBeginInfo, const struct VkSubpassEndInfo *pSubpassEndInfo)\n", false, &_init_f_vkCmdNextSubpass2_10596, &_call_f_vkCmdNextSubpass2_10596);
  methods += new qt_gsi::GenericMethod ("vkCmdPipelineBarrier", "@brief Method void QVulkanDeviceFunctions::vkCmdPipelineBarrier(struct VkCommandBuffer_T *commandBuffer, unsigned int srcStageMask, unsigned int dstStageMask, unsigned int dependencyFlags, unsigned int memoryBarrierCount, const struct VkMemoryBarrier *pMemoryBarriers, unsigned int bufferMemoryBarrierCount, const struct VkBufferMemoryBarrier *pBufferMemoryBarriers, unsigned int imageMemoryBarrierCount, const struct VkImageMemoryBarrier *pImageMemoryBarriers)\n", false, &_init_f_vkCmdPipelineBarrier_24890, &_call_f_vkCmdPipelineBarrier_24890);
  methods += new qt_gsi::GenericMethod ("vkCmdPushConstants", "@brief Method void QVulkanDeviceFunctions::vkCmdPushConstants(struct VkCommandBuffer_T *commandBuffer, struct VkPipelineLayout_T *layout, unsigned int stageFlags, unsigned int offset, unsigned int size, const void *pValues)\n", false, &_init_f_vkCmdPushConstants_12922, &_call_f_vkCmdPushConstants_12922);
  methods += new qt_gsi::GenericMethod ("vkCmdResetEvent", "@brief Method void QVulkanDeviceFunctions::vkCmdResetEvent(struct VkCommandBuffer_T *commandBuffer, struct VkEvent_T *event, unsigned int stageMask)\n", false, &_init_f_vkCmdResetEvent_7005, &_call_f_vkCmdResetEvent_7005);
  methods += new qt_gsi::GenericMethod ("vkCmdResetQueryPool", "@brief Method void QVulkanDeviceFunctions::vkCmdResetQueryPool(struct VkCommandBuffer_T *commandBuffer, struct VkQueryPool_T *queryPool, unsigned int firstQuery, unsigned int queryCount)\n", false, &_init_f_vkCmdResetQueryPool_9099, &_call_f_vkCmdResetQueryPool_9099);
  methods += new qt_gsi::GenericMethod ("vkCmdResolveImage", "@brief Method void QVulkanDeviceFunctions::vkCmdResolveImage(struct VkCommandBuffer_T *commandBuffer, struct VkImage_T *srcImage, enum VkImageLayout srcImageLayout, struct VkImage_T *dstImage, enum VkImageLayout dstImageLayout, unsigned int regionCount, const struct VkImageResolve *pRegions)\n", false, &_init_f_vkCmdResolveImage_17052, &_call_f_vkCmdResolveImage_17052);
  methods += new qt_gsi::GenericMethod ("vkCmdSetBlendConstants", "@brief Method void QVulkanDeviceFunctions::vkCmdSetBlendConstants(struct VkCommandBuffer_T *commandBuffer, const float blendConstants [])\n", false, &_init_f_vkCmdSetBlendConstants_5005, &_call_f_vkCmdSetBlendConstants_5005);
  methods += new qt_gsi::GenericMethod ("vkCmdSetDepthBias", "@brief Method void QVulkanDeviceFunctions::vkCmdSetDepthBias(struct VkCommandBuffer_T *commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)\n", false, &_init_f_vkCmdSetDepthBias_5706, &_call_f_vkCmdSetDepthBias_5706);
  methods += new qt_gsi::GenericMethod ("vkCmdSetDepthBounds", "@brief Method void QVulkanDeviceFunctions::vkCmdSetDepthBounds(struct VkCommandBuffer_T *commandBuffer, float minDepthBounds, float maxDepthBounds)\n", false, &_init_f_vkCmdSetDepthBounds_4844, &_call_f_vkCmdSetDepthBounds_4844);
  methods += new qt_gsi::GenericMethod ("vkCmdSetDeviceMask", "@brief Method void QVulkanDeviceFunctions::vkCmdSetDeviceMask(struct VkCommandBuffer_T *commandBuffer, unsigned int deviceMask)\n", false, &_init_f_vkCmdSetDeviceMask_4784, &_call_f_vkCmdSetDeviceMask_4784);
  methods += new qt_gsi::GenericMethod ("vkCmdSetEvent", "@brief Method void QVulkanDeviceFunctions::vkCmdSetEvent(struct VkCommandBuffer_T *commandBuffer, struct VkEvent_T *event, unsigned int stageMask)\n", false, &_init_f_vkCmdSetEvent_7005, &_call_f_vkCmdSetEvent_7005);
  methods += new qt_gsi::GenericMethod ("vkCmdSetLineWidth", "@brief Method void QVulkanDeviceFunctions::vkCmdSetLineWidth(struct VkCommandBuffer_T *commandBuffer, float lineWidth)\n", false, &_init_f_vkCmdSetLineWidth_3982, &_call_f_vkCmdSetLineWidth_3982);
  methods += new qt_gsi::GenericMethod ("vkCmdSetScissor", "@brief Method void QVulkanDeviceFunctions::vkCmdSetScissor(struct VkCommandBuffer_T *commandBuffer, unsigned int firstScissor, unsigned int scissorCount, const struct VkRect2D *pScissors)\n", false, &_init_f_vkCmdSetScissor_9187, &_call_f_vkCmdSetScissor_9187);
  methods += new qt_gsi::GenericMethod ("vkCmdSetStencilCompareMask", "@brief Method void QVulkanDeviceFunctions::vkCmdSetStencilCompareMask(struct VkCommandBuffer_T *commandBuffer, unsigned int faceMask, unsigned int compareMask)\n", false, &_init_f_vkCmdSetStencilCompareMask_6448, &_call_f_vkCmdSetStencilCompareMask_6448);
  methods += new qt_gsi::GenericMethod ("vkCmdSetStencilReference", "@brief Method void QVulkanDeviceFunctions::vkCmdSetStencilReference(struct VkCommandBuffer_T *commandBuffer, unsigned int faceMask, unsigned int reference)\n", false, &_init_f_vkCmdSetStencilReference_6448, &_call_f_vkCmdSetStencilReference_6448);
  methods += new qt_gsi::GenericMethod ("vkCmdSetStencilWriteMask", "@brief Method void QVulkanDeviceFunctions::vkCmdSetStencilWriteMask(struct VkCommandBuffer_T *commandBuffer, unsigned int faceMask, unsigned int writeMask)\n", false, &_init_f_vkCmdSetStencilWriteMask_6448, &_call_f_vkCmdSetStencilWriteMask_6448);
  methods += new qt_gsi::GenericMethod ("vkCmdSetViewport", "@brief Method void QVulkanDeviceFunctions::vkCmdSetViewport(struct VkCommandBuffer_T *commandBuffer, unsigned int firstViewport, unsigned int viewportCount, const struct VkViewport *pViewports)\n", false, &_init_f_vkCmdSetViewport_9535, &_call_f_vkCmdSetViewport_9535);
  methods += new qt_gsi::GenericMethod ("vkCmdUpdateBuffer", "@brief Method void QVulkanDeviceFunctions::vkCmdUpdateBuffer(struct VkCommandBuffer_T *commandBuffer, struct VkBuffer_T *dstBuffer, unsigned long int dstOffset, unsigned long int dataSize, const void *pData)\n", false, &_init_f_vkCmdUpdateBuffer_11552, &_call_f_vkCmdUpdateBuffer_11552);
  methods += new qt_gsi::GenericMethod ("vkCmdWaitEvents", "@brief Method void QVulkanDeviceFunctions::vkCmdWaitEvents(struct VkCommandBuffer_T *commandBuffer, unsigned int eventCount, const struct VkEvent_T **pEvents, unsigned int srcStageMask, unsigned int dstStageMask, unsigned int memoryBarrierCount, const struct VkMemoryBarrier *pMemoryBarriers, unsigned int bufferMemoryBarrierCount, const struct VkBufferMemoryBarrier *pBufferMemoryBarriers, unsigned int imageMemoryBarrierCount, const struct VkImageMemoryBarrier *pImageMemoryBarriers)\n", false, &_init_f_vkCmdWaitEvents_27848, &_call_f_vkCmdWaitEvents_27848);
  methods += new qt_gsi::GenericMethod ("vkCmdWriteTimestamp", "@brief Method void QVulkanDeviceFunctions::vkCmdWriteTimestamp(struct VkCommandBuffer_T *commandBuffer, enum VkPipelineStageFlagBits pipelineStage, struct VkQueryPool_T *queryPool, unsigned int query)\n", false, &_init_f_vkCmdWriteTimestamp_10639, &_call_f_vkCmdWriteTimestamp_10639);
  methods += new qt_gsi::GenericMethod ("vkCreateBuffer", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateBuffer(struct VkDevice_T *device, const struct VkBufferCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkBuffer_T **pBuffer)\n", false, &_init_f_vkCreateBuffer_12724, &_call_f_vkCreateBuffer_12724);
  methods += new qt_gsi::GenericMethod ("vkCreateBufferView", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateBufferView(struct VkDevice_T *device, const struct VkBufferViewCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkBufferView_T **pView)\n", false, &_init_f_vkCreateBufferView_13546, &_call_f_vkCreateBufferView_13546);
  methods += new qt_gsi::GenericMethod ("vkCreateCommandPool", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateCommandPool(struct VkDevice_T *device, const struct VkCommandPoolCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkCommandPool_T **pCommandPool)\n", false, &_init_f_vkCreateCommandPool_13746, &_call_f_vkCreateCommandPool_13746);
  methods += new qt_gsi::GenericMethod ("vkCreateComputePipelines", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateComputePipelines(struct VkDevice_T *device, struct VkPipelineCache_T *pipelineCache, unsigned int createInfoCount, const struct VkComputePipelineCreateInfo *pCreateInfos, const struct VkAllocationCallbacks *pAllocator, struct VkPipeline_T **pPipelines)\n", false, &_init_f_vkCreateComputePipelines_18558, &_call_f_vkCreateComputePipelines_18558);
  methods += new qt_gsi::GenericMethod ("vkCreateDescriptorPool", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateDescriptorPool(struct VkDevice_T *device, const struct VkDescriptorPoolCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkDescriptorPool_T **pDescriptorPool)\n", false, &_init_f_vkCreateDescriptorPool_14450, &_call_f_vkCreateDescriptorPool_14450);
  methods += new qt_gsi::GenericMethod ("vkCreateDescriptorSetLayout", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateDescriptorSetLayout(struct VkDevice_T *device, const struct VkDescriptorSetLayoutCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkDescriptorSetLayout_T **pSetLayout)\n", false, &_init_f_vkCreateDescriptorSetLayout_15506, &_call_f_vkCreateDescriptorSetLayout_15506);
  methods += new qt_gsi::GenericMethod ("vkCreateDescriptorUpdateTemplate", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateDescriptorUpdateTemplate(struct VkDevice_T *device, const struct VkDescriptorUpdateTemplateCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkDescriptorUpdateTemplate_T **pDescriptorUpdateTemplate)\n", false, &_init_f_vkCreateDescriptorUpdateTemplate_16508, &_call_f_vkCreateDescriptorUpdateTemplate_16508);
  methods += new qt_gsi::GenericMethod ("vkCreateEvent", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateEvent(struct VkDevice_T *device, const struct VkEventCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkEvent_T **pEvent)\n", false, &_init_f_vkCreateEvent_12548, &_call_f_vkCreateEvent_12548);
  methods += new qt_gsi::GenericMethod ("vkCreateFence", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateFence(struct VkDevice_T *device, const struct VkFenceCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkFence_T **pFence)\n", false, &_init_f_vkCreateFence_12482, &_call_f_vkCreateFence_12482);
  methods += new qt_gsi::GenericMethod ("vkCreateFramebuffer", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateFramebuffer(struct VkDevice_T *device, const struct VkFramebufferCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkFramebuffer_T **pFramebuffer)\n", false, &_init_f_vkCreateFramebuffer_13770, &_call_f_vkCreateFramebuffer_13770);
  methods += new qt_gsi::GenericMethod ("vkCreateGraphicsPipelines", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateGraphicsPipelines(struct VkDevice_T *device, struct VkPipelineCache_T *pipelineCache, unsigned int createInfoCount, const struct VkGraphicsPipelineCreateInfo *pCreateInfos, const struct VkAllocationCallbacks *pAllocator, struct VkPipeline_T **pPipelines)\n", false, &_init_f_vkCreateGraphicsPipelines_18642, &_call_f_vkCreateGraphicsPipelines_18642);
  methods += new qt_gsi::GenericMethod ("vkCreateImage", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateImage(struct VkDevice_T *device, const struct VkImageCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkImage_T **pImage)\n", false, &_init_f_vkCreateImage_12486, &_call_f_vkCreateImage_12486);
  methods += new qt_gsi::GenericMethod ("vkCreateImageView", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateImageView(struct VkDevice_T *device, const struct VkImageViewCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkImageView_T **pView)\n", false, &_init_f_vkCreateImageView_13308, &_call_f_vkCreateImageView_13308);
  methods += new qt_gsi::GenericMethod ("vkCreatePipelineCache", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreatePipelineCache(struct VkDevice_T *device, const struct VkPipelineCacheCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkPipelineCache_T **pPipelineCache)\n", false, &_init_f_vkCreatePipelineCache_14100, &_call_f_vkCreatePipelineCache_14100);
  methods += new qt_gsi::GenericMethod ("vkCreatePipelineLayout", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreatePipelineLayout(struct VkDevice_T *device, const struct VkPipelineLayoutCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkPipelineLayout_T **pPipelineLayout)\n", false, &_init_f_vkCreatePipelineLayout_14440, &_call_f_vkCreatePipelineLayout_14440);
  methods += new qt_gsi::GenericMethod ("vkCreateQueryPool", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateQueryPool(struct VkDevice_T *device, const struct VkQueryPoolCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkQueryPool_T **pQueryPool)\n", false, &_init_f_vkCreateQueryPool_13408, &_call_f_vkCreateQueryPool_13408);
  methods += new qt_gsi::GenericMethod ("vkCreateRenderPass", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateRenderPass(struct VkDevice_T *device, const struct VkRenderPassCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkRenderPass_T **pRenderPass)\n", false, &_init_f_vkCreateRenderPass_13550, &_call_f_vkCreateRenderPass_13550);
  methods += new qt_gsi::GenericMethod ("vkCreateRenderPass2", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateRenderPass2(struct VkDevice_T *device, const struct VkRenderPassCreateInfo2 *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkRenderPass_T **pRenderPass)\n", false, &_init_f_vkCreateRenderPass2_13600, &_call_f_vkCreateRenderPass2_13600);
  methods += new qt_gsi::GenericMethod ("vkCreateSampler", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateSampler(struct VkDevice_T *device, const struct VkSamplerCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkSampler_T **pSampler)\n", false, &_init_f_vkCreateSampler_12968, &_call_f_vkCreateSampler_12968);
  methods += new qt_gsi::GenericMethod ("vkCreateSamplerYcbcrConversion", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateSamplerYcbcrConversion(struct VkDevice_T *device, const struct VkSamplerYcbcrConversionCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkSamplerYcbcrConversion_T **pYcbcrConversion)\n", false, &_init_f_vkCreateSamplerYcbcrConversion_16090, &_call_f_vkCreateSamplerYcbcrConversion_16090);
  methods += new qt_gsi::GenericMethod ("vkCreateSemaphore", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateSemaphore(struct VkDevice_T *device, const struct VkSemaphoreCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkSemaphore_T **pSemaphore)\n", false, &_init_f_vkCreateSemaphore_13384, &_call_f_vkCreateSemaphore_13384);
  methods += new qt_gsi::GenericMethod ("vkCreateShaderModule", "@brief Method enum VkResult QVulkanDeviceFunctions::vkCreateShaderModule(struct VkDevice_T *device, const struct VkShaderModuleCreateInfo *pCreateInfo, const struct VkAllocationCallbacks *pAllocator, struct VkShaderModule_T **pShaderModule)\n", false, &_init_f_vkCreateShaderModule_13946, &_call_f_vkCreateShaderModule_13946);
  methods += new qt_gsi::GenericMethod ("vkDestroyBuffer", "@brief Method void QVulkanDeviceFunctions::vkDestroyBuffer(struct VkDevice_T *device, struct VkBuffer_T *buffer, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyBuffer_8865, &_call_f_vkDestroyBuffer_8865);
  methods += new qt_gsi::GenericMethod ("vkDestroyBufferView", "@brief Method void QVulkanDeviceFunctions::vkDestroyBufferView(struct VkDevice_T *device, struct VkBufferView_T *bufferView, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyBufferView_9276, &_call_f_vkDestroyBufferView_9276);
  methods += new qt_gsi::GenericMethod ("vkDestroyCommandPool", "@brief Method void QVulkanDeviceFunctions::vkDestroyCommandPool(struct VkDevice_T *device, struct VkCommandPool_T *commandPool, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyCommandPool_9376, &_call_f_vkDestroyCommandPool_9376);
  methods += new qt_gsi::GenericMethod ("vkDestroyDescriptorPool", "@brief Method void QVulkanDeviceFunctions::vkDestroyDescriptorPool(struct VkDevice_T *device, struct VkDescriptorPool_T *descriptorPool, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyDescriptorPool_9728, &_call_f_vkDestroyDescriptorPool_9728);
  methods += new qt_gsi::GenericMethod ("vkDestroyDescriptorSetLayout", "@brief Method void QVulkanDeviceFunctions::vkDestroyDescriptorSetLayout(struct VkDevice_T *device, struct VkDescriptorSetLayout_T *descriptorSetLayout, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyDescriptorSetLayout_10256, &_call_f_vkDestroyDescriptorSetLayout_10256);
  methods += new qt_gsi::GenericMethod ("vkDestroyDescriptorUpdateTemplate", "@brief Method void QVulkanDeviceFunctions::vkDestroyDescriptorUpdateTemplate(struct VkDevice_T *device, struct VkDescriptorUpdateTemplate_T *descriptorUpdateTemplate, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyDescriptorUpdateTemplate_10757, &_call_f_vkDestroyDescriptorUpdateTemplate_10757);
  methods += new qt_gsi::GenericMethod ("vkDestroyDevice", "@brief Method void QVulkanDeviceFunctions::vkDestroyDevice(struct VkDevice_T *device, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyDevice_6556, &_call_f_vkDestroyDevice_6556);
  methods += new qt_gsi::GenericMethod ("vkDestroyEvent", "@brief Method void QVulkanDeviceFunctions::vkDestroyEvent(struct VkDevice_T *device, struct VkEvent_T *event, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyEvent_8777, &_call_f_vkDestroyEvent_8777);
  methods += new qt_gsi::GenericMethod ("vkDestroyFence", "@brief Method void QVulkanDeviceFunctions::vkDestroyFence(struct VkDevice_T *device, struct VkFence_T *fence, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyFence_8744, &_call_f_vkDestroyFence_8744);
  methods += new qt_gsi::GenericMethod ("vkDestroyFramebuffer", "@brief Method void QVulkanDeviceFunctions::vkDestroyFramebuffer(struct VkDevice_T *device, struct VkFramebuffer_T *framebuffer, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyFramebuffer_9388, &_call_f_vkDestroyFramebuffer_9388);
  methods += new qt_gsi::GenericMethod ("vkDestroyImage", "@brief Method void QVulkanDeviceFunctions::vkDestroyImage(struct VkDevice_T *device, struct VkImage_T *image, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyImage_8746, &_call_f_vkDestroyImage_8746);
  methods += new qt_gsi::GenericMethod ("vkDestroyImageView", "@brief Method void QVulkanDeviceFunctions::vkDestroyImageView(struct VkDevice_T *device, struct VkImageView_T *imageView, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyImageView_9157, &_call_f_vkDestroyImageView_9157);
  methods += new qt_gsi::GenericMethod ("vkDestroyPipeline", "@brief Method void QVulkanDeviceFunctions::vkDestroyPipeline(struct VkDevice_T *device, struct VkPipeline_T *pipeline, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyPipeline_9085, &_call_f_vkDestroyPipeline_9085);
  methods += new qt_gsi::GenericMethod ("vkDestroyPipelineCache", "@brief Method void QVulkanDeviceFunctions::vkDestroyPipelineCache(struct VkDevice_T *device, struct VkPipelineCache_T *pipelineCache, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyPipelineCache_9553, &_call_f_vkDestroyPipelineCache_9553);
  methods += new qt_gsi::GenericMethod ("vkDestroyPipelineLayout", "@brief Method void QVulkanDeviceFunctions::vkDestroyPipelineLayout(struct VkDevice_T *device, struct VkPipelineLayout_T *pipelineLayout, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyPipelineLayout_9723, &_call_f_vkDestroyPipelineLayout_9723);
  methods += new qt_gsi::GenericMethod ("vkDestroyQueryPool", "@brief Method void QVulkanDeviceFunctions::vkDestroyQueryPool(struct VkDevice_T *device, struct VkQueryPool_T *queryPool, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyQueryPool_9207, &_call_f_vkDestroyQueryPool_9207);
  methods += new qt_gsi::GenericMethod ("vkDestroyRenderPass", "@brief Method void QVulkanDeviceFunctions::vkDestroyRenderPass(struct VkDevice_T *device, struct VkRenderPass_T *renderPass, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyRenderPass_9278, &_call_f_vkDestroyRenderPass_9278);
  methods += new qt_gsi::GenericMethod ("vkDestroySampler", "@brief Method void QVulkanDeviceFunctions::vkDestroySampler(struct VkDevice_T *device, struct VkSampler_T *sampler, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroySampler_8987, &_call_f_vkDestroySampler_8987);
  methods += new qt_gsi::GenericMethod ("vkDestroySamplerYcbcrConversion", "@brief Method void QVulkanDeviceFunctions::vkDestroySamplerYcbcrConversion(struct VkDevice_T *device, struct VkSamplerYcbcrConversion_T *ycbcrConversion, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroySamplerYcbcrConversion_10548, &_call_f_vkDestroySamplerYcbcrConversion_10548);
  methods += new qt_gsi::GenericMethod ("vkDestroySemaphore", "@brief Method void QVulkanDeviceFunctions::vkDestroySemaphore(struct VkDevice_T *device, struct VkSemaphore_T *semaphore, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroySemaphore_9195, &_call_f_vkDestroySemaphore_9195);
  methods += new qt_gsi::GenericMethod ("vkDestroyShaderModule", "@brief Method void QVulkanDeviceFunctions::vkDestroyShaderModule(struct VkDevice_T *device, struct VkShaderModule_T *shaderModule, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkDestroyShaderModule_9476, &_call_f_vkDestroyShaderModule_9476);
  methods += new qt_gsi::GenericMethod ("vkDeviceWaitIdle", "@brief Method enum VkResult QVulkanDeviceFunctions::vkDeviceWaitIdle(struct VkDevice_T *device)\n", false, &_init_f_vkDeviceWaitIdle_2407, &_call_f_vkDeviceWaitIdle_2407);
  methods += new qt_gsi::GenericMethod ("vkEndCommandBuffer", "@brief Method enum VkResult QVulkanDeviceFunctions::vkEndCommandBuffer(struct VkCommandBuffer_T *commandBuffer)\n", false, &_init_f_vkEndCommandBuffer_3120, &_call_f_vkEndCommandBuffer_3120);
  methods += new qt_gsi::GenericMethod ("vkFlushMappedMemoryRanges", "@brief Method enum VkResult QVulkanDeviceFunctions::vkFlushMappedMemoryRanges(struct VkDevice_T *device, unsigned int memoryRangeCount, const struct VkMappedMemoryRange *pMemoryRanges)\n", false, &_init_f_vkFlushMappedMemoryRanges_8019, &_call_f_vkFlushMappedMemoryRanges_8019);
  methods += new qt_gsi::GenericMethod ("vkFreeCommandBuffers", "@brief Method void QVulkanDeviceFunctions::vkFreeCommandBuffers(struct VkDevice_T *device, struct VkCommandPool_T *commandPool, unsigned int commandBufferCount, const struct VkCommandBuffer_T **pCommandBuffers)\n", false, &_init_f_vkFreeCommandBuffers_10640, &_call_f_vkFreeCommandBuffers_10640);
  methods += new qt_gsi::GenericMethod ("vkFreeDescriptorSets", "@brief Method enum VkResult QVulkanDeviceFunctions::vkFreeDescriptorSets(struct VkDevice_T *device, struct VkDescriptorPool_T *descriptorPool, unsigned int descriptorSetCount, const struct VkDescriptorSet_T **pDescriptorSets)\n", false, &_init_f_vkFreeDescriptorSets_11042, &_call_f_vkFreeDescriptorSets_11042);
  methods += new qt_gsi::GenericMethod ("vkFreeMemory", "@brief Method void QVulkanDeviceFunctions::vkFreeMemory(struct VkDevice_T *device, struct VkDeviceMemory_T *memory, const struct VkAllocationCallbacks *pAllocator)\n", false, &_init_f_vkFreeMemory_9488, &_call_f_vkFreeMemory_9488);
  methods += new qt_gsi::GenericMethod ("vkGetBufferDeviceAddress", "@brief Method unsigned long int QVulkanDeviceFunctions::vkGetBufferDeviceAddress(struct VkDevice_T *device, const struct VkBufferDeviceAddressInfo *pInfo)\n", false, &_init_f_vkGetBufferDeviceAddress_6930, &_call_f_vkGetBufferDeviceAddress_6930);
  methods += new qt_gsi::GenericMethod ("vkGetBufferMemoryRequirements", "@brief Method void QVulkanDeviceFunctions::vkGetBufferMemoryRequirements(struct VkDevice_T *device, struct VkBuffer_T *buffer, struct VkMemoryRequirements *pMemoryRequirements)\n", false, &_init_f_vkGetBufferMemoryRequirements_8161, &_call_f_vkGetBufferMemoryRequirements_8161);
  methods += new qt_gsi::GenericMethod ("vkGetBufferMemoryRequirements2", "@brief Method void QVulkanDeviceFunctions::vkGetBufferMemoryRequirements2(struct VkDevice_T *device, const struct VkBufferMemoryRequirementsInfo2 *pInfo, struct VkMemoryRequirements2 *pMemoryRequirements)\n", false, &_init_f_vkGetBufferMemoryRequirements2_11090, &_call_f_vkGetBufferMemoryRequirements2_11090);
  methods += new qt_gsi::GenericMethod ("vkGetBufferOpaqueCaptureAddress", "@brief Method unsigned long int QVulkanDeviceFunctions::vkGetBufferOpaqueCaptureAddress(struct VkDevice_T *device, const struct VkBufferDeviceAddressInfo *pInfo)\n", false, &_init_f_vkGetBufferOpaqueCaptureAddress_6930, &_call_f_vkGetBufferOpaqueCaptureAddress_6930);
  methods += new qt_gsi::GenericMethod ("vkGetDescriptorSetLayoutSupport", "@brief Method void QVulkanDeviceFunctions::vkGetDescriptorSetLayoutSupport(struct VkDevice_T *device, const struct VkDescriptorSetLayoutCreateInfo *pCreateInfo, struct VkDescriptorSetLayoutSupport *pSupport)\n", false, &_init_f_vkGetDescriptorSetLayoutSupport_11901, &_call_f_vkGetDescriptorSetLayoutSupport_11901);
  methods += new qt_gsi::GenericMethod ("vkGetDeviceGroupPeerMemoryFeatures", "@brief Method void QVulkanDeviceFunctions::vkGetDeviceGroupPeerMemoryFeatures(struct VkDevice_T *device, unsigned int heapIndex, unsigned int localDeviceIndex, unsigned int remoteDeviceIndex, unsigned int *pPeerMemoryFeatures)\n", false, &_init_f_vkGetDeviceGroupPeerMemoryFeatures_9249, &_call_f_vkGetDeviceGroupPeerMemoryFeatures_9249);
  methods += new qt_gsi::GenericMethod ("vkGetDeviceMemoryCommitment", "@brief Method void QVulkanDeviceFunctions::vkGetDeviceMemoryCommitment(struct VkDevice_T *device, struct VkDeviceMemory_T *memory, unsigned long int *pCommittedMemoryInBytes)\n", false, &_init_f_vkGetDeviceMemoryCommitment_7765, &_call_f_vkGetDeviceMemoryCommitment_7765);
  methods += new qt_gsi::GenericMethod ("vkGetDeviceMemoryOpaqueCaptureAddress", "@brief Method unsigned long int QVulkanDeviceFunctions::vkGetDeviceMemoryOpaqueCaptureAddress(struct VkDevice_T *device, const struct VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo)\n", false, &_init_f_vkGetDeviceMemoryOpaqueCaptureAddress_8304, &_call_f_vkGetDeviceMemoryOpaqueCaptureAddress_8304);
  methods += new qt_gsi::GenericMethod ("vkGetDeviceQueue", "@brief Method void QVulkanDeviceFunctions::vkGetDeviceQueue(struct VkDevice_T *device, unsigned int queueFamilyIndex, unsigned int queueIndex, struct VkQueue_T **pQueue)\n", false, &_init_f_vkGetDeviceQueue_8001, &_call_f_vkGetDeviceQueue_8001);
  methods += new qt_gsi::GenericMethod ("vkGetDeviceQueue2", "@brief Method void QVulkanDeviceFunctions::vkGetDeviceQueue2(struct VkDevice_T *device, const struct VkDeviceQueueInfo2 *pQueueInfo, struct VkQueue_T **pQueue)\n", false, &_init_f_vkGetDeviceQueue2_8451, &_call_f_vkGetDeviceQueue2_8451);
  methods += new qt_gsi::GenericMethod ("vkGetEventStatus", "@brief Method enum VkResult QVulkanDeviceFunctions::vkGetEventStatus(struct VkDevice_T *device, struct VkEvent_T *event)\n", false, &_init_f_vkGetEventStatus_4628, &_call_f_vkGetEventStatus_4628);
  methods += new qt_gsi::GenericMethod ("vkGetFenceStatus", "@brief Method enum VkResult QVulkanDeviceFunctions::vkGetFenceStatus(struct VkDevice_T *device, struct VkFence_T *fence)\n", false, &_init_f_vkGetFenceStatus_4595, &_call_f_vkGetFenceStatus_4595);
  methods += new qt_gsi::GenericMethod ("vkGetImageMemoryRequirements", "@brief Method void QVulkanDeviceFunctions::vkGetImageMemoryRequirements(struct VkDevice_T *device, struct VkImage_T *image, struct VkMemoryRequirements *pMemoryRequirements)\n", false, &_init_f_vkGetImageMemoryRequirements_8042, &_call_f_vkGetImageMemoryRequirements_8042);
  methods += new qt_gsi::GenericMethod ("vkGetImageMemoryRequirements2", "@brief Method void QVulkanDeviceFunctions::vkGetImageMemoryRequirements2(struct VkDevice_T *device, const struct VkImageMemoryRequirementsInfo2 *pInfo, struct VkMemoryRequirements2 *pMemoryRequirements)\n", false, &_init_f_vkGetImageMemoryRequirements2_10971, &_call_f_vkGetImageMemoryRequirements2_10971);
  methods += new qt_gsi::GenericMethod ("vkGetImageSparseMemoryRequirements", "@brief Method void QVulkanDeviceFunctions::vkGetImageSparseMemoryRequirements(struct VkDevice_T *device, struct VkImage_T *image, unsigned int *pSparseMemoryRequirementCount, struct VkSparseImageMemoryRequirements *pSparseMemoryRequirements)\n", false, &_init_f_vkGetImageSparseMemoryRequirements_10997, &_call_f_vkGetImageSparseMemoryRequirements_10997);
  methods += new qt_gsi::GenericMethod ("vkGetImageSparseMemoryRequirements2", "@brief Method void QVulkanDeviceFunctions::vkGetImageSparseMemoryRequirements2(struct VkDevice_T *device, const struct VkImageSparseMemoryRequirementsInfo2 *pInfo, unsigned int *pSparseMemoryRequirementCount, struct VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements)\n", false, &_init_f_vkGetImageSparseMemoryRequirements2_14548, &_call_f_vkGetImageSparseMemoryRequirements2_14548);
  methods += new qt_gsi::GenericMethod ("vkGetImageSubresourceLayout", "@brief Method void QVulkanDeviceFunctions::vkGetImageSubresourceLayout(struct VkDevice_T *device, struct VkImage_T *image, const struct VkImageSubresource *pSubresource, struct VkSubresourceLayout *pLayout)\n", false, &_init_f_vkGetImageSubresourceLayout_11809, &_call_f_vkGetImageSubresourceLayout_11809);
  methods += new qt_gsi::GenericMethod ("vkGetPipelineCacheData", "@brief Method enum VkResult QVulkanDeviceFunctions::vkGetPipelineCacheData(struct VkDevice_T *device, struct VkPipelineCache_T *pipelineCache, unsigned long int *pDataSize, void *pData)\n", false, &_init_f_vkGetPipelineCacheData_8778, &_call_f_vkGetPipelineCacheData_8778);
  methods += new qt_gsi::GenericMethod ("vkGetQueryPoolResults", "@brief Method enum VkResult QVulkanDeviceFunctions::vkGetQueryPoolResults(struct VkDevice_T *device, struct VkQueryPool_T *queryPool, unsigned int firstQuery, unsigned int queryCount, unsigned long int dataSize, void *pData, unsigned long int stride, unsigned int flags)\n", false, &_init_f_vkGetQueryPoolResults_15478, &_call_f_vkGetQueryPoolResults_15478);
  methods += new qt_gsi::GenericMethod ("vkGetRenderAreaGranularity", "@brief Method void QVulkanDeviceFunctions::vkGetRenderAreaGranularity(struct VkDevice_T *device, struct VkRenderPass_T *renderPass, struct VkExtent2D *pGranularity)\n", false, &_init_f_vkGetRenderAreaGranularity_7407, &_call_f_vkGetRenderAreaGranularity_7407);
  methods += new qt_gsi::GenericMethod ("vkGetSemaphoreCounterValue", "@brief Method enum VkResult QVulkanDeviceFunctions::vkGetSemaphoreCounterValue(struct VkDevice_T *device, struct VkSemaphore_T *semaphore, unsigned long int *pValue)\n", false, &_init_f_vkGetSemaphoreCounterValue_7472, &_call_f_vkGetSemaphoreCounterValue_7472);
  methods += new qt_gsi::GenericMethod ("vkInvalidateMappedMemoryRanges", "@brief Method enum VkResult QVulkanDeviceFunctions::vkInvalidateMappedMemoryRanges(struct VkDevice_T *device, unsigned int memoryRangeCount, const struct VkMappedMemoryRange *pMemoryRanges)\n", false, &_init_f_vkInvalidateMappedMemoryRanges_8019, &_call_f_vkInvalidateMappedMemoryRanges_8019);
  methods += new qt_gsi::GenericMethod ("vkMapMemory", "@brief Method enum VkResult QVulkanDeviceFunctions::vkMapMemory(struct VkDevice_T *device, struct VkDeviceMemory_T *memory, unsigned long int offset, unsigned long int size, unsigned int flags, void **ppData)\n", false, &_init_f_vkMapMemory_12473, &_call_f_vkMapMemory_12473);
  methods += new qt_gsi::GenericMethod ("vkMergePipelineCaches", "@brief Method enum VkResult QVulkanDeviceFunctions::vkMergePipelineCaches(struct VkDevice_T *device, struct VkPipelineCache_T *dstCache, unsigned int srcCacheCount, const struct VkPipelineCache_T **pSrcCaches)\n", false, &_init_f_vkMergePipelineCaches_10802, &_call_f_vkMergePipelineCaches_10802);
  methods += new qt_gsi::GenericMethod ("vkQueueBindSparse", "@brief Method enum VkResult QVulkanDeviceFunctions::vkQueueBindSparse(struct VkQueue_T *queue, unsigned int bindInfoCount, const struct VkBindSparseInfo *pBindInfo, struct VkFence_T *fence)\n", false, &_init_f_vkQueueBindSparse_9806, &_call_f_vkQueueBindSparse_9806);
  methods += new qt_gsi::GenericMethod ("vkQueueSubmit", "@brief Method enum VkResult QVulkanDeviceFunctions::vkQueueSubmit(struct VkQueue_T *queue, unsigned int submitCount, const struct VkSubmitInfo *pSubmits, struct VkFence_T *fence)\n", false, &_init_f_vkQueueSubmit_9431, &_call_f_vkQueueSubmit_9431);
  methods += new qt_gsi::GenericMethod ("vkQueueWaitIdle", "@brief Method enum VkResult QVulkanDeviceFunctions::vkQueueWaitIdle(struct VkQueue_T *queue)\n", false, &_init_f_vkQueueWaitIdle_2332, &_call_f_vkQueueWaitIdle_2332);
  methods += new qt_gsi::GenericMethod ("vkResetCommandBuffer", "@brief Method enum VkResult QVulkanDeviceFunctions::vkResetCommandBuffer(struct VkCommandBuffer_T *commandBuffer, unsigned int flags)\n", false, &_init_f_vkResetCommandBuffer_4784, &_call_f_vkResetCommandBuffer_4784);
  methods += new qt_gsi::GenericMethod ("vkResetCommandPool", "@brief Method enum VkResult QVulkanDeviceFunctions::vkResetCommandPool(struct VkDevice_T *device, struct VkCommandPool_T *commandPool, unsigned int flags)\n", false, &_init_f_vkResetCommandPool_6891, &_call_f_vkResetCommandPool_6891);
  methods += new qt_gsi::GenericMethod ("vkResetDescriptorPool", "@brief Method enum VkResult QVulkanDeviceFunctions::vkResetDescriptorPool(struct VkDevice_T *device, struct VkDescriptorPool_T *descriptorPool, unsigned int flags)\n", false, &_init_f_vkResetDescriptorPool_7243, &_call_f_vkResetDescriptorPool_7243);
  methods += new qt_gsi::GenericMethod ("vkResetEvent", "@brief Method enum VkResult QVulkanDeviceFunctions::vkResetEvent(struct VkDevice_T *device, struct VkEvent_T *event)\n", false, &_init_f_vkResetEvent_4628, &_call_f_vkResetEvent_4628);
  methods += new qt_gsi::GenericMethod ("vkResetFences", "@brief Method enum VkResult QVulkanDeviceFunctions::vkResetFences(struct VkDevice_T *device, unsigned int fenceCount, const struct VkFence_T **pFences)\n", false, &_init_f_vkResetFences_6996, &_call_f_vkResetFences_6996);
  methods += new qt_gsi::GenericMethod ("vkResetQueryPool", "@brief Method void QVulkanDeviceFunctions::vkResetQueryPool(struct VkDevice_T *device, struct VkQueryPool_T *queryPool, unsigned int firstQuery, unsigned int queryCount)\n", false, &_init_f_vkResetQueryPool_8386, &_call_f_vkResetQueryPool_8386);
  methods += new qt_gsi::GenericMethod ("vkSetEvent", "@brief Method enum VkResult QVulkanDeviceFunctions::vkSetEvent(struct VkDevice_T *device, struct VkEvent_T *event)\n", false, &_init_f_vkSetEvent_4628, &_call_f_vkSetEvent_4628);
  methods += new qt_gsi::GenericMethod ("vkSignalSemaphore", "@brief Method enum VkResult QVulkanDeviceFunctions::vkSignalSemaphore(struct VkDevice_T *device, const struct VkSemaphoreSignalInfo *pSignalInfo)\n", false, &_init_f_vkSignalSemaphore_6564, &_call_f_vkSignalSemaphore_6564);
  methods += new qt_gsi::GenericMethod ("vkTrimCommandPool", "@brief Method void QVulkanDeviceFunctions::vkTrimCommandPool(struct VkDevice_T *device, struct VkCommandPool_T *commandPool, unsigned int flags)\n", false, &_init_f_vkTrimCommandPool_6891, &_call_f_vkTrimCommandPool_6891);
  methods += new qt_gsi::GenericMethod ("vkUnmapMemory", "@brief Method void QVulkanDeviceFunctions::vkUnmapMemory(struct VkDevice_T *device, struct VkDeviceMemory_T *memory)\n", false, &_init_f_vkUnmapMemory_5339, &_call_f_vkUnmapMemory_5339);
  methods += new qt_gsi::GenericMethod ("vkUpdateDescriptorSetWithTemplate", "@brief Method void QVulkanDeviceFunctions::vkUpdateDescriptorSetWithTemplate(struct VkDevice_T *device, struct VkDescriptorSet_T *descriptorSet, struct VkDescriptorUpdateTemplate_T *descriptorUpdateTemplate, const void *pData)\n", false, &_init_f_vkUpdateDescriptorSetWithTemplate_11313, &_call_f_vkUpdateDescriptorSetWithTemplate_11313);
  methods += new qt_gsi::GenericMethod ("vkUpdateDescriptorSets", "@brief Method void QVulkanDeviceFunctions::vkUpdateDescriptorSets(struct VkDevice_T *device, unsigned int descriptorWriteCount, const struct VkWriteDescriptorSet *pDescriptorWrites, unsigned int descriptorCopyCount, const struct VkCopyDescriptorSet *pDescriptorCopies)\n", false, &_init_f_vkUpdateDescriptorSets_13825, &_call_f_vkUpdateDescriptorSets_13825);
  methods += new qt_gsi::GenericMethod ("vkWaitForFences", "@brief Method enum VkResult QVulkanDeviceFunctions::vkWaitForFences(struct VkDevice_T *device, unsigned int fenceCount, const struct VkFence_T **pFences, unsigned int waitAll, unsigned long int timeout)\n", false, &_init_f_vkWaitForFences_10900, &_call_f_vkWaitForFences_10900);
  methods += new qt_gsi::GenericMethod ("vkWaitSemaphores", "@brief Method enum VkResult QVulkanDeviceFunctions::vkWaitSemaphores(struct VkDevice_T *device, const struct VkSemaphoreWaitInfo *pWaitInfo, unsigned long int timeout)\n", false, &_init_f_vkWaitSemaphores_8603, &_call_f_vkWaitSemaphores_8603);
  return methods;
}

gsi::Class<QVulkanDeviceFunctions> decl_QVulkanDeviceFunctions ("QtGui", "QVulkanDeviceFunctions",
  methods_QVulkanDeviceFunctions (),
  "@qt\n@brief Binding of QVulkanDeviceFunctions");


GSI_QTGUI_PUBLIC gsi::Class<QVulkanDeviceFunctions> &qtdecl_QVulkanDeviceFunctions () { return decl_QVulkanDeviceFunctions; }

}

