
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQVulkanInfoVector.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QVulkanInfoVector>
#include "gsiQt.h"
#include "gsiQtGuiCommon.h"
#include "gsiDeclQtGuiTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QVulkanInfoVector

//  Constructor QVulkanInfoVector::QVulkanInfoVector()


static void _init_ctor_QVulkanInfoVector_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QVulkanInfoVector> ();
}

static void _call_ctor_QVulkanInfoVector_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVulkanInfoVector *> (new QVulkanInfoVector ());
}


// bool QVulkanInfoVector::contains(const QByteArray &name)


static void _init_f_contains_c2309 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QByteArray & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_contains_c2309 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QByteArray &arg1 = gsi::arg_reader<const QByteArray & >() (args, heap);
  ret.write<bool > ((bool)((QVulkanInfoVector *)cls)->contains (arg1));
}


// bool QVulkanInfoVector::contains(const QByteArray &name, int minVersion)


static void _init_f_contains_c2968 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const QByteArray & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("minVersion");
  decl->add_arg<int > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_contains_c2968 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QByteArray &arg1 = gsi::arg_reader<const QByteArray & >() (args, heap);
  int arg2 = gsi::arg_reader<int >() (args, heap);
  ret.write<bool > ((bool)((QVulkanInfoVector *)cls)->contains (arg1, arg2));
}



namespace gsi
{

static gsi::Methods methods_QVulkanInfoVector () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QVulkanInfoVector::QVulkanInfoVector()\nThis method creates an object of class QVulkanInfoVector.", &_init_ctor_QVulkanInfoVector_0, &_call_ctor_QVulkanInfoVector_0);
  methods += new qt_gsi::GenericMethod ("contains", "@brief Method bool QVulkanInfoVector::contains(const QByteArray &name)\n", true, &_init_f_contains_c2309, &_call_f_contains_c2309);
  methods += new qt_gsi::GenericMethod ("contains", "@brief Method bool QVulkanInfoVector::contains(const QByteArray &name, int minVersion)\n", true, &_init_f_contains_c2968, &_call_f_contains_c2968);
  return methods;
}

gsi::Class<QList<T>> &qtdecl_QList<T> ();

gsi::Class<QVulkanInfoVector> decl_QVulkanInfoVector (qtdecl_QList<T> (), "QtGui", "QVulkanInfoVector",
  methods_QVulkanInfoVector (),
  "@qt\n@brief Binding of QVulkanInfoVector");


GSI_QTGUI_PUBLIC gsi::Class<QVulkanInfoVector> &qtdecl_QVulkanInfoVector () { return decl_QVulkanInfoVector; }

}

