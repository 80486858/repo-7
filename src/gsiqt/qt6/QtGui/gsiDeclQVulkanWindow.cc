
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQVulkanWindow.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QVulkanWindow>
#include <QAccessibleInterface>
#include <QBindingStorage>
#include <QChildEvent>
#include <QCloseEvent>
#include <QCursor>
#include <QEvent>
#include <QExposeEvent>
#include <QFocusEvent>
#include <QHideEvent>
#include <QIcon>
#include <QImage>
#include <QKeyEvent>
#include <QMargins>
#include <QMatrix4x4>
#include <QMetaMethod>
#include <QMouseEvent>
#include <QMoveEvent>
#include <QObject>
#include <QPaintEvent>
#include <QPoint>
#include <QPointF>
#include <QRect>
#include <QRegion>
#include <QResizeEvent>
#include <QScreen>
#include <QShowEvent>
#include <QSize>
#include <QSurfaceFormat>
#include <QTabletEvent>
#include <QThread>
#include <QTimerEvent>
#include <QTouchEvent>
#include <QVulkanExtension>
#include <QVulkanInfoVector>
#include <QVulkanInstance>
#include <QVulkanWindowRenderer>
#include <QWheelEvent>
#include <QWindow>
#include "gsiQt.h"
#include "gsiQtGuiCommon.h"
#include "gsiDeclQtGuiTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QVulkanWindow

//  get static meta object

static void _init_smo (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<const QMetaObject &> ();
}

static void _call_smo (const qt_gsi::GenericStaticMethod *, gsi::SerialArgs &, gsi::SerialArgs &ret) 
{
  ret.write<const QMetaObject &> (QVulkanWindow::staticMetaObject);
}


// QList<VkPhysicalDeviceProperties> QVulkanWindow::availablePhysicalDevices()


static void _init_f_availablePhysicalDevices_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QList<VkPhysicalDeviceProperties> > ();
}

static void _call_f_availablePhysicalDevices_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QList<VkPhysicalDeviceProperties> > ((QList<VkPhysicalDeviceProperties>)((QVulkanWindow *)cls)->availablePhysicalDevices ());
}


// QMatrix4x4 QVulkanWindow::clipCorrectionMatrix()


static void _init_f_clipCorrectionMatrix_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QMatrix4x4 > ();
}

static void _call_f_clipCorrectionMatrix_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QMatrix4x4 > ((QMatrix4x4)((QVulkanWindow *)cls)->clipCorrectionMatrix ());
}


// enum VkFormat QVulkanWindow::colorFormat()


static void _init_f_colorFormat_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<enum VkFormat > ();
}

static void _call_f_colorFormat_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<enum VkFormat > ((enum VkFormat)((QVulkanWindow *)cls)->colorFormat ());
}


// int QVulkanWindow::concurrentFrameCount()


static void _init_f_concurrentFrameCount_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_concurrentFrameCount_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<int > ((int)((QVulkanWindow *)cls)->concurrentFrameCount ());
}


// QVulkanWindowRenderer *QVulkanWindow::createRenderer()


static void _init_f_createRenderer_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QVulkanWindowRenderer * > ();
}

static void _call_f_createRenderer_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVulkanWindowRenderer * > ((QVulkanWindowRenderer *)((QVulkanWindow *)cls)->createRenderer ());
}


// struct VkCommandBuffer_T *QVulkanWindow::currentCommandBuffer()


static void _init_f_currentCommandBuffer_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<struct VkCommandBuffer_T * > ();
}

static void _call_f_currentCommandBuffer_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<struct VkCommandBuffer_T * > ((struct VkCommandBuffer_T *)((QVulkanWindow *)cls)->currentCommandBuffer ());
}


// int QVulkanWindow::currentFrame()


static void _init_f_currentFrame_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_currentFrame_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<int > ((int)((QVulkanWindow *)cls)->currentFrame ());
}


// struct VkFramebuffer_T *QVulkanWindow::currentFramebuffer()


static void _init_f_currentFramebuffer_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<struct VkFramebuffer_T * > ();
}

static void _call_f_currentFramebuffer_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<struct VkFramebuffer_T * > ((struct VkFramebuffer_T *)((QVulkanWindow *)cls)->currentFramebuffer ());
}


// int QVulkanWindow::currentSwapChainImageIndex()


static void _init_f_currentSwapChainImageIndex_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_currentSwapChainImageIndex_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<int > ((int)((QVulkanWindow *)cls)->currentSwapChainImageIndex ());
}


// struct VkRenderPass_T *QVulkanWindow::defaultRenderPass()


static void _init_f_defaultRenderPass_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<struct VkRenderPass_T * > ();
}

static void _call_f_defaultRenderPass_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<struct VkRenderPass_T * > ((struct VkRenderPass_T *)((QVulkanWindow *)cls)->defaultRenderPass ());
}


// enum VkFormat QVulkanWindow::depthStencilFormat()


static void _init_f_depthStencilFormat_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<enum VkFormat > ();
}

static void _call_f_depthStencilFormat_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<enum VkFormat > ((enum VkFormat)((QVulkanWindow *)cls)->depthStencilFormat ());
}


// struct VkImage_T *QVulkanWindow::depthStencilImage()


static void _init_f_depthStencilImage_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<struct VkImage_T * > ();
}

static void _call_f_depthStencilImage_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<struct VkImage_T * > ((struct VkImage_T *)((QVulkanWindow *)cls)->depthStencilImage ());
}


// struct VkImageView_T *QVulkanWindow::depthStencilImageView()


static void _init_f_depthStencilImageView_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<struct VkImageView_T * > ();
}

static void _call_f_depthStencilImageView_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<struct VkImageView_T * > ((struct VkImageView_T *)((QVulkanWindow *)cls)->depthStencilImageView ());
}


// struct VkDevice_T *QVulkanWindow::device()


static void _init_f_device_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<struct VkDevice_T * > ();
}

static void _call_f_device_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<struct VkDevice_T * > ((struct VkDevice_T *)((QVulkanWindow *)cls)->device ());
}


// unsigned int QVulkanWindow::deviceLocalMemoryIndex()


static void _init_f_deviceLocalMemoryIndex_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned int > ();
}

static void _call_f_deviceLocalMemoryIndex_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned int > ((unsigned int)((QVulkanWindow *)cls)->deviceLocalMemoryIndex ());
}


// QFlags<QVulkanWindow::Flag> QVulkanWindow::flags()


static void _init_f_flags_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QFlags<QVulkanWindow::Flag> > ();
}

static void _call_f_flags_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QFlags<QVulkanWindow::Flag> > ((QFlags<QVulkanWindow::Flag>)((QVulkanWindow *)cls)->flags ());
}


// void QVulkanWindow::frameGrabbed(const QImage &image)


static void _init_f_frameGrabbed_1877 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("image");
  decl->add_arg<const QImage & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_frameGrabbed_1877 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QImage &arg1 = gsi::arg_reader<const QImage & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow *)cls)->frameGrabbed (arg1);
}


// void QVulkanWindow::frameReady()


static void _init_f_frameReady_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_frameReady_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow *)cls)->frameReady ();
}


// QImage QVulkanWindow::grab()


static void _init_f_grab_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QImage > ();
}

static void _call_f_grab_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QImage > ((QImage)((QVulkanWindow *)cls)->grab ());
}


// struct VkCommandPool_T *QVulkanWindow::graphicsCommandPool()


static void _init_f_graphicsCommandPool_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<struct VkCommandPool_T * > ();
}

static void _call_f_graphicsCommandPool_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<struct VkCommandPool_T * > ((struct VkCommandPool_T *)((QVulkanWindow *)cls)->graphicsCommandPool ());
}


// struct VkQueue_T *QVulkanWindow::graphicsQueue()


static void _init_f_graphicsQueue_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<struct VkQueue_T * > ();
}

static void _call_f_graphicsQueue_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<struct VkQueue_T * > ((struct VkQueue_T *)((QVulkanWindow *)cls)->graphicsQueue ());
}


// unsigned int QVulkanWindow::graphicsQueueFamilyIndex()


static void _init_f_graphicsQueueFamilyIndex_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned int > ();
}

static void _call_f_graphicsQueueFamilyIndex_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned int > ((unsigned int)((QVulkanWindow *)cls)->graphicsQueueFamilyIndex ());
}


// unsigned int QVulkanWindow::hostVisibleMemoryIndex()


static void _init_f_hostVisibleMemoryIndex_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<unsigned int > ();
}

static void _call_f_hostVisibleMemoryIndex_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<unsigned int > ((unsigned int)((QVulkanWindow *)cls)->hostVisibleMemoryIndex ());
}


// bool QVulkanWindow::isValid()


static void _init_f_isValid_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isValid_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QVulkanWindow *)cls)->isValid ());
}


// struct VkImage_T *QVulkanWindow::msaaColorImage(int idx)


static void _init_f_msaaColorImage_c767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("idx");
  decl->add_arg<int > (argspec_0);
  decl->set_return<struct VkImage_T * > ();
}

static void _call_f_msaaColorImage_c767 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  int arg1 = gsi::arg_reader<int >() (args, heap);
  ret.write<struct VkImage_T * > ((struct VkImage_T *)((QVulkanWindow *)cls)->msaaColorImage (arg1));
}


// struct VkImageView_T *QVulkanWindow::msaaColorImageView(int idx)


static void _init_f_msaaColorImageView_c767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("idx");
  decl->add_arg<int > (argspec_0);
  decl->set_return<struct VkImageView_T * > ();
}

static void _call_f_msaaColorImageView_c767 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  int arg1 = gsi::arg_reader<int >() (args, heap);
  ret.write<struct VkImageView_T * > ((struct VkImageView_T *)((QVulkanWindow *)cls)->msaaColorImageView (arg1));
}


// struct VkPhysicalDevice_T *QVulkanWindow::physicalDevice()


static void _init_f_physicalDevice_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<struct VkPhysicalDevice_T * > ();
}

static void _call_f_physicalDevice_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<struct VkPhysicalDevice_T * > ((struct VkPhysicalDevice_T *)((QVulkanWindow *)cls)->physicalDevice ());
}


// const struct VkPhysicalDeviceProperties *QVulkanWindow::physicalDeviceProperties()


static void _init_f_physicalDeviceProperties_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const struct VkPhysicalDeviceProperties * > ();
}

static void _call_f_physicalDeviceProperties_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<const struct VkPhysicalDeviceProperties * > ((const struct VkPhysicalDeviceProperties *)((QVulkanWindow *)cls)->physicalDeviceProperties ());
}


// enum VkSampleCountFlagBits QVulkanWindow::sampleCountFlagBits()


static void _init_f_sampleCountFlagBits_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<enum VkSampleCountFlagBits > ();
}

static void _call_f_sampleCountFlagBits_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<enum VkSampleCountFlagBits > ((enum VkSampleCountFlagBits)((QVulkanWindow *)cls)->sampleCountFlagBits ());
}


// void QVulkanWindow::setDeviceExtensions(const QByteArrayList &extensions)


static void _init_f_setDeviceExtensions_2721 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("extensions");
  decl->add_arg<const QByteArrayList & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setDeviceExtensions_2721 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QByteArrayList &arg1 = gsi::arg_reader<const QByteArrayList & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow *)cls)->setDeviceExtensions (arg1);
}


// void QVulkanWindow::setFlags(QFlags<QVulkanWindow::Flag> flags)


static void _init_f_setFlags_2964 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("flags");
  decl->add_arg<QFlags<QVulkanWindow::Flag> > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setFlags_2964 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QFlags<QVulkanWindow::Flag> arg1 = gsi::arg_reader<QFlags<QVulkanWindow::Flag> >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow *)cls)->setFlags (arg1);
}


// void QVulkanWindow::setPhysicalDeviceIndex(int idx)


static void _init_f_setPhysicalDeviceIndex_767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("idx");
  decl->add_arg<int > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPhysicalDeviceIndex_767 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  int arg1 = gsi::arg_reader<int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow *)cls)->setPhysicalDeviceIndex (arg1);
}


// void QVulkanWindow::setPreferredColorFormats(const QList<VkFormat> &formats)


static void _init_f_setPreferredColorFormats_2738 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("formats");
  decl->add_arg<const QList<VkFormat> & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setPreferredColorFormats_2738 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QList<VkFormat> &arg1 = gsi::arg_reader<const QList<VkFormat> & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow *)cls)->setPreferredColorFormats (arg1);
}


// void QVulkanWindow::setQueueCreateInfoModifier(const std::function<void(const VkQueueFamilyProperties *, uint32_t, QList<VkDeviceQueueCreateInfo> &)> &modifier)


static void _init_f_setQueueCreateInfoModifier_10764 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("modifier");
  decl->add_arg<const std::function<void(const VkQueueFamilyProperties *, uint32_t, QList<VkDeviceQueueCreateInfo> &)> & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setQueueCreateInfoModifier_10764 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const std::function<void(const VkQueueFamilyProperties *, uint32_t, QList<VkDeviceQueueCreateInfo> &)> &arg1 = gsi::arg_reader<const std::function<void(const VkQueueFamilyProperties *, uint32_t, QList<VkDeviceQueueCreateInfo> &)> & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow *)cls)->setQueueCreateInfoModifier (arg1);
}


// void QVulkanWindow::setSampleCount(int sampleCount)


static void _init_f_setSampleCount_767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("sampleCount");
  decl->add_arg<int > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setSampleCount_767 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  int arg1 = gsi::arg_reader<int >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow *)cls)->setSampleCount (arg1);
}


// QVulkanInfoVector<QVulkanExtension> QVulkanWindow::supportedDeviceExtensions()


static void _init_f_supportedDeviceExtensions_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QVulkanInfoVector<QVulkanExtension> > ();
}

static void _call_f_supportedDeviceExtensions_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVulkanInfoVector<QVulkanExtension> > ((QVulkanInfoVector<QVulkanExtension>)((QVulkanWindow *)cls)->supportedDeviceExtensions ());
}


// QList<int> QVulkanWindow::supportedSampleCounts()


static void _init_f_supportedSampleCounts_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QList<int> > ();
}

static void _call_f_supportedSampleCounts_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QList<int> > ((QList<int>)((QVulkanWindow *)cls)->supportedSampleCounts ());
}


// bool QVulkanWindow::supportsGrab()


static void _init_f_supportsGrab_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_supportsGrab_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QVulkanWindow *)cls)->supportsGrab ());
}


// struct VkImage_T *QVulkanWindow::swapChainImage(int idx)


static void _init_f_swapChainImage_c767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("idx");
  decl->add_arg<int > (argspec_0);
  decl->set_return<struct VkImage_T * > ();
}

static void _call_f_swapChainImage_c767 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  int arg1 = gsi::arg_reader<int >() (args, heap);
  ret.write<struct VkImage_T * > ((struct VkImage_T *)((QVulkanWindow *)cls)->swapChainImage (arg1));
}


// int QVulkanWindow::swapChainImageCount()


static void _init_f_swapChainImageCount_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_swapChainImageCount_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<int > ((int)((QVulkanWindow *)cls)->swapChainImageCount ());
}


// QSize QVulkanWindow::swapChainImageSize()


static void _init_f_swapChainImageSize_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QSize > ();
}

static void _call_f_swapChainImageSize_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QSize > ((QSize)((QVulkanWindow *)cls)->swapChainImageSize ());
}


// struct VkImageView_T *QVulkanWindow::swapChainImageView(int idx)


static void _init_f_swapChainImageView_c767 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("idx");
  decl->add_arg<int > (argspec_0);
  decl->set_return<struct VkImageView_T * > ();
}

static void _call_f_swapChainImageView_c767 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  int arg1 = gsi::arg_reader<int >() (args, heap);
  ret.write<struct VkImageView_T * > ((struct VkImageView_T *)((QVulkanWindow *)cls)->swapChainImageView (arg1));
}


// static QString QVulkanWindow::tr(const char *s, const char *c, int n)


static void _init_f_tr_4013 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c", true, "nullptr");
  decl->add_arg<const char * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("n", true, "-1");
  decl->add_arg<int > (argspec_2);
  decl->set_return<QString > ();
}

static void _call_f_tr_4013 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const char *arg1 = gsi::arg_reader<const char * >() (args, heap);
  const char *arg2 = args ? gsi::arg_reader<const char * >() (args, heap) : gsi::arg_maker<const char * >() (nullptr, heap);
  int arg3 = args ? gsi::arg_reader<int >() (args, heap) : gsi::arg_maker<int >() (-1, heap);
  ret.write<QString > ((QString)QVulkanWindow::tr (arg1, arg2, arg3));
}


namespace gsi
{

static gsi::Methods methods_QVulkanWindow () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("staticMetaObject", "@brief Obtains the static MetaObject for this class.", &_init_smo, &_call_smo);
  methods += new qt_gsi::GenericMethod ("availablePhysicalDevices", "@brief Method QList<VkPhysicalDeviceProperties> QVulkanWindow::availablePhysicalDevices()\n", false, &_init_f_availablePhysicalDevices_0, &_call_f_availablePhysicalDevices_0);
  methods += new qt_gsi::GenericMethod ("clipCorrectionMatrix", "@brief Method QMatrix4x4 QVulkanWindow::clipCorrectionMatrix()\n", false, &_init_f_clipCorrectionMatrix_0, &_call_f_clipCorrectionMatrix_0);
  methods += new qt_gsi::GenericMethod ("colorFormat", "@brief Method enum VkFormat QVulkanWindow::colorFormat()\n", true, &_init_f_colorFormat_c0, &_call_f_colorFormat_c0);
  methods += new qt_gsi::GenericMethod ("concurrentFrameCount", "@brief Method int QVulkanWindow::concurrentFrameCount()\n", true, &_init_f_concurrentFrameCount_c0, &_call_f_concurrentFrameCount_c0);
  methods += new qt_gsi::GenericMethod ("createRenderer", "@brief Method QVulkanWindowRenderer *QVulkanWindow::createRenderer()\n", false, &_init_f_createRenderer_0, &_call_f_createRenderer_0);
  methods += new qt_gsi::GenericMethod ("currentCommandBuffer", "@brief Method struct VkCommandBuffer_T *QVulkanWindow::currentCommandBuffer()\n", true, &_init_f_currentCommandBuffer_c0, &_call_f_currentCommandBuffer_c0);
  methods += new qt_gsi::GenericMethod ("currentFrame", "@brief Method int QVulkanWindow::currentFrame()\n", true, &_init_f_currentFrame_c0, &_call_f_currentFrame_c0);
  methods += new qt_gsi::GenericMethod ("currentFramebuffer", "@brief Method struct VkFramebuffer_T *QVulkanWindow::currentFramebuffer()\n", true, &_init_f_currentFramebuffer_c0, &_call_f_currentFramebuffer_c0);
  methods += new qt_gsi::GenericMethod ("currentSwapChainImageIndex", "@brief Method int QVulkanWindow::currentSwapChainImageIndex()\n", true, &_init_f_currentSwapChainImageIndex_c0, &_call_f_currentSwapChainImageIndex_c0);
  methods += new qt_gsi::GenericMethod ("defaultRenderPass", "@brief Method struct VkRenderPass_T *QVulkanWindow::defaultRenderPass()\n", true, &_init_f_defaultRenderPass_c0, &_call_f_defaultRenderPass_c0);
  methods += new qt_gsi::GenericMethod ("depthStencilFormat", "@brief Method enum VkFormat QVulkanWindow::depthStencilFormat()\n", true, &_init_f_depthStencilFormat_c0, &_call_f_depthStencilFormat_c0);
  methods += new qt_gsi::GenericMethod ("depthStencilImage", "@brief Method struct VkImage_T *QVulkanWindow::depthStencilImage()\n", true, &_init_f_depthStencilImage_c0, &_call_f_depthStencilImage_c0);
  methods += new qt_gsi::GenericMethod ("depthStencilImageView", "@brief Method struct VkImageView_T *QVulkanWindow::depthStencilImageView()\n", true, &_init_f_depthStencilImageView_c0, &_call_f_depthStencilImageView_c0);
  methods += new qt_gsi::GenericMethod ("device", "@brief Method struct VkDevice_T *QVulkanWindow::device()\n", true, &_init_f_device_c0, &_call_f_device_c0);
  methods += new qt_gsi::GenericMethod ("deviceLocalMemoryIndex", "@brief Method unsigned int QVulkanWindow::deviceLocalMemoryIndex()\n", true, &_init_f_deviceLocalMemoryIndex_c0, &_call_f_deviceLocalMemoryIndex_c0);
  methods += new qt_gsi::GenericMethod ("flags", "@brief Method QFlags<QVulkanWindow::Flag> QVulkanWindow::flags()\n", true, &_init_f_flags_c0, &_call_f_flags_c0);
  methods += new qt_gsi::GenericMethod ("frameGrabbed", "@brief Method void QVulkanWindow::frameGrabbed(const QImage &image)\n", false, &_init_f_frameGrabbed_1877, &_call_f_frameGrabbed_1877);
  methods += new qt_gsi::GenericMethod ("frameReady", "@brief Method void QVulkanWindow::frameReady()\n", false, &_init_f_frameReady_0, &_call_f_frameReady_0);
  methods += new qt_gsi::GenericMethod ("grab", "@brief Method QImage QVulkanWindow::grab()\n", false, &_init_f_grab_0, &_call_f_grab_0);
  methods += new qt_gsi::GenericMethod ("graphicsCommandPool", "@brief Method struct VkCommandPool_T *QVulkanWindow::graphicsCommandPool()\n", true, &_init_f_graphicsCommandPool_c0, &_call_f_graphicsCommandPool_c0);
  methods += new qt_gsi::GenericMethod ("graphicsQueue", "@brief Method struct VkQueue_T *QVulkanWindow::graphicsQueue()\n", true, &_init_f_graphicsQueue_c0, &_call_f_graphicsQueue_c0);
  methods += new qt_gsi::GenericMethod ("graphicsQueueFamilyIndex", "@brief Method unsigned int QVulkanWindow::graphicsQueueFamilyIndex()\n", true, &_init_f_graphicsQueueFamilyIndex_c0, &_call_f_graphicsQueueFamilyIndex_c0);
  methods += new qt_gsi::GenericMethod ("hostVisibleMemoryIndex", "@brief Method unsigned int QVulkanWindow::hostVisibleMemoryIndex()\n", true, &_init_f_hostVisibleMemoryIndex_c0, &_call_f_hostVisibleMemoryIndex_c0);
  methods += new qt_gsi::GenericMethod ("isValid?", "@brief Method bool QVulkanWindow::isValid()\n", true, &_init_f_isValid_c0, &_call_f_isValid_c0);
  methods += new qt_gsi::GenericMethod ("msaaColorImage", "@brief Method struct VkImage_T *QVulkanWindow::msaaColorImage(int idx)\n", true, &_init_f_msaaColorImage_c767, &_call_f_msaaColorImage_c767);
  methods += new qt_gsi::GenericMethod ("msaaColorImageView", "@brief Method struct VkImageView_T *QVulkanWindow::msaaColorImageView(int idx)\n", true, &_init_f_msaaColorImageView_c767, &_call_f_msaaColorImageView_c767);
  methods += new qt_gsi::GenericMethod ("physicalDevice", "@brief Method struct VkPhysicalDevice_T *QVulkanWindow::physicalDevice()\n", true, &_init_f_physicalDevice_c0, &_call_f_physicalDevice_c0);
  methods += new qt_gsi::GenericMethod ("physicalDeviceProperties", "@brief Method const struct VkPhysicalDeviceProperties *QVulkanWindow::physicalDeviceProperties()\n", true, &_init_f_physicalDeviceProperties_c0, &_call_f_physicalDeviceProperties_c0);
  methods += new qt_gsi::GenericMethod ("sampleCountFlagBits", "@brief Method enum VkSampleCountFlagBits QVulkanWindow::sampleCountFlagBits()\n", true, &_init_f_sampleCountFlagBits_c0, &_call_f_sampleCountFlagBits_c0);
  methods += new qt_gsi::GenericMethod ("setDeviceExtensions", "@brief Method void QVulkanWindow::setDeviceExtensions(const QByteArrayList &extensions)\n", false, &_init_f_setDeviceExtensions_2721, &_call_f_setDeviceExtensions_2721);
  methods += new qt_gsi::GenericMethod ("setFlags", "@brief Method void QVulkanWindow::setFlags(QFlags<QVulkanWindow::Flag> flags)\n", false, &_init_f_setFlags_2964, &_call_f_setFlags_2964);
  methods += new qt_gsi::GenericMethod ("setPhysicalDeviceIndex", "@brief Method void QVulkanWindow::setPhysicalDeviceIndex(int idx)\n", false, &_init_f_setPhysicalDeviceIndex_767, &_call_f_setPhysicalDeviceIndex_767);
  methods += new qt_gsi::GenericMethod ("setPreferredColorFormats", "@brief Method void QVulkanWindow::setPreferredColorFormats(const QList<VkFormat> &formats)\n", false, &_init_f_setPreferredColorFormats_2738, &_call_f_setPreferredColorFormats_2738);
  methods += new qt_gsi::GenericMethod ("setQueueCreateInfoModifier", "@brief Method void QVulkanWindow::setQueueCreateInfoModifier(const std::function<void(const VkQueueFamilyProperties *, uint32_t, QList<VkDeviceQueueCreateInfo> &)> &modifier)\n", false, &_init_f_setQueueCreateInfoModifier_10764, &_call_f_setQueueCreateInfoModifier_10764);
  methods += new qt_gsi::GenericMethod ("setSampleCount", "@brief Method void QVulkanWindow::setSampleCount(int sampleCount)\n", false, &_init_f_setSampleCount_767, &_call_f_setSampleCount_767);
  methods += new qt_gsi::GenericMethod ("supportedDeviceExtensions", "@brief Method QVulkanInfoVector<QVulkanExtension> QVulkanWindow::supportedDeviceExtensions()\n", false, &_init_f_supportedDeviceExtensions_0, &_call_f_supportedDeviceExtensions_0);
  methods += new qt_gsi::GenericMethod ("supportedSampleCounts", "@brief Method QList<int> QVulkanWindow::supportedSampleCounts()\n", false, &_init_f_supportedSampleCounts_0, &_call_f_supportedSampleCounts_0);
  methods += new qt_gsi::GenericMethod ("supportsGrab", "@brief Method bool QVulkanWindow::supportsGrab()\n", true, &_init_f_supportsGrab_c0, &_call_f_supportsGrab_c0);
  methods += new qt_gsi::GenericMethod ("swapChainImage", "@brief Method struct VkImage_T *QVulkanWindow::swapChainImage(int idx)\n", true, &_init_f_swapChainImage_c767, &_call_f_swapChainImage_c767);
  methods += new qt_gsi::GenericMethod ("swapChainImageCount", "@brief Method int QVulkanWindow::swapChainImageCount()\n", true, &_init_f_swapChainImageCount_c0, &_call_f_swapChainImageCount_c0);
  methods += new qt_gsi::GenericMethod ("swapChainImageSize", "@brief Method QSize QVulkanWindow::swapChainImageSize()\n", true, &_init_f_swapChainImageSize_c0, &_call_f_swapChainImageSize_c0);
  methods += new qt_gsi::GenericMethod ("swapChainImageView", "@brief Method struct VkImageView_T *QVulkanWindow::swapChainImageView(int idx)\n", true, &_init_f_swapChainImageView_c767, &_call_f_swapChainImageView_c767);
  methods += new qt_gsi::GenericStaticMethod ("tr", "@brief Static method QString QVulkanWindow::tr(const char *s, const char *c, int n)\nThis method is static and can be called without an instance.", &_init_f_tr_4013, &_call_f_tr_4013);
  return methods;
}

gsi::Class<QWindow> &qtdecl_QWindow ();

qt_gsi::QtNativeClass<QVulkanWindow> decl_QVulkanWindow (qtdecl_QWindow (), "QtGui", "QVulkanWindow_Native",
  methods_QVulkanWindow (),
  "@hide\n@alias QVulkanWindow");

GSI_QTGUI_PUBLIC gsi::Class<QVulkanWindow> &qtdecl_QVulkanWindow () { return decl_QVulkanWindow; }

}


class QVulkanWindow_Adaptor : public QVulkanWindow, public qt_gsi::QtObjectBase
{
public:

  virtual ~QVulkanWindow_Adaptor();

  //  [adaptor ctor] QVulkanWindow::QVulkanWindow(QWindow *parent)
  QVulkanWindow_Adaptor() : QVulkanWindow()
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QVulkanWindow::QVulkanWindow(QWindow *parent)
  QVulkanWindow_Adaptor(QWindow *parent) : QVulkanWindow(parent)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [expose] bool QVulkanWindow::isSignalConnected(const QMetaMethod &signal)
  bool fp_QVulkanWindow_isSignalConnected_c2394 (const QMetaMethod &signal) const {
    return QVulkanWindow::isSignalConnected(signal);
  }

  //  [expose] int QVulkanWindow::receivers(const char *signal)
  int fp_QVulkanWindow_receivers_c1731 (const char *signal) const {
    return QVulkanWindow::receivers(signal);
  }

  //  [expose] void *QVulkanWindow::resolveInterface(const char *name, int revision)
  void * fp_QVulkanWindow_resolveInterface_c2390 (const char *name, int revision) const {
    return QVulkanWindow::resolveInterface(name, revision);
  }

  //  [expose] QObject *QVulkanWindow::sender()
  QObject * fp_QVulkanWindow_sender_c0 () const {
    return QVulkanWindow::sender();
  }

  //  [expose] int QVulkanWindow::senderSignalIndex()
  int fp_QVulkanWindow_senderSignalIndex_c0 () const {
    return QVulkanWindow::senderSignalIndex();
  }

  //  [adaptor impl] QAccessibleInterface *QVulkanWindow::accessibleRoot()
  QAccessibleInterface * cbs_accessibleRoot_c0_0() const
  {
    return QVulkanWindow::accessibleRoot();
  }

  virtual QAccessibleInterface * accessibleRoot() const
  {
    if (cb_accessibleRoot_c0_0.can_issue()) {
      return cb_accessibleRoot_c0_0.issue<QVulkanWindow_Adaptor, QAccessibleInterface *>(&QVulkanWindow_Adaptor::cbs_accessibleRoot_c0_0);
    } else {
      return QVulkanWindow::accessibleRoot();
    }
  }

  //  [adaptor impl] QVulkanWindowRenderer *QVulkanWindow::createRenderer()
  QVulkanWindowRenderer * cbs_createRenderer_0_0()
  {
    return QVulkanWindow::createRenderer();
  }

  virtual QVulkanWindowRenderer * createRenderer()
  {
    if (cb_createRenderer_0_0.can_issue()) {
      return cb_createRenderer_0_0.issue<QVulkanWindow_Adaptor, QVulkanWindowRenderer *>(&QVulkanWindow_Adaptor::cbs_createRenderer_0_0);
    } else {
      return QVulkanWindow::createRenderer();
    }
  }

  //  [adaptor impl] bool QVulkanWindow::eventFilter(QObject *watched, QEvent *event)
  bool cbs_eventFilter_2411_0(QObject *watched, QEvent *event)
  {
    return QVulkanWindow::eventFilter(watched, event);
  }

  virtual bool eventFilter(QObject *watched, QEvent *event)
  {
    if (cb_eventFilter_2411_0.can_issue()) {
      return cb_eventFilter_2411_0.issue<QVulkanWindow_Adaptor, bool, QObject *, QEvent *>(&QVulkanWindow_Adaptor::cbs_eventFilter_2411_0, watched, event);
    } else {
      return QVulkanWindow::eventFilter(watched, event);
    }
  }

  //  [adaptor impl] QObject *QVulkanWindow::focusObject()
  QObject * cbs_focusObject_c0_0() const
  {
    return QVulkanWindow::focusObject();
  }

  virtual QObject * focusObject() const
  {
    if (cb_focusObject_c0_0.can_issue()) {
      return cb_focusObject_c0_0.issue<QVulkanWindow_Adaptor, QObject *>(&QVulkanWindow_Adaptor::cbs_focusObject_c0_0);
    } else {
      return QVulkanWindow::focusObject();
    }
  }

  //  [adaptor impl] QSurfaceFormat QVulkanWindow::format()
  QSurfaceFormat cbs_format_c0_0() const
  {
    return QVulkanWindow::format();
  }

  virtual QSurfaceFormat format() const
  {
    if (cb_format_c0_0.can_issue()) {
      return cb_format_c0_0.issue<QVulkanWindow_Adaptor, QSurfaceFormat>(&QVulkanWindow_Adaptor::cbs_format_c0_0);
    } else {
      return QVulkanWindow::format();
    }
  }

  //  [adaptor impl] QSize QVulkanWindow::size()
  QSize cbs_size_c0_0() const
  {
    return QVulkanWindow::size();
  }

  virtual QSize size() const
  {
    if (cb_size_c0_0.can_issue()) {
      return cb_size_c0_0.issue<QVulkanWindow_Adaptor, QSize>(&QVulkanWindow_Adaptor::cbs_size_c0_0);
    } else {
      return QVulkanWindow::size();
    }
  }

  //  [adaptor impl] QSurface::SurfaceType QVulkanWindow::surfaceType()
  qt_gsi::Converter<QSurface::SurfaceType>::target_type cbs_surfaceType_c0_0() const
  {
    return qt_gsi::CppToQtAdaptor<QSurface::SurfaceType>(QVulkanWindow::surfaceType());
  }

  virtual QSurface::SurfaceType surfaceType() const
  {
    if (cb_surfaceType_c0_0.can_issue()) {
      return qt_gsi::QtToCppAdaptor<QSurface::SurfaceType>(cb_surfaceType_c0_0.issue<QVulkanWindow_Adaptor, qt_gsi::Converter<QSurface::SurfaceType>::target_type>(&QVulkanWindow_Adaptor::cbs_surfaceType_c0_0)).cref();
    } else {
      return QVulkanWindow::surfaceType();
    }
  }

  //  [adaptor impl] void QVulkanWindow::childEvent(QChildEvent *event)
  void cbs_childEvent_1701_0(QChildEvent *event)
  {
    QVulkanWindow::childEvent(event);
  }

  virtual void childEvent(QChildEvent *event)
  {
    if (cb_childEvent_1701_0.can_issue()) {
      cb_childEvent_1701_0.issue<QVulkanWindow_Adaptor, QChildEvent *>(&QVulkanWindow_Adaptor::cbs_childEvent_1701_0, event);
    } else {
      QVulkanWindow::childEvent(event);
    }
  }

  //  [adaptor impl] void QVulkanWindow::closeEvent(QCloseEvent *)
  void cbs_closeEvent_1719_0(QCloseEvent *arg1)
  {
    QVulkanWindow::closeEvent(arg1);
  }

  virtual void closeEvent(QCloseEvent *arg1)
  {
    if (cb_closeEvent_1719_0.can_issue()) {
      cb_closeEvent_1719_0.issue<QVulkanWindow_Adaptor, QCloseEvent *>(&QVulkanWindow_Adaptor::cbs_closeEvent_1719_0, arg1);
    } else {
      QVulkanWindow::closeEvent(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::customEvent(QEvent *event)
  void cbs_customEvent_1217_0(QEvent *event)
  {
    QVulkanWindow::customEvent(event);
  }

  virtual void customEvent(QEvent *event)
  {
    if (cb_customEvent_1217_0.can_issue()) {
      cb_customEvent_1217_0.issue<QVulkanWindow_Adaptor, QEvent *>(&QVulkanWindow_Adaptor::cbs_customEvent_1217_0, event);
    } else {
      QVulkanWindow::customEvent(event);
    }
  }

  //  [adaptor impl] void QVulkanWindow::disconnectNotify(const QMetaMethod &signal)
  void cbs_disconnectNotify_2394_0(const QMetaMethod &signal)
  {
    QVulkanWindow::disconnectNotify(signal);
  }

  virtual void disconnectNotify(const QMetaMethod &signal)
  {
    if (cb_disconnectNotify_2394_0.can_issue()) {
      cb_disconnectNotify_2394_0.issue<QVulkanWindow_Adaptor, const QMetaMethod &>(&QVulkanWindow_Adaptor::cbs_disconnectNotify_2394_0, signal);
    } else {
      QVulkanWindow::disconnectNotify(signal);
    }
  }

  //  [adaptor impl] bool QVulkanWindow::event(QEvent *)
  bool cbs_event_1217_0(QEvent *arg1)
  {
    return QVulkanWindow::event(arg1);
  }

  virtual bool event(QEvent *arg1)
  {
    if (cb_event_1217_0.can_issue()) {
      return cb_event_1217_0.issue<QVulkanWindow_Adaptor, bool, QEvent *>(&QVulkanWindow_Adaptor::cbs_event_1217_0, arg1);
    } else {
      return QVulkanWindow::event(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::exposeEvent(QExposeEvent *)
  void cbs_exposeEvent_1845_0(QExposeEvent *arg1)
  {
    QVulkanWindow::exposeEvent(arg1);
  }

  virtual void exposeEvent(QExposeEvent *arg1)
  {
    if (cb_exposeEvent_1845_0.can_issue()) {
      cb_exposeEvent_1845_0.issue<QVulkanWindow_Adaptor, QExposeEvent *>(&QVulkanWindow_Adaptor::cbs_exposeEvent_1845_0, arg1);
    } else {
      QVulkanWindow::exposeEvent(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::focusInEvent(QFocusEvent *)
  void cbs_focusInEvent_1729_0(QFocusEvent *arg1)
  {
    QVulkanWindow::focusInEvent(arg1);
  }

  virtual void focusInEvent(QFocusEvent *arg1)
  {
    if (cb_focusInEvent_1729_0.can_issue()) {
      cb_focusInEvent_1729_0.issue<QVulkanWindow_Adaptor, QFocusEvent *>(&QVulkanWindow_Adaptor::cbs_focusInEvent_1729_0, arg1);
    } else {
      QVulkanWindow::focusInEvent(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::focusOutEvent(QFocusEvent *)
  void cbs_focusOutEvent_1729_0(QFocusEvent *arg1)
  {
    QVulkanWindow::focusOutEvent(arg1);
  }

  virtual void focusOutEvent(QFocusEvent *arg1)
  {
    if (cb_focusOutEvent_1729_0.can_issue()) {
      cb_focusOutEvent_1729_0.issue<QVulkanWindow_Adaptor, QFocusEvent *>(&QVulkanWindow_Adaptor::cbs_focusOutEvent_1729_0, arg1);
    } else {
      QVulkanWindow::focusOutEvent(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::hideEvent(QHideEvent *)
  void cbs_hideEvent_1595_0(QHideEvent *arg1)
  {
    QVulkanWindow::hideEvent(arg1);
  }

  virtual void hideEvent(QHideEvent *arg1)
  {
    if (cb_hideEvent_1595_0.can_issue()) {
      cb_hideEvent_1595_0.issue<QVulkanWindow_Adaptor, QHideEvent *>(&QVulkanWindow_Adaptor::cbs_hideEvent_1595_0, arg1);
    } else {
      QVulkanWindow::hideEvent(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::keyPressEvent(QKeyEvent *)
  void cbs_keyPressEvent_1514_0(QKeyEvent *arg1)
  {
    QVulkanWindow::keyPressEvent(arg1);
  }

  virtual void keyPressEvent(QKeyEvent *arg1)
  {
    if (cb_keyPressEvent_1514_0.can_issue()) {
      cb_keyPressEvent_1514_0.issue<QVulkanWindow_Adaptor, QKeyEvent *>(&QVulkanWindow_Adaptor::cbs_keyPressEvent_1514_0, arg1);
    } else {
      QVulkanWindow::keyPressEvent(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::keyReleaseEvent(QKeyEvent *)
  void cbs_keyReleaseEvent_1514_0(QKeyEvent *arg1)
  {
    QVulkanWindow::keyReleaseEvent(arg1);
  }

  virtual void keyReleaseEvent(QKeyEvent *arg1)
  {
    if (cb_keyReleaseEvent_1514_0.can_issue()) {
      cb_keyReleaseEvent_1514_0.issue<QVulkanWindow_Adaptor, QKeyEvent *>(&QVulkanWindow_Adaptor::cbs_keyReleaseEvent_1514_0, arg1);
    } else {
      QVulkanWindow::keyReleaseEvent(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::mouseDoubleClickEvent(QMouseEvent *)
  void cbs_mouseDoubleClickEvent_1738_0(QMouseEvent *arg1)
  {
    QVulkanWindow::mouseDoubleClickEvent(arg1);
  }

  virtual void mouseDoubleClickEvent(QMouseEvent *arg1)
  {
    if (cb_mouseDoubleClickEvent_1738_0.can_issue()) {
      cb_mouseDoubleClickEvent_1738_0.issue<QVulkanWindow_Adaptor, QMouseEvent *>(&QVulkanWindow_Adaptor::cbs_mouseDoubleClickEvent_1738_0, arg1);
    } else {
      QVulkanWindow::mouseDoubleClickEvent(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::mouseMoveEvent(QMouseEvent *)
  void cbs_mouseMoveEvent_1738_0(QMouseEvent *arg1)
  {
    QVulkanWindow::mouseMoveEvent(arg1);
  }

  virtual void mouseMoveEvent(QMouseEvent *arg1)
  {
    if (cb_mouseMoveEvent_1738_0.can_issue()) {
      cb_mouseMoveEvent_1738_0.issue<QVulkanWindow_Adaptor, QMouseEvent *>(&QVulkanWindow_Adaptor::cbs_mouseMoveEvent_1738_0, arg1);
    } else {
      QVulkanWindow::mouseMoveEvent(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::mousePressEvent(QMouseEvent *)
  void cbs_mousePressEvent_1738_0(QMouseEvent *arg1)
  {
    QVulkanWindow::mousePressEvent(arg1);
  }

  virtual void mousePressEvent(QMouseEvent *arg1)
  {
    if (cb_mousePressEvent_1738_0.can_issue()) {
      cb_mousePressEvent_1738_0.issue<QVulkanWindow_Adaptor, QMouseEvent *>(&QVulkanWindow_Adaptor::cbs_mousePressEvent_1738_0, arg1);
    } else {
      QVulkanWindow::mousePressEvent(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::mouseReleaseEvent(QMouseEvent *)
  void cbs_mouseReleaseEvent_1738_0(QMouseEvent *arg1)
  {
    QVulkanWindow::mouseReleaseEvent(arg1);
  }

  virtual void mouseReleaseEvent(QMouseEvent *arg1)
  {
    if (cb_mouseReleaseEvent_1738_0.can_issue()) {
      cb_mouseReleaseEvent_1738_0.issue<QVulkanWindow_Adaptor, QMouseEvent *>(&QVulkanWindow_Adaptor::cbs_mouseReleaseEvent_1738_0, arg1);
    } else {
      QVulkanWindow::mouseReleaseEvent(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::moveEvent(QMoveEvent *)
  void cbs_moveEvent_1624_0(QMoveEvent *arg1)
  {
    QVulkanWindow::moveEvent(arg1);
  }

  virtual void moveEvent(QMoveEvent *arg1)
  {
    if (cb_moveEvent_1624_0.can_issue()) {
      cb_moveEvent_1624_0.issue<QVulkanWindow_Adaptor, QMoveEvent *>(&QVulkanWindow_Adaptor::cbs_moveEvent_1624_0, arg1);
    } else {
      QVulkanWindow::moveEvent(arg1);
    }
  }

  //  [adaptor impl] bool QVulkanWindow::nativeEvent(const QByteArray &eventType, void *message, QIntegerForSizeof<void *>::Signed *result)
  bool cbs_nativeEvent_6949_0(const QByteArray &eventType, void *message, QIntegerForSizeof<void *>::Signed *result)
  {
    return QVulkanWindow::nativeEvent(eventType, message, result);
  }

  virtual bool nativeEvent(const QByteArray &eventType, void *message, QIntegerForSizeof<void *>::Signed *result)
  {
    if (cb_nativeEvent_6949_0.can_issue()) {
      return cb_nativeEvent_6949_0.issue<QVulkanWindow_Adaptor, bool, const QByteArray &, void *, QIntegerForSizeof<void *>::Signed *>(&QVulkanWindow_Adaptor::cbs_nativeEvent_6949_0, eventType, message, result);
    } else {
      return QVulkanWindow::nativeEvent(eventType, message, result);
    }
  }

  //  [adaptor impl] void QVulkanWindow::paintEvent(QPaintEvent *)
  void cbs_paintEvent_1725_0(QPaintEvent *arg1)
  {
    QVulkanWindow::paintEvent(arg1);
  }

  virtual void paintEvent(QPaintEvent *arg1)
  {
    if (cb_paintEvent_1725_0.can_issue()) {
      cb_paintEvent_1725_0.issue<QVulkanWindow_Adaptor, QPaintEvent *>(&QVulkanWindow_Adaptor::cbs_paintEvent_1725_0, arg1);
    } else {
      QVulkanWindow::paintEvent(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::resizeEvent(QResizeEvent *)
  void cbs_resizeEvent_1843_0(QResizeEvent *arg1)
  {
    QVulkanWindow::resizeEvent(arg1);
  }

  virtual void resizeEvent(QResizeEvent *arg1)
  {
    if (cb_resizeEvent_1843_0.can_issue()) {
      cb_resizeEvent_1843_0.issue<QVulkanWindow_Adaptor, QResizeEvent *>(&QVulkanWindow_Adaptor::cbs_resizeEvent_1843_0, arg1);
    } else {
      QVulkanWindow::resizeEvent(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::showEvent(QShowEvent *)
  void cbs_showEvent_1634_0(QShowEvent *arg1)
  {
    QVulkanWindow::showEvent(arg1);
  }

  virtual void showEvent(QShowEvent *arg1)
  {
    if (cb_showEvent_1634_0.can_issue()) {
      cb_showEvent_1634_0.issue<QVulkanWindow_Adaptor, QShowEvent *>(&QVulkanWindow_Adaptor::cbs_showEvent_1634_0, arg1);
    } else {
      QVulkanWindow::showEvent(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::tabletEvent(QTabletEvent *)
  void cbs_tabletEvent_1821_0(QTabletEvent *arg1)
  {
    QVulkanWindow::tabletEvent(arg1);
  }

  virtual void tabletEvent(QTabletEvent *arg1)
  {
    if (cb_tabletEvent_1821_0.can_issue()) {
      cb_tabletEvent_1821_0.issue<QVulkanWindow_Adaptor, QTabletEvent *>(&QVulkanWindow_Adaptor::cbs_tabletEvent_1821_0, arg1);
    } else {
      QVulkanWindow::tabletEvent(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::timerEvent(QTimerEvent *event)
  void cbs_timerEvent_1730_0(QTimerEvent *event)
  {
    QVulkanWindow::timerEvent(event);
  }

  virtual void timerEvent(QTimerEvent *event)
  {
    if (cb_timerEvent_1730_0.can_issue()) {
      cb_timerEvent_1730_0.issue<QVulkanWindow_Adaptor, QTimerEvent *>(&QVulkanWindow_Adaptor::cbs_timerEvent_1730_0, event);
    } else {
      QVulkanWindow::timerEvent(event);
    }
  }

  //  [adaptor impl] void QVulkanWindow::touchEvent(QTouchEvent *)
  void cbs_touchEvent_1732_0(QTouchEvent *arg1)
  {
    QVulkanWindow::touchEvent(arg1);
  }

  virtual void touchEvent(QTouchEvent *arg1)
  {
    if (cb_touchEvent_1732_0.can_issue()) {
      cb_touchEvent_1732_0.issue<QVulkanWindow_Adaptor, QTouchEvent *>(&QVulkanWindow_Adaptor::cbs_touchEvent_1732_0, arg1);
    } else {
      QVulkanWindow::touchEvent(arg1);
    }
  }

  //  [adaptor impl] void QVulkanWindow::wheelEvent(QWheelEvent *)
  void cbs_wheelEvent_1718_0(QWheelEvent *arg1)
  {
    QVulkanWindow::wheelEvent(arg1);
  }

  virtual void wheelEvent(QWheelEvent *arg1)
  {
    if (cb_wheelEvent_1718_0.can_issue()) {
      cb_wheelEvent_1718_0.issue<QVulkanWindow_Adaptor, QWheelEvent *>(&QVulkanWindow_Adaptor::cbs_wheelEvent_1718_0, arg1);
    } else {
      QVulkanWindow::wheelEvent(arg1);
    }
  }

  gsi::Callback cb_accessibleRoot_c0_0;
  gsi::Callback cb_createRenderer_0_0;
  gsi::Callback cb_eventFilter_2411_0;
  gsi::Callback cb_focusObject_c0_0;
  gsi::Callback cb_format_c0_0;
  gsi::Callback cb_size_c0_0;
  gsi::Callback cb_surfaceType_c0_0;
  gsi::Callback cb_childEvent_1701_0;
  gsi::Callback cb_closeEvent_1719_0;
  gsi::Callback cb_customEvent_1217_0;
  gsi::Callback cb_disconnectNotify_2394_0;
  gsi::Callback cb_event_1217_0;
  gsi::Callback cb_exposeEvent_1845_0;
  gsi::Callback cb_focusInEvent_1729_0;
  gsi::Callback cb_focusOutEvent_1729_0;
  gsi::Callback cb_hideEvent_1595_0;
  gsi::Callback cb_keyPressEvent_1514_0;
  gsi::Callback cb_keyReleaseEvent_1514_0;
  gsi::Callback cb_mouseDoubleClickEvent_1738_0;
  gsi::Callback cb_mouseMoveEvent_1738_0;
  gsi::Callback cb_mousePressEvent_1738_0;
  gsi::Callback cb_mouseReleaseEvent_1738_0;
  gsi::Callback cb_moveEvent_1624_0;
  gsi::Callback cb_nativeEvent_6949_0;
  gsi::Callback cb_paintEvent_1725_0;
  gsi::Callback cb_resizeEvent_1843_0;
  gsi::Callback cb_showEvent_1634_0;
  gsi::Callback cb_tabletEvent_1821_0;
  gsi::Callback cb_timerEvent_1730_0;
  gsi::Callback cb_touchEvent_1732_0;
  gsi::Callback cb_wheelEvent_1718_0;
};

QVulkanWindow_Adaptor::~QVulkanWindow_Adaptor() { }

//  Constructor QVulkanWindow::QVulkanWindow(QWindow *parent) (adaptor class)

static void _init_ctor_QVulkanWindow_Adaptor_1335 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("parent", true, "nullptr");
  decl->add_arg<QWindow * > (argspec_0);
  decl->set_return_new<QVulkanWindow_Adaptor> ();
}

static void _call_ctor_QVulkanWindow_Adaptor_1335 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QWindow *arg1 = args ? gsi::arg_reader<QWindow * >() (args, heap) : gsi::arg_maker<QWindow * >() (nullptr, heap);
  ret.write<QVulkanWindow_Adaptor *> (new QVulkanWindow_Adaptor (arg1));
}


// QAccessibleInterface *QVulkanWindow::accessibleRoot()

static void _init_cbs_accessibleRoot_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QAccessibleInterface * > ();
}

static void _call_cbs_accessibleRoot_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QAccessibleInterface * > ((QAccessibleInterface *)((QVulkanWindow_Adaptor *)cls)->cbs_accessibleRoot_c0_0 ());
}

static void _set_callback_cbs_accessibleRoot_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_accessibleRoot_c0_0 = cb;
}


// void QVulkanWindow::childEvent(QChildEvent *event)

static void _init_cbs_childEvent_1701_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QChildEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_childEvent_1701_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QChildEvent *arg1 = args.read<QChildEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_childEvent_1701_0 (arg1);
}

static void _set_callback_cbs_childEvent_1701_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_childEvent_1701_0 = cb;
}


// void QVulkanWindow::closeEvent(QCloseEvent *)

static void _init_cbs_closeEvent_1719_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QCloseEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_closeEvent_1719_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QCloseEvent *arg1 = args.read<QCloseEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_closeEvent_1719_0 (arg1);
}

static void _set_callback_cbs_closeEvent_1719_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_closeEvent_1719_0 = cb;
}


// QVulkanWindowRenderer *QVulkanWindow::createRenderer()

static void _init_cbs_createRenderer_0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QVulkanWindowRenderer * > ();
}

static void _call_cbs_createRenderer_0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVulkanWindowRenderer * > ((QVulkanWindowRenderer *)((QVulkanWindow_Adaptor *)cls)->cbs_createRenderer_0_0 ());
}

static void _set_callback_cbs_createRenderer_0_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_createRenderer_0_0 = cb;
}


// void QVulkanWindow::customEvent(QEvent *event)

static void _init_cbs_customEvent_1217_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_customEvent_1217_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QEvent *arg1 = args.read<QEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_customEvent_1217_0 (arg1);
}

static void _set_callback_cbs_customEvent_1217_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_customEvent_1217_0 = cb;
}


// void QVulkanWindow::disconnectNotify(const QMetaMethod &signal)

static void _init_cbs_disconnectNotify_2394_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("signal");
  decl->add_arg<const QMetaMethod & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_disconnectNotify_2394_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QMetaMethod &arg1 = args.read<const QMetaMethod & > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_disconnectNotify_2394_0 (arg1);
}

static void _set_callback_cbs_disconnectNotify_2394_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_disconnectNotify_2394_0 = cb;
}


// bool QVulkanWindow::event(QEvent *)

static void _init_cbs_event_1217_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_event_1217_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QEvent *arg1 = args.read<QEvent * > (heap);
  ret.write<bool > ((bool)((QVulkanWindow_Adaptor *)cls)->cbs_event_1217_0 (arg1));
}

static void _set_callback_cbs_event_1217_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_event_1217_0 = cb;
}


// bool QVulkanWindow::eventFilter(QObject *watched, QEvent *event)

static void _init_cbs_eventFilter_2411_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("watched");
  decl->add_arg<QObject * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("event");
  decl->add_arg<QEvent * > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_cbs_eventFilter_2411_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QObject *arg1 = args.read<QObject * > (heap);
  QEvent *arg2 = args.read<QEvent * > (heap);
  ret.write<bool > ((bool)((QVulkanWindow_Adaptor *)cls)->cbs_eventFilter_2411_0 (arg1, arg2));
}

static void _set_callback_cbs_eventFilter_2411_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_eventFilter_2411_0 = cb;
}


// void QVulkanWindow::exposeEvent(QExposeEvent *)

static void _init_cbs_exposeEvent_1845_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QExposeEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_exposeEvent_1845_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QExposeEvent *arg1 = args.read<QExposeEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_exposeEvent_1845_0 (arg1);
}

static void _set_callback_cbs_exposeEvent_1845_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_exposeEvent_1845_0 = cb;
}


// void QVulkanWindow::focusInEvent(QFocusEvent *)

static void _init_cbs_focusInEvent_1729_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QFocusEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_focusInEvent_1729_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QFocusEvent *arg1 = args.read<QFocusEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_focusInEvent_1729_0 (arg1);
}

static void _set_callback_cbs_focusInEvent_1729_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_focusInEvent_1729_0 = cb;
}


// QObject *QVulkanWindow::focusObject()

static void _init_cbs_focusObject_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QObject * > ();
}

static void _call_cbs_focusObject_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QObject * > ((QObject *)((QVulkanWindow_Adaptor *)cls)->cbs_focusObject_c0_0 ());
}

static void _set_callback_cbs_focusObject_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_focusObject_c0_0 = cb;
}


// void QVulkanWindow::focusOutEvent(QFocusEvent *)

static void _init_cbs_focusOutEvent_1729_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QFocusEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_focusOutEvent_1729_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QFocusEvent *arg1 = args.read<QFocusEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_focusOutEvent_1729_0 (arg1);
}

static void _set_callback_cbs_focusOutEvent_1729_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_focusOutEvent_1729_0 = cb;
}


// QSurfaceFormat QVulkanWindow::format()

static void _init_cbs_format_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QSurfaceFormat > ();
}

static void _call_cbs_format_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QSurfaceFormat > ((QSurfaceFormat)((QVulkanWindow_Adaptor *)cls)->cbs_format_c0_0 ());
}

static void _set_callback_cbs_format_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_format_c0_0 = cb;
}


// void QVulkanWindow::hideEvent(QHideEvent *)

static void _init_cbs_hideEvent_1595_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QHideEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_hideEvent_1595_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QHideEvent *arg1 = args.read<QHideEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_hideEvent_1595_0 (arg1);
}

static void _set_callback_cbs_hideEvent_1595_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_hideEvent_1595_0 = cb;
}


// exposed bool QVulkanWindow::isSignalConnected(const QMetaMethod &signal)

static void _init_fp_isSignalConnected_c2394 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("signal");
  decl->add_arg<const QMetaMethod & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_fp_isSignalConnected_c2394 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QMetaMethod &arg1 = gsi::arg_reader<const QMetaMethod & >() (args, heap);
  ret.write<bool > ((bool)((QVulkanWindow_Adaptor *)cls)->fp_QVulkanWindow_isSignalConnected_c2394 (arg1));
}


// void QVulkanWindow::keyPressEvent(QKeyEvent *)

static void _init_cbs_keyPressEvent_1514_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QKeyEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_keyPressEvent_1514_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QKeyEvent *arg1 = args.read<QKeyEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_keyPressEvent_1514_0 (arg1);
}

static void _set_callback_cbs_keyPressEvent_1514_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_keyPressEvent_1514_0 = cb;
}


// void QVulkanWindow::keyReleaseEvent(QKeyEvent *)

static void _init_cbs_keyReleaseEvent_1514_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QKeyEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_keyReleaseEvent_1514_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QKeyEvent *arg1 = args.read<QKeyEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_keyReleaseEvent_1514_0 (arg1);
}

static void _set_callback_cbs_keyReleaseEvent_1514_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_keyReleaseEvent_1514_0 = cb;
}


// void QVulkanWindow::mouseDoubleClickEvent(QMouseEvent *)

static void _init_cbs_mouseDoubleClickEvent_1738_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QMouseEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_mouseDoubleClickEvent_1738_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QMouseEvent *arg1 = args.read<QMouseEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_mouseDoubleClickEvent_1738_0 (arg1);
}

static void _set_callback_cbs_mouseDoubleClickEvent_1738_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_mouseDoubleClickEvent_1738_0 = cb;
}


// void QVulkanWindow::mouseMoveEvent(QMouseEvent *)

static void _init_cbs_mouseMoveEvent_1738_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QMouseEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_mouseMoveEvent_1738_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QMouseEvent *arg1 = args.read<QMouseEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_mouseMoveEvent_1738_0 (arg1);
}

static void _set_callback_cbs_mouseMoveEvent_1738_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_mouseMoveEvent_1738_0 = cb;
}


// void QVulkanWindow::mousePressEvent(QMouseEvent *)

static void _init_cbs_mousePressEvent_1738_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QMouseEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_mousePressEvent_1738_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QMouseEvent *arg1 = args.read<QMouseEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_mousePressEvent_1738_0 (arg1);
}

static void _set_callback_cbs_mousePressEvent_1738_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_mousePressEvent_1738_0 = cb;
}


// void QVulkanWindow::mouseReleaseEvent(QMouseEvent *)

static void _init_cbs_mouseReleaseEvent_1738_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QMouseEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_mouseReleaseEvent_1738_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QMouseEvent *arg1 = args.read<QMouseEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_mouseReleaseEvent_1738_0 (arg1);
}

static void _set_callback_cbs_mouseReleaseEvent_1738_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_mouseReleaseEvent_1738_0 = cb;
}


// void QVulkanWindow::moveEvent(QMoveEvent *)

static void _init_cbs_moveEvent_1624_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QMoveEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_moveEvent_1624_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QMoveEvent *arg1 = args.read<QMoveEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_moveEvent_1624_0 (arg1);
}

static void _set_callback_cbs_moveEvent_1624_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_moveEvent_1624_0 = cb;
}


// bool QVulkanWindow::nativeEvent(const QByteArray &eventType, void *message, QIntegerForSizeof<void *>::Signed *result)

static void _init_cbs_nativeEvent_6949_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("eventType");
  decl->add_arg<const QByteArray & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("message");
  decl->add_arg<void * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("result");
  decl->add_arg<QIntegerForSizeof<void *>::Signed * > (argspec_2);
  decl->set_return<bool > ();
}

static void _call_cbs_nativeEvent_6949_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QByteArray &arg1 = args.read<const QByteArray & > (heap);
  void *arg2 = args.read<void * > (heap);
  QIntegerForSizeof<void *>::Signed *arg3 = args.read<QIntegerForSizeof<void *>::Signed * > (heap);
  ret.write<bool > ((bool)((QVulkanWindow_Adaptor *)cls)->cbs_nativeEvent_6949_0 (arg1, arg2, arg3));
}

static void _set_callback_cbs_nativeEvent_6949_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_nativeEvent_6949_0 = cb;
}


// void QVulkanWindow::paintEvent(QPaintEvent *)

static void _init_cbs_paintEvent_1725_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QPaintEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_paintEvent_1725_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QPaintEvent *arg1 = args.read<QPaintEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_paintEvent_1725_0 (arg1);
}

static void _set_callback_cbs_paintEvent_1725_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_paintEvent_1725_0 = cb;
}


// exposed int QVulkanWindow::receivers(const char *signal)

static void _init_fp_receivers_c1731 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("signal");
  decl->add_arg<const char * > (argspec_0);
  decl->set_return<int > ();
}

static void _call_fp_receivers_c1731 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const char *arg1 = gsi::arg_reader<const char * >() (args, heap);
  ret.write<int > ((int)((QVulkanWindow_Adaptor *)cls)->fp_QVulkanWindow_receivers_c1731 (arg1));
}


// void QVulkanWindow::resizeEvent(QResizeEvent *)

static void _init_cbs_resizeEvent_1843_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QResizeEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_resizeEvent_1843_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QResizeEvent *arg1 = args.read<QResizeEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_resizeEvent_1843_0 (arg1);
}

static void _set_callback_cbs_resizeEvent_1843_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_resizeEvent_1843_0 = cb;
}


// exposed void *QVulkanWindow::resolveInterface(const char *name, int revision)

static void _init_fp_resolveInterface_c2390 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("name");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("revision");
  decl->add_arg<int > (argspec_1);
  decl->set_return<void * > ();
}

static void _call_fp_resolveInterface_c2390 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const char *arg1 = gsi::arg_reader<const char * >() (args, heap);
  int arg2 = gsi::arg_reader<int >() (args, heap);
  ret.write<void * > ((void *)((QVulkanWindow_Adaptor *)cls)->fp_QVulkanWindow_resolveInterface_c2390 (arg1, arg2));
}


// exposed QObject *QVulkanWindow::sender()

static void _init_fp_sender_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QObject * > ();
}

static void _call_fp_sender_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QObject * > ((QObject *)((QVulkanWindow_Adaptor *)cls)->fp_QVulkanWindow_sender_c0 ());
}


// exposed int QVulkanWindow::senderSignalIndex()

static void _init_fp_senderSignalIndex_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_fp_senderSignalIndex_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<int > ((int)((QVulkanWindow_Adaptor *)cls)->fp_QVulkanWindow_senderSignalIndex_c0 ());
}


// void QVulkanWindow::showEvent(QShowEvent *)

static void _init_cbs_showEvent_1634_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QShowEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_showEvent_1634_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QShowEvent *arg1 = args.read<QShowEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_showEvent_1634_0 (arg1);
}

static void _set_callback_cbs_showEvent_1634_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_showEvent_1634_0 = cb;
}


// QSize QVulkanWindow::size()

static void _init_cbs_size_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QSize > ();
}

static void _call_cbs_size_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QSize > ((QSize)((QVulkanWindow_Adaptor *)cls)->cbs_size_c0_0 ());
}

static void _set_callback_cbs_size_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_size_c0_0 = cb;
}


// QSurface::SurfaceType QVulkanWindow::surfaceType()

static void _init_cbs_surfaceType_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QSurface::SurfaceType>::target_type > ();
}

static void _call_cbs_surfaceType_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QSurface::SurfaceType>::target_type > ((qt_gsi::Converter<QSurface::SurfaceType>::target_type)((QVulkanWindow_Adaptor *)cls)->cbs_surfaceType_c0_0 ());
}

static void _set_callback_cbs_surfaceType_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_surfaceType_c0_0 = cb;
}


// void QVulkanWindow::tabletEvent(QTabletEvent *)

static void _init_cbs_tabletEvent_1821_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QTabletEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_tabletEvent_1821_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QTabletEvent *arg1 = args.read<QTabletEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_tabletEvent_1821_0 (arg1);
}

static void _set_callback_cbs_tabletEvent_1821_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_tabletEvent_1821_0 = cb;
}


// void QVulkanWindow::timerEvent(QTimerEvent *event)

static void _init_cbs_timerEvent_1730_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QTimerEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_timerEvent_1730_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QTimerEvent *arg1 = args.read<QTimerEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_timerEvent_1730_0 (arg1);
}

static void _set_callback_cbs_timerEvent_1730_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_timerEvent_1730_0 = cb;
}


// void QVulkanWindow::touchEvent(QTouchEvent *)

static void _init_cbs_touchEvent_1732_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QTouchEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_touchEvent_1732_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QTouchEvent *arg1 = args.read<QTouchEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_touchEvent_1732_0 (arg1);
}

static void _set_callback_cbs_touchEvent_1732_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_touchEvent_1732_0 = cb;
}


// void QVulkanWindow::wheelEvent(QWheelEvent *)

static void _init_cbs_wheelEvent_1718_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<QWheelEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_wheelEvent_1718_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QWheelEvent *arg1 = args.read<QWheelEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QVulkanWindow_Adaptor *)cls)->cbs_wheelEvent_1718_0 (arg1);
}

static void _set_callback_cbs_wheelEvent_1718_0 (void *cls, const gsi::Callback &cb)
{
  ((QVulkanWindow_Adaptor *)cls)->cb_wheelEvent_1718_0 = cb;
}


namespace gsi
{

gsi::Class<QVulkanWindow> &qtdecl_QVulkanWindow ();

static gsi::Methods methods_QVulkanWindow_Adaptor () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QVulkanWindow::QVulkanWindow(QWindow *parent)\nThis method creates an object of class QVulkanWindow.", &_init_ctor_QVulkanWindow_Adaptor_1335, &_call_ctor_QVulkanWindow_Adaptor_1335);
  methods += new qt_gsi::GenericMethod ("accessibleRoot", "@brief Virtual method QAccessibleInterface *QVulkanWindow::accessibleRoot()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_accessibleRoot_c0_0, &_call_cbs_accessibleRoot_c0_0);
  methods += new qt_gsi::GenericMethod ("accessibleRoot", "@hide", true, &_init_cbs_accessibleRoot_c0_0, &_call_cbs_accessibleRoot_c0_0, &_set_callback_cbs_accessibleRoot_c0_0);
  methods += new qt_gsi::GenericMethod ("*childEvent", "@brief Virtual method void QVulkanWindow::childEvent(QChildEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_childEvent_1701_0, &_call_cbs_childEvent_1701_0);
  methods += new qt_gsi::GenericMethod ("*childEvent", "@hide", false, &_init_cbs_childEvent_1701_0, &_call_cbs_childEvent_1701_0, &_set_callback_cbs_childEvent_1701_0);
  methods += new qt_gsi::GenericMethod ("*closeEvent", "@brief Virtual method void QVulkanWindow::closeEvent(QCloseEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_closeEvent_1719_0, &_call_cbs_closeEvent_1719_0);
  methods += new qt_gsi::GenericMethod ("*closeEvent", "@hide", false, &_init_cbs_closeEvent_1719_0, &_call_cbs_closeEvent_1719_0, &_set_callback_cbs_closeEvent_1719_0);
  methods += new qt_gsi::GenericMethod ("createRenderer", "@brief Virtual method QVulkanWindowRenderer *QVulkanWindow::createRenderer()\nThis method can be reimplemented in a derived class.", false, &_init_cbs_createRenderer_0_0, &_call_cbs_createRenderer_0_0);
  methods += new qt_gsi::GenericMethod ("createRenderer", "@hide", false, &_init_cbs_createRenderer_0_0, &_call_cbs_createRenderer_0_0, &_set_callback_cbs_createRenderer_0_0);
  methods += new qt_gsi::GenericMethod ("*customEvent", "@brief Virtual method void QVulkanWindow::customEvent(QEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_customEvent_1217_0, &_call_cbs_customEvent_1217_0);
  methods += new qt_gsi::GenericMethod ("*customEvent", "@hide", false, &_init_cbs_customEvent_1217_0, &_call_cbs_customEvent_1217_0, &_set_callback_cbs_customEvent_1217_0);
  methods += new qt_gsi::GenericMethod ("*disconnectNotify", "@brief Virtual method void QVulkanWindow::disconnectNotify(const QMetaMethod &signal)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_disconnectNotify_2394_0, &_call_cbs_disconnectNotify_2394_0);
  methods += new qt_gsi::GenericMethod ("*disconnectNotify", "@hide", false, &_init_cbs_disconnectNotify_2394_0, &_call_cbs_disconnectNotify_2394_0, &_set_callback_cbs_disconnectNotify_2394_0);
  methods += new qt_gsi::GenericMethod ("*event", "@brief Virtual method bool QVulkanWindow::event(QEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_event_1217_0, &_call_cbs_event_1217_0);
  methods += new qt_gsi::GenericMethod ("*event", "@hide", false, &_init_cbs_event_1217_0, &_call_cbs_event_1217_0, &_set_callback_cbs_event_1217_0);
  methods += new qt_gsi::GenericMethod ("eventFilter", "@brief Virtual method bool QVulkanWindow::eventFilter(QObject *watched, QEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_eventFilter_2411_0, &_call_cbs_eventFilter_2411_0);
  methods += new qt_gsi::GenericMethod ("eventFilter", "@hide", false, &_init_cbs_eventFilter_2411_0, &_call_cbs_eventFilter_2411_0, &_set_callback_cbs_eventFilter_2411_0);
  methods += new qt_gsi::GenericMethod ("*exposeEvent", "@brief Virtual method void QVulkanWindow::exposeEvent(QExposeEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_exposeEvent_1845_0, &_call_cbs_exposeEvent_1845_0);
  methods += new qt_gsi::GenericMethod ("*exposeEvent", "@hide", false, &_init_cbs_exposeEvent_1845_0, &_call_cbs_exposeEvent_1845_0, &_set_callback_cbs_exposeEvent_1845_0);
  methods += new qt_gsi::GenericMethod ("*focusInEvent", "@brief Virtual method void QVulkanWindow::focusInEvent(QFocusEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_focusInEvent_1729_0, &_call_cbs_focusInEvent_1729_0);
  methods += new qt_gsi::GenericMethod ("*focusInEvent", "@hide", false, &_init_cbs_focusInEvent_1729_0, &_call_cbs_focusInEvent_1729_0, &_set_callback_cbs_focusInEvent_1729_0);
  methods += new qt_gsi::GenericMethod ("focusObject", "@brief Virtual method QObject *QVulkanWindow::focusObject()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_focusObject_c0_0, &_call_cbs_focusObject_c0_0);
  methods += new qt_gsi::GenericMethod ("focusObject", "@hide", true, &_init_cbs_focusObject_c0_0, &_call_cbs_focusObject_c0_0, &_set_callback_cbs_focusObject_c0_0);
  methods += new qt_gsi::GenericMethod ("*focusOutEvent", "@brief Virtual method void QVulkanWindow::focusOutEvent(QFocusEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_focusOutEvent_1729_0, &_call_cbs_focusOutEvent_1729_0);
  methods += new qt_gsi::GenericMethod ("*focusOutEvent", "@hide", false, &_init_cbs_focusOutEvent_1729_0, &_call_cbs_focusOutEvent_1729_0, &_set_callback_cbs_focusOutEvent_1729_0);
  methods += new qt_gsi::GenericMethod ("format", "@brief Virtual method QSurfaceFormat QVulkanWindow::format()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_format_c0_0, &_call_cbs_format_c0_0);
  methods += new qt_gsi::GenericMethod ("format", "@hide", true, &_init_cbs_format_c0_0, &_call_cbs_format_c0_0, &_set_callback_cbs_format_c0_0);
  methods += new qt_gsi::GenericMethod ("*hideEvent", "@brief Virtual method void QVulkanWindow::hideEvent(QHideEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_hideEvent_1595_0, &_call_cbs_hideEvent_1595_0);
  methods += new qt_gsi::GenericMethod ("*hideEvent", "@hide", false, &_init_cbs_hideEvent_1595_0, &_call_cbs_hideEvent_1595_0, &_set_callback_cbs_hideEvent_1595_0);
  methods += new qt_gsi::GenericMethod ("*isSignalConnected", "@brief Method bool QVulkanWindow::isSignalConnected(const QMetaMethod &signal)\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_isSignalConnected_c2394, &_call_fp_isSignalConnected_c2394);
  methods += new qt_gsi::GenericMethod ("*keyPressEvent", "@brief Virtual method void QVulkanWindow::keyPressEvent(QKeyEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_keyPressEvent_1514_0, &_call_cbs_keyPressEvent_1514_0);
  methods += new qt_gsi::GenericMethod ("*keyPressEvent", "@hide", false, &_init_cbs_keyPressEvent_1514_0, &_call_cbs_keyPressEvent_1514_0, &_set_callback_cbs_keyPressEvent_1514_0);
  methods += new qt_gsi::GenericMethod ("*keyReleaseEvent", "@brief Virtual method void QVulkanWindow::keyReleaseEvent(QKeyEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_keyReleaseEvent_1514_0, &_call_cbs_keyReleaseEvent_1514_0);
  methods += new qt_gsi::GenericMethod ("*keyReleaseEvent", "@hide", false, &_init_cbs_keyReleaseEvent_1514_0, &_call_cbs_keyReleaseEvent_1514_0, &_set_callback_cbs_keyReleaseEvent_1514_0);
  methods += new qt_gsi::GenericMethod ("*mouseDoubleClickEvent", "@brief Virtual method void QVulkanWindow::mouseDoubleClickEvent(QMouseEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_mouseDoubleClickEvent_1738_0, &_call_cbs_mouseDoubleClickEvent_1738_0);
  methods += new qt_gsi::GenericMethod ("*mouseDoubleClickEvent", "@hide", false, &_init_cbs_mouseDoubleClickEvent_1738_0, &_call_cbs_mouseDoubleClickEvent_1738_0, &_set_callback_cbs_mouseDoubleClickEvent_1738_0);
  methods += new qt_gsi::GenericMethod ("*mouseMoveEvent", "@brief Virtual method void QVulkanWindow::mouseMoveEvent(QMouseEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_mouseMoveEvent_1738_0, &_call_cbs_mouseMoveEvent_1738_0);
  methods += new qt_gsi::GenericMethod ("*mouseMoveEvent", "@hide", false, &_init_cbs_mouseMoveEvent_1738_0, &_call_cbs_mouseMoveEvent_1738_0, &_set_callback_cbs_mouseMoveEvent_1738_0);
  methods += new qt_gsi::GenericMethod ("*mousePressEvent", "@brief Virtual method void QVulkanWindow::mousePressEvent(QMouseEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_mousePressEvent_1738_0, &_call_cbs_mousePressEvent_1738_0);
  methods += new qt_gsi::GenericMethod ("*mousePressEvent", "@hide", false, &_init_cbs_mousePressEvent_1738_0, &_call_cbs_mousePressEvent_1738_0, &_set_callback_cbs_mousePressEvent_1738_0);
  methods += new qt_gsi::GenericMethod ("*mouseReleaseEvent", "@brief Virtual method void QVulkanWindow::mouseReleaseEvent(QMouseEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_mouseReleaseEvent_1738_0, &_call_cbs_mouseReleaseEvent_1738_0);
  methods += new qt_gsi::GenericMethod ("*mouseReleaseEvent", "@hide", false, &_init_cbs_mouseReleaseEvent_1738_0, &_call_cbs_mouseReleaseEvent_1738_0, &_set_callback_cbs_mouseReleaseEvent_1738_0);
  methods += new qt_gsi::GenericMethod ("*moveEvent", "@brief Virtual method void QVulkanWindow::moveEvent(QMoveEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_moveEvent_1624_0, &_call_cbs_moveEvent_1624_0);
  methods += new qt_gsi::GenericMethod ("*moveEvent", "@hide", false, &_init_cbs_moveEvent_1624_0, &_call_cbs_moveEvent_1624_0, &_set_callback_cbs_moveEvent_1624_0);
  methods += new qt_gsi::GenericMethod ("*nativeEvent", "@brief Virtual method bool QVulkanWindow::nativeEvent(const QByteArray &eventType, void *message, QIntegerForSizeof<void *>::Signed *result)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_nativeEvent_6949_0, &_call_cbs_nativeEvent_6949_0);
  methods += new qt_gsi::GenericMethod ("*nativeEvent", "@hide", false, &_init_cbs_nativeEvent_6949_0, &_call_cbs_nativeEvent_6949_0, &_set_callback_cbs_nativeEvent_6949_0);
  methods += new qt_gsi::GenericMethod ("*paintEvent", "@brief Virtual method void QVulkanWindow::paintEvent(QPaintEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_paintEvent_1725_0, &_call_cbs_paintEvent_1725_0);
  methods += new qt_gsi::GenericMethod ("*paintEvent", "@hide", false, &_init_cbs_paintEvent_1725_0, &_call_cbs_paintEvent_1725_0, &_set_callback_cbs_paintEvent_1725_0);
  methods += new qt_gsi::GenericMethod ("*receivers", "@brief Method int QVulkanWindow::receivers(const char *signal)\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_receivers_c1731, &_call_fp_receivers_c1731);
  methods += new qt_gsi::GenericMethod ("*resizeEvent", "@brief Virtual method void QVulkanWindow::resizeEvent(QResizeEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_resizeEvent_1843_0, &_call_cbs_resizeEvent_1843_0);
  methods += new qt_gsi::GenericMethod ("*resizeEvent", "@hide", false, &_init_cbs_resizeEvent_1843_0, &_call_cbs_resizeEvent_1843_0, &_set_callback_cbs_resizeEvent_1843_0);
  methods += new qt_gsi::GenericMethod ("*resolveInterface", "@brief Method void *QVulkanWindow::resolveInterface(const char *name, int revision)\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_resolveInterface_c2390, &_call_fp_resolveInterface_c2390);
  methods += new qt_gsi::GenericMethod ("*sender", "@brief Method QObject *QVulkanWindow::sender()\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_sender_c0, &_call_fp_sender_c0);
  methods += new qt_gsi::GenericMethod ("*senderSignalIndex", "@brief Method int QVulkanWindow::senderSignalIndex()\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_senderSignalIndex_c0, &_call_fp_senderSignalIndex_c0);
  methods += new qt_gsi::GenericMethod ("*showEvent", "@brief Virtual method void QVulkanWindow::showEvent(QShowEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_showEvent_1634_0, &_call_cbs_showEvent_1634_0);
  methods += new qt_gsi::GenericMethod ("*showEvent", "@hide", false, &_init_cbs_showEvent_1634_0, &_call_cbs_showEvent_1634_0, &_set_callback_cbs_showEvent_1634_0);
  methods += new qt_gsi::GenericMethod ("size", "@brief Virtual method QSize QVulkanWindow::size()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_size_c0_0, &_call_cbs_size_c0_0);
  methods += new qt_gsi::GenericMethod ("size", "@hide", true, &_init_cbs_size_c0_0, &_call_cbs_size_c0_0, &_set_callback_cbs_size_c0_0);
  methods += new qt_gsi::GenericMethod ("surfaceType", "@brief Virtual method QSurface::SurfaceType QVulkanWindow::surfaceType()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_surfaceType_c0_0, &_call_cbs_surfaceType_c0_0);
  methods += new qt_gsi::GenericMethod ("surfaceType", "@hide", true, &_init_cbs_surfaceType_c0_0, &_call_cbs_surfaceType_c0_0, &_set_callback_cbs_surfaceType_c0_0);
  methods += new qt_gsi::GenericMethod ("*tabletEvent", "@brief Virtual method void QVulkanWindow::tabletEvent(QTabletEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_tabletEvent_1821_0, &_call_cbs_tabletEvent_1821_0);
  methods += new qt_gsi::GenericMethod ("*tabletEvent", "@hide", false, &_init_cbs_tabletEvent_1821_0, &_call_cbs_tabletEvent_1821_0, &_set_callback_cbs_tabletEvent_1821_0);
  methods += new qt_gsi::GenericMethod ("*timerEvent", "@brief Virtual method void QVulkanWindow::timerEvent(QTimerEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_timerEvent_1730_0, &_call_cbs_timerEvent_1730_0);
  methods += new qt_gsi::GenericMethod ("*timerEvent", "@hide", false, &_init_cbs_timerEvent_1730_0, &_call_cbs_timerEvent_1730_0, &_set_callback_cbs_timerEvent_1730_0);
  methods += new qt_gsi::GenericMethod ("*touchEvent", "@brief Virtual method void QVulkanWindow::touchEvent(QTouchEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_touchEvent_1732_0, &_call_cbs_touchEvent_1732_0);
  methods += new qt_gsi::GenericMethod ("*touchEvent", "@hide", false, &_init_cbs_touchEvent_1732_0, &_call_cbs_touchEvent_1732_0, &_set_callback_cbs_touchEvent_1732_0);
  methods += new qt_gsi::GenericMethod ("*wheelEvent", "@brief Virtual method void QVulkanWindow::wheelEvent(QWheelEvent *)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_wheelEvent_1718_0, &_call_cbs_wheelEvent_1718_0);
  methods += new qt_gsi::GenericMethod ("*wheelEvent", "@hide", false, &_init_cbs_wheelEvent_1718_0, &_call_cbs_wheelEvent_1718_0, &_set_callback_cbs_wheelEvent_1718_0);
  return methods;
}

gsi::Class<QVulkanWindow_Adaptor> decl_QVulkanWindow_Adaptor (qtdecl_QVulkanWindow (), "QtGui", "QVulkanWindow",
  methods_QVulkanWindow_Adaptor (),
  "@qt\n@brief Binding of QVulkanWindow");

}


//  Implementation of the enum wrapper class for QVulkanWindow::Flag
namespace qt_gsi
{

static gsi::Enum<QVulkanWindow::Flag> decl_QVulkanWindow_Flag_Enum ("QtGui", "QVulkanWindow_Flag",
    gsi::enum_const ("PersistentResources", QVulkanWindow::PersistentResources, "@brief Enum constant QVulkanWindow::PersistentResources"),
  "@qt\n@brief This class represents the QVulkanWindow::Flag enum");

static gsi::QFlagsClass<QVulkanWindow::Flag > decl_QVulkanWindow_Flag_Enums ("QtGui", "QVulkanWindow_QFlags_Flag",
  "@qt\n@brief This class represents the QFlags<QVulkanWindow::Flag> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<QVulkanWindow> inject_QVulkanWindow_Flag_Enum_in_parent (decl_QVulkanWindow_Flag_Enum.defs ());
static gsi::ClassExt<QVulkanWindow> decl_QVulkanWindow_Flag_Enum_as_child (decl_QVulkanWindow_Flag_Enum, "Flag");
static gsi::ClassExt<QVulkanWindow> decl_QVulkanWindow_Flag_Enums_as_child (decl_QVulkanWindow_Flag_Enums, "QFlags_Flag");

}

