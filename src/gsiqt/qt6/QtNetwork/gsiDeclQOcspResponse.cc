
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQOcspResponse.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QOcspResponse>
#include <QSslCertificate>
#include "gsiQt.h"
#include "gsiQtNetworkCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QOcspResponse

//  Constructor QOcspResponse::QOcspResponse()


static void _init_ctor_QOcspResponse_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QOcspResponse> ();
}

static void _call_ctor_QOcspResponse_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QOcspResponse *> (new QOcspResponse ());
}


//  Constructor QOcspResponse::QOcspResponse(const QOcspResponse &other)


static void _init_ctor_QOcspResponse_2646 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QOcspResponse & > (argspec_0);
  decl->set_return_new<QOcspResponse> ();
}

static void _call_ctor_QOcspResponse_2646 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QOcspResponse &arg1 = gsi::arg_reader<const QOcspResponse & >() (args, heap);
  ret.write<QOcspResponse *> (new QOcspResponse (arg1));
}


// QOcspCertificateStatus QOcspResponse::certificateStatus()


static void _init_f_certificateStatus_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QOcspCertificateStatus>::target_type > ();
}

static void _call_f_certificateStatus_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QOcspCertificateStatus>::target_type > ((qt_gsi::Converter<QOcspCertificateStatus>::target_type)qt_gsi::CppToQtAdaptor<QOcspCertificateStatus>(((QOcspResponse *)cls)->certificateStatus ()));
}


// QOcspResponse &QOcspResponse::operator =(const QOcspResponse &other)


static void _init_f_operator_eq__2646 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QOcspResponse & > (argspec_0);
  decl->set_return<QOcspResponse & > ();
}

static void _call_f_operator_eq__2646 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QOcspResponse &arg1 = gsi::arg_reader<const QOcspResponse & >() (args, heap);
  ret.write<QOcspResponse & > ((QOcspResponse &)((QOcspResponse *)cls)->operator = (arg1));
}


// class QSslCertificate QOcspResponse::responder()


static void _init_f_responder_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<class QSslCertificate > ();
}

static void _call_f_responder_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<class QSslCertificate > ((class QSslCertificate)((QOcspResponse *)cls)->responder ());
}


// QOcspRevocationReason QOcspResponse::revocationReason()


static void _init_f_revocationReason_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QOcspRevocationReason>::target_type > ();
}

static void _call_f_revocationReason_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QOcspRevocationReason>::target_type > ((qt_gsi::Converter<QOcspRevocationReason>::target_type)qt_gsi::CppToQtAdaptor<QOcspRevocationReason>(((QOcspResponse *)cls)->revocationReason ()));
}


// QOcspResponse::QSslCertificate QOcspResponse::subject()


static void _init_f_subject_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QOcspResponse::QSslCertificate > ();
}

static void _call_f_subject_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QOcspResponse::QSslCertificate > ((QOcspResponse::QSslCertificate)((QOcspResponse *)cls)->subject ());
}


// void QOcspResponse::swap(QOcspResponse &other)


static void _init_f_swap_1951 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<QOcspResponse & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_swap_1951 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QOcspResponse &arg1 = gsi::arg_reader<QOcspResponse & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QOcspResponse *)cls)->swap (arg1);
}



namespace gsi
{

static gsi::Methods methods_QOcspResponse () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QOcspResponse::QOcspResponse()\nThis method creates an object of class QOcspResponse.", &_init_ctor_QOcspResponse_0, &_call_ctor_QOcspResponse_0);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QOcspResponse::QOcspResponse(const QOcspResponse &other)\nThis method creates an object of class QOcspResponse.", &_init_ctor_QOcspResponse_2646, &_call_ctor_QOcspResponse_2646);
  methods += new qt_gsi::GenericMethod ("certificateStatus", "@brief Method QOcspCertificateStatus QOcspResponse::certificateStatus()\n", true, &_init_f_certificateStatus_c0, &_call_f_certificateStatus_c0);
  methods += new qt_gsi::GenericMethod ("assign", "@brief Method QOcspResponse &QOcspResponse::operator =(const QOcspResponse &other)\n", false, &_init_f_operator_eq__2646, &_call_f_operator_eq__2646);
  methods += new qt_gsi::GenericMethod ("responder", "@brief Method class QSslCertificate QOcspResponse::responder()\n", true, &_init_f_responder_c0, &_call_f_responder_c0);
  methods += new qt_gsi::GenericMethod ("revocationReason", "@brief Method QOcspRevocationReason QOcspResponse::revocationReason()\n", true, &_init_f_revocationReason_c0, &_call_f_revocationReason_c0);
  methods += new qt_gsi::GenericMethod ("subject", "@brief Method QOcspResponse::QSslCertificate QOcspResponse::subject()\n", true, &_init_f_subject_c0, &_call_f_subject_c0);
  methods += new qt_gsi::GenericMethod ("swap", "@brief Method void QOcspResponse::swap(QOcspResponse &other)\n", false, &_init_f_swap_1951, &_call_f_swap_1951);
  return methods;
}

gsi::Class<QOcspResponse> decl_QOcspResponse ("QtNetwork", "QOcspResponse",
  methods_QOcspResponse (),
  "@qt\n@brief Binding of QOcspResponse");


GSI_QTNETWORK_PUBLIC gsi::Class<QOcspResponse> &qtdecl_QOcspResponse () { return decl_QOcspResponse; }

}

