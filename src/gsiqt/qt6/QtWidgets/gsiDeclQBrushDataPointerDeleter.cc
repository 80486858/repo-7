
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQBrushDataPointerDeleter.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QBrushDataPointerDeleter>
#include "gsiQt.h"
#include "gsiQtCommon.h"
#include "gsiDeclQtTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// struct QBrushDataPointerDeleter

//  Constructor QBrushDataPointerDeleter::QBrushDataPointerDeleter()


static void _init_ctor_QBrushDataPointerDeleter_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QBrushDataPointerDeleter> ();
}

static void _call_ctor_QBrushDataPointerDeleter_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QBrushDataPointerDeleter *> (new QBrushDataPointerDeleter ());
}


// void QBrushDataPointerDeleter::operator()(QBrushData *d)


static void _init_f_operator_func__c1597 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("d");
  decl->add_arg<QBrushData * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_operator_func__c1597 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QBrushData *arg1 = gsi::arg_reader<QBrushData * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QBrushDataPointerDeleter *)cls)->operator() (arg1);
}



namespace gsi
{

static gsi::Methods methods_QBrushDataPointerDeleter () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QBrushDataPointerDeleter::QBrushDataPointerDeleter()\nThis method creates an object of class QBrushDataPointerDeleter.", &_init_ctor_QBrushDataPointerDeleter_0, &_call_ctor_QBrushDataPointerDeleter_0);
  methods += new qt_gsi::GenericMethod ("()", "@brief Method void QBrushDataPointerDeleter::operator()(QBrushData *d)\n", true, &_init_f_operator_func__c1597, &_call_f_operator_func__c1597);
  return methods;
}

gsi::Class<QBrushDataPointerDeleter> decl_QBrushDataPointerDeleter ("Qt", "QBrushDataPointerDeleter",
  methods_QBrushDataPointerDeleter (),
  "@qt\n@brief Binding of QBrushDataPointerDeleter");


GSI_QT_PUBLIC gsi::Class<QBrushDataPointerDeleter> &qtdecl_QBrushDataPointerDeleter () { return decl_QBrushDataPointerDeleter; }

}

