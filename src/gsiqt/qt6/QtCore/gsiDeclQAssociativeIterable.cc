
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQAssociativeIterable.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QAssociativeIterable>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include "gsiDeclQtCoreTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QAssociativeIterable

// QAssociativeIterable::const_iterator QAssociativeIterable::constBegin()


static void _init_f_constBegin_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QAssociativeIterable::const_iterator > ();
}

static void _call_f_constBegin_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QAssociativeIterable::const_iterator > ((QAssociativeIterable::const_iterator)((QAssociativeIterable *)cls)->constBegin ());
}


// QAssociativeIterable::const_iterator QAssociativeIterable::constEnd()


static void _init_f_constEnd_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QAssociativeIterable::const_iterator > ();
}

static void _call_f_constEnd_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QAssociativeIterable::const_iterator > ((QAssociativeIterable::const_iterator)((QAssociativeIterable *)cls)->constEnd ());
}


// QAssociativeIterable::const_iterator QAssociativeIterable::constFind(const QVariant &key)


static void _init_f_constFind_c2119 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<const QVariant & > (argspec_0);
  decl->set_return<QAssociativeIterable::const_iterator > ();
}

static void _call_f_constFind_c2119 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QVariant &arg1 = gsi::arg_reader<const QVariant & >() (args, heap);
  ret.write<QAssociativeIterable::const_iterator > ((QAssociativeIterable::const_iterator)((QAssociativeIterable *)cls)->constFind (arg1));
}


// bool QAssociativeIterable::containsKey(const QVariant &key)


static void _init_f_containsKey_2119 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<const QVariant & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_containsKey_2119 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QVariant &arg1 = gsi::arg_reader<const QVariant & >() (args, heap);
  ret.write<bool > ((bool)((QAssociativeIterable *)cls)->containsKey (arg1));
}


// void QAssociativeIterable::insertKey(const QVariant &key)


static void _init_f_insertKey_2119 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<const QVariant & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_insertKey_2119 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QVariant &arg1 = gsi::arg_reader<const QVariant & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QAssociativeIterable *)cls)->insertKey (arg1);
}


// QAssociativeIterable::iterator QAssociativeIterable::mutableBegin()


static void _init_f_mutableBegin_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QAssociativeIterable::iterator > ();
}

static void _call_f_mutableBegin_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QAssociativeIterable::iterator > ((QAssociativeIterable::iterator)((QAssociativeIterable *)cls)->mutableBegin ());
}


// QAssociativeIterable::iterator QAssociativeIterable::mutableEnd()


static void _init_f_mutableEnd_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QAssociativeIterable::iterator > ();
}

static void _call_f_mutableEnd_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QAssociativeIterable::iterator > ((QAssociativeIterable::iterator)((QAssociativeIterable *)cls)->mutableEnd ());
}


// QAssociativeIterable::iterator QAssociativeIterable::mutableFind(const QVariant &key)


static void _init_f_mutableFind_2119 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<const QVariant & > (argspec_0);
  decl->set_return<QAssociativeIterable::iterator > ();
}

static void _call_f_mutableFind_2119 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QVariant &arg1 = gsi::arg_reader<const QVariant & >() (args, heap);
  ret.write<QAssociativeIterable::iterator > ((QAssociativeIterable::iterator)((QAssociativeIterable *)cls)->mutableFind (arg1));
}


// void QAssociativeIterable::removeKey(const QVariant &key)


static void _init_f_removeKey_2119 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<const QVariant & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_removeKey_2119 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QVariant &arg1 = gsi::arg_reader<const QVariant & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QAssociativeIterable *)cls)->removeKey (arg1);
}


// void QAssociativeIterable::setValue(const QVariant &key, const QVariant &mapped)


static void _init_f_setValue_4130 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<const QVariant & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("mapped");
  decl->add_arg<const QVariant & > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_setValue_4130 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QVariant &arg1 = gsi::arg_reader<const QVariant & >() (args, heap);
  const QVariant &arg2 = gsi::arg_reader<const QVariant & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QAssociativeIterable *)cls)->setValue (arg1, arg2);
}


// QVariant QAssociativeIterable::value(const QVariant &key)


static void _init_f_value_c2119 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<const QVariant & > (argspec_0);
  decl->set_return<QVariant > ();
}

static void _call_f_value_c2119 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QVariant &arg1 = gsi::arg_reader<const QVariant & >() (args, heap);
  ret.write<QVariant > ((QVariant)((QAssociativeIterable *)cls)->value (arg1));
}



namespace gsi
{

static gsi::Methods methods_QAssociativeIterable () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericMethod ("constBegin", "@brief Method QAssociativeIterable::const_iterator QAssociativeIterable::constBegin()\n", true, &_init_f_constBegin_c0, &_call_f_constBegin_c0);
  methods += new qt_gsi::GenericMethod ("constEnd", "@brief Method QAssociativeIterable::const_iterator QAssociativeIterable::constEnd()\n", true, &_init_f_constEnd_c0, &_call_f_constEnd_c0);
  methods += new qt_gsi::GenericMethod ("constFind", "@brief Method QAssociativeIterable::const_iterator QAssociativeIterable::constFind(const QVariant &key)\n", true, &_init_f_constFind_c2119, &_call_f_constFind_c2119);
  methods += new qt_gsi::GenericMethod ("containsKey", "@brief Method bool QAssociativeIterable::containsKey(const QVariant &key)\n", false, &_init_f_containsKey_2119, &_call_f_containsKey_2119);
  methods += new qt_gsi::GenericMethod ("insertKey", "@brief Method void QAssociativeIterable::insertKey(const QVariant &key)\n", false, &_init_f_insertKey_2119, &_call_f_insertKey_2119);
  methods += new qt_gsi::GenericMethod ("mutableBegin", "@brief Method QAssociativeIterable::iterator QAssociativeIterable::mutableBegin()\n", false, &_init_f_mutableBegin_0, &_call_f_mutableBegin_0);
  methods += new qt_gsi::GenericMethod ("mutableEnd", "@brief Method QAssociativeIterable::iterator QAssociativeIterable::mutableEnd()\n", false, &_init_f_mutableEnd_0, &_call_f_mutableEnd_0);
  methods += new qt_gsi::GenericMethod ("mutableFind", "@brief Method QAssociativeIterable::iterator QAssociativeIterable::mutableFind(const QVariant &key)\n", false, &_init_f_mutableFind_2119, &_call_f_mutableFind_2119);
  methods += new qt_gsi::GenericMethod ("removeKey", "@brief Method void QAssociativeIterable::removeKey(const QVariant &key)\n", false, &_init_f_removeKey_2119, &_call_f_removeKey_2119);
  methods += new qt_gsi::GenericMethod ("setValue", "@brief Method void QAssociativeIterable::setValue(const QVariant &key, const QVariant &mapped)\n", false, &_init_f_setValue_4130, &_call_f_setValue_4130);
  methods += new qt_gsi::GenericMethod ("value", "@brief Method QVariant QAssociativeIterable::value(const QVariant &key)\n", true, &_init_f_value_c2119, &_call_f_value_c2119);
  return methods;
}

gsi::Class<QIterable<QMetaAssociation>> &qtdecl_QIterable<QMetaAssociation> ();

gsi::Class<QAssociativeIterable> decl_QAssociativeIterable (qtdecl_QIterable<QMetaAssociation> (), "QtCore", "QAssociativeIterable",
  methods_QAssociativeIterable (),
  "@qt\n@brief Binding of QAssociativeIterable");


GSI_QTCORE_PUBLIC gsi::Class<QAssociativeIterable> &qtdecl_QAssociativeIterable () { return decl_QAssociativeIterable; }

}

