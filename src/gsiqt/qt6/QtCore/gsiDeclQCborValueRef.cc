
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQCborValueRef.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QCborValueRef>
#include <QCborArray>
#include <QCborMap>
#include <QCborStreamWriter>
#include <QCborValue>
#include <QDateTime>
#include <QJsonValue>
#include <QRegularExpression>
#include <QUrl>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include "gsiDeclQtCoreTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QCborValueRef

//  Constructor QCborValueRef::QCborValueRef(const QCborValueRef &)


static void _init_ctor_QCborValueRef_2578 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<const QCborValueRef & > (argspec_0);
  decl->set_return_new<QCborValueRef> ();
}

static void _call_ctor_QCborValueRef_2578 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QCborValueRef &arg1 = gsi::arg_reader<const QCborValueRef & >() (args, heap);
  ret.write<QCborValueRef *> (new QCborValueRef (arg1));
}


// int QCborValueRef::compare(const QCborValue &other)


static void _init_f_compare_c2293 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QCborValue & > (argspec_0);
  decl->set_return<int > ();
}

static void _call_f_compare_c2293 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QCborValue &arg1 = gsi::arg_reader<const QCborValue & >() (args, heap);
  ret.write<int > ((int)((QCborValueRef *)cls)->compare (arg1));
}


// bool QCborValueRef::isArray()


static void _init_f_isArray_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isArray_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isArray ());
}


// bool QCborValueRef::isBool()


static void _init_f_isBool_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isBool_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isBool ());
}


// bool QCborValueRef::isByteArray()


static void _init_f_isByteArray_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isByteArray_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isByteArray ());
}


// bool QCborValueRef::isContainer()


static void _init_f_isContainer_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isContainer_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isContainer ());
}


// bool QCborValueRef::isDateTime()


static void _init_f_isDateTime_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isDateTime_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isDateTime ());
}


// bool QCborValueRef::isDouble()


static void _init_f_isDouble_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isDouble_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isDouble ());
}


// bool QCborValueRef::isFalse()


static void _init_f_isFalse_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isFalse_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isFalse ());
}


// bool QCborValueRef::isInteger()


static void _init_f_isInteger_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isInteger_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isInteger ());
}


// bool QCborValueRef::isInvalid()


static void _init_f_isInvalid_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isInvalid_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isInvalid ());
}


// bool QCborValueRef::isMap()


static void _init_f_isMap_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isMap_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isMap ());
}


// bool QCborValueRef::isNull()


static void _init_f_isNull_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isNull_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isNull ());
}


// bool QCborValueRef::isRegularExpression()


static void _init_f_isRegularExpression_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isRegularExpression_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isRegularExpression ());
}


// bool QCborValueRef::isSimpleType()


static void _init_f_isSimpleType_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isSimpleType_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isSimpleType ());
}


// bool QCborValueRef::isSimpleType(QCborSimpleType st)


static void _init_f_isSimpleType_c1943 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("st");
  decl->add_arg<const qt_gsi::Converter<QCborSimpleType>::target_type & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_isSimpleType_c1943 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QCborSimpleType>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QCborSimpleType>::target_type & >() (args, heap);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isSimpleType (qt_gsi::QtToCppAdaptor<QCborSimpleType>(arg1).cref()));
}


// bool QCborValueRef::isString()


static void _init_f_isString_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isString_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isString ());
}


// bool QCborValueRef::isTag()


static void _init_f_isTag_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isTag_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isTag ());
}


// bool QCborValueRef::isTrue()


static void _init_f_isTrue_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isTrue_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isTrue ());
}


// bool QCborValueRef::isUndefined()


static void _init_f_isUndefined_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isUndefined_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isUndefined ());
}


// bool QCborValueRef::isUrl()


static void _init_f_isUrl_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isUrl_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isUrl ());
}


// bool QCborValueRef::isUuid()


static void _init_f_isUuid_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isUuid_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->isUuid ());
}


// bool QCborValueRef::operator!=(const QCborValue &other)


static void _init_f_operator_excl__eq__c2293 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QCborValue & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_operator_excl__eq__c2293 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QCborValue &arg1 = gsi::arg_reader<const QCborValue & >() (args, heap);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->operator!= (arg1));
}


// bool QCborValueRef::operator<(const QCborValue &other)


static void _init_f_operator_lt__c2293 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QCborValue & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_operator_lt__c2293 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QCborValue &arg1 = gsi::arg_reader<const QCborValue & >() (args, heap);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->operator< (arg1));
}


// QCborValueRef &QCborValueRef::operator=(const QCborValue &other)


static void _init_f_operator_eq__2293 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QCborValue & > (argspec_0);
  decl->set_return<QCborValueRef & > ();
}

static void _call_f_operator_eq__2293 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QCborValue &arg1 = gsi::arg_reader<const QCborValue & >() (args, heap);
  ret.write<QCborValueRef & > ((QCborValueRef &)((QCborValueRef *)cls)->operator= (arg1));
}


// QCborValueRef &QCborValueRef::operator=(const QCborValueRef &other)


static void _init_f_operator_eq__2578 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QCborValueRef & > (argspec_0);
  decl->set_return<QCborValueRef & > ();
}

static void _call_f_operator_eq__2578 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QCborValueRef &arg1 = gsi::arg_reader<const QCborValueRef & >() (args, heap);
  ret.write<QCborValueRef & > ((QCborValueRef &)((QCborValueRef *)cls)->operator= (arg1));
}


// bool QCborValueRef::operator==(const QCborValue &other)


static void _init_f_operator_eq__eq__c2293 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<const QCborValue & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_operator_eq__eq__c2293 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QCborValue &arg1 = gsi::arg_reader<const QCborValue & >() (args, heap);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->operator== (arg1));
}


// const QCborValue QCborValueRef::operator[](const QString &key)


static void _init_f_operator_index__c2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<const QCborValue > ();
}

static void _call_f_operator_index__c2025 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<const QCborValue > ((const QCborValue)((QCborValueRef *)cls)->operator[] (arg1));
}


// const QCborValue QCborValueRef::operator[](QLatin1String key)


static void _init_f_operator_index__c1701 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<QLatin1String > (argspec_0);
  decl->set_return<const QCborValue > ();
}

static void _call_f_operator_index__c1701 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QLatin1String arg1 = gsi::arg_reader<QLatin1String >() (args, heap);
  ret.write<const QCborValue > ((const QCborValue)((QCborValueRef *)cls)->operator[] (arg1));
}


// const QCborValue QCborValueRef::operator[](qint64 key)


static void _init_f_operator_index__c986 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<qint64 > (argspec_0);
  decl->set_return<const QCborValue > ();
}

static void _call_f_operator_index__c986 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qint64 arg1 = gsi::arg_reader<qint64 >() (args, heap);
  ret.write<const QCborValue > ((const QCborValue)((QCborValueRef *)cls)->operator[] (arg1));
}


// QCborValueRef QCborValueRef::operator[](qint64 key)


static void _init_f_operator_index__986 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<qint64 > (argspec_0);
  decl->set_return<QCborValueRef > ();
}

static void _call_f_operator_index__986 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qint64 arg1 = gsi::arg_reader<qint64 >() (args, heap);
  ret.write<QCborValueRef > ((QCborValueRef)((QCborValueRef *)cls)->operator[] (arg1));
}


// QCborValueRef QCborValueRef::operator[](QLatin1String key)


static void _init_f_operator_index__1701 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<QLatin1String > (argspec_0);
  decl->set_return<QCborValueRef > ();
}

static void _call_f_operator_index__1701 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QLatin1String arg1 = gsi::arg_reader<QLatin1String >() (args, heap);
  ret.write<QCborValueRef > ((QCborValueRef)((QCborValueRef *)cls)->operator[] (arg1));
}


// QCborValueRef QCborValueRef::operator[](const QString &key)


static void _init_f_operator_index__2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("key");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<QCborValueRef > ();
}

static void _call_f_operator_index__2025 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  ret.write<QCborValueRef > ((QCborValueRef)((QCborValueRef *)cls)->operator[] (arg1));
}


// QCborTag QCborValueRef::tag(QCborTag defaultValue)


static void _init_f_tag_c1191 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("defaultValue", true, "QCborTag(-1)");
  decl->add_arg<const qt_gsi::Converter<QCborTag>::target_type & > (argspec_0);
  decl->set_return<qt_gsi::Converter<QCborTag>::target_type > ();
}

static void _call_f_tag_c1191 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QCborTag>::target_type & arg1 = args ? gsi::arg_reader<const qt_gsi::Converter<QCborTag>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<QCborTag>::target_type & >() (qt_gsi::CppToQtReadAdaptor<QCborTag>(heap, QCborTag(-1)), heap);
  ret.write<qt_gsi::Converter<QCborTag>::target_type > ((qt_gsi::Converter<QCborTag>::target_type)qt_gsi::CppToQtAdaptor<QCborTag>(((QCborValueRef *)cls)->tag (qt_gsi::QtToCppAdaptor<QCborTag>(arg1).cref())));
}


// QCborValue QCborValueRef::taggedValue(const QCborValue &defaultValue)


static void _init_f_taggedValue_c2293 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("defaultValue", true, "QCborValue()");
  decl->add_arg<const QCborValue & > (argspec_0);
  decl->set_return<QCborValue > ();
}

static void _call_f_taggedValue_c2293 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QCborValue &arg1 = args ? gsi::arg_reader<const QCborValue & >() (args, heap) : gsi::arg_maker<const QCborValue & >() (QCborValue(), heap);
  ret.write<QCborValue > ((QCborValue)((QCborValueRef *)cls)->taggedValue (arg1));
}


// QCborArray QCborValueRef::toArray()


static void _init_f_toArray_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QCborArray > ();
}

static void _call_f_toArray_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QCborArray > ((QCborArray)((QCborValueRef *)cls)->toArray ());
}


// QCborArray QCborValueRef::toArray(const QCborArray &a)


static void _init_f_toArray_c2295 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("a");
  decl->add_arg<const QCborArray & > (argspec_0);
  decl->set_return<QCborArray > ();
}

static void _call_f_toArray_c2295 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QCborArray &arg1 = gsi::arg_reader<const QCborArray & >() (args, heap);
  ret.write<QCborArray > ((QCborArray)((QCborValueRef *)cls)->toArray (arg1));
}


// bool QCborValueRef::toBool(bool defaultValue)


static void _init_f_toBool_c864 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("defaultValue", true, "false");
  decl->add_arg<bool > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_toBool_c864 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool arg1 = args ? gsi::arg_reader<bool >() (args, heap) : gsi::arg_maker<bool >() (false, heap);
  ret.write<bool > ((bool)((QCborValueRef *)cls)->toBool (arg1));
}


// QByteArray QCborValueRef::toByteArray(const QByteArray &defaultValue)


static void _init_f_toByteArray_c2309 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("defaultValue", true, "{}");
  decl->add_arg<const QByteArray & > (argspec_0);
  decl->set_return<QByteArray > ();
}

static void _call_f_toByteArray_c2309 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QByteArray &arg1 = args ? gsi::arg_reader<const QByteArray & >() (args, heap) : gsi::arg_maker<const QByteArray & >() ({}, heap);
  ret.write<QByteArray > ((QByteArray)((QCborValueRef *)cls)->toByteArray (arg1));
}


// QByteArray QCborValueRef::toCbor(QFlags<QCborValue::EncodingOption> opt)


static void _init_f_toCbor_3668 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("opt", true, "QCborValue::NoTransformation");
  decl->add_arg<QFlags<QCborValue::EncodingOption> > (argspec_0);
  decl->set_return<QByteArray > ();
}

static void _call_f_toCbor_3668 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QFlags<QCborValue::EncodingOption> arg1 = args ? gsi::arg_reader<QFlags<QCborValue::EncodingOption> >() (args, heap) : gsi::arg_maker<QFlags<QCborValue::EncodingOption> >() (QCborValue::NoTransformation, heap);
  ret.write<QByteArray > ((QByteArray)((QCborValueRef *)cls)->toCbor (arg1));
}


// void QCborValueRef::toCbor(QCborStreamWriter &writer, QFlags<QCborValue::EncodingOption> opt)


static void _init_f_toCbor_5906 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("writer");
  decl->add_arg<QCborStreamWriter & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("opt", true, "QCborValue::NoTransformation");
  decl->add_arg<QFlags<QCborValue::EncodingOption> > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_toCbor_5906 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QCborStreamWriter &arg1 = gsi::arg_reader<QCborStreamWriter & >() (args, heap);
  QFlags<QCborValue::EncodingOption> arg2 = args ? gsi::arg_reader<QFlags<QCborValue::EncodingOption> >() (args, heap) : gsi::arg_maker<QFlags<QCborValue::EncodingOption> >() (QCborValue::NoTransformation, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QCborValueRef *)cls)->toCbor (arg1, arg2);
}


// QDateTime QCborValueRef::toDateTime(const QDateTime &defaultValue)


static void _init_f_toDateTime_c2175 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("defaultValue", true, "{}");
  decl->add_arg<const QDateTime & > (argspec_0);
  decl->set_return<QDateTime > ();
}

static void _call_f_toDateTime_c2175 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QDateTime &arg1 = args ? gsi::arg_reader<const QDateTime & >() (args, heap) : gsi::arg_maker<const QDateTime & >() ({}, heap);
  ret.write<QDateTime > ((QDateTime)((QCborValueRef *)cls)->toDateTime (arg1));
}


// QString QCborValueRef::toDiagnosticNotation(QFlags<QCborValue::DiagnosticNotationOption> opt)


static void _init_f_toDiagnosticNotation_4734 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("opt", true, "QCborValue::Compact");
  decl->add_arg<QFlags<QCborValue::DiagnosticNotationOption> > (argspec_0);
  decl->set_return<QString > ();
}

static void _call_f_toDiagnosticNotation_4734 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QFlags<QCborValue::DiagnosticNotationOption> arg1 = args ? gsi::arg_reader<QFlags<QCborValue::DiagnosticNotationOption> >() (args, heap) : gsi::arg_maker<QFlags<QCborValue::DiagnosticNotationOption> >() (QCborValue::Compact, heap);
  ret.write<QString > ((QString)((QCborValueRef *)cls)->toDiagnosticNotation (arg1));
}


// double QCborValueRef::toDouble(double defaultValue)


static void _init_f_toDouble_c1071 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("defaultValue", true, "0");
  decl->add_arg<double > (argspec_0);
  decl->set_return<double > ();
}

static void _call_f_toDouble_c1071 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  double arg1 = args ? gsi::arg_reader<double >() (args, heap) : gsi::arg_maker<double >() (0, heap);
  ret.write<double > ((double)((QCborValueRef *)cls)->toDouble (arg1));
}


// qint64 QCborValueRef::toInteger(qint64 defaultValue)


static void _init_f_toInteger_c986 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("defaultValue", true, "0");
  decl->add_arg<qint64 > (argspec_0);
  decl->set_return<qint64 > ();
}

static void _call_f_toInteger_c986 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qint64 arg1 = args ? gsi::arg_reader<qint64 >() (args, heap) : gsi::arg_maker<qint64 >() (0, heap);
  ret.write<qint64 > ((qint64)((QCborValueRef *)cls)->toInteger (arg1));
}


// QJsonValue QCborValueRef::toJsonValue()


static void _init_f_toJsonValue_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QJsonValue > ();
}

static void _call_f_toJsonValue_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QJsonValue > ((QJsonValue)((QCborValueRef *)cls)->toJsonValue ());
}


// QCborMap QCborValueRef::toMap()


static void _init_f_toMap_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QCborMap > ();
}

static void _call_f_toMap_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QCborMap > ((QCborMap)((QCborValueRef *)cls)->toMap ());
}


// QCborMap QCborValueRef::toMap(const QCborMap &m)


static void _init_f_toMap_c2070 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("m");
  decl->add_arg<const QCborMap & > (argspec_0);
  decl->set_return<QCborMap > ();
}

static void _call_f_toMap_c2070 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QCborMap &arg1 = gsi::arg_reader<const QCborMap & >() (args, heap);
  ret.write<QCborMap > ((QCborMap)((QCborValueRef *)cls)->toMap (arg1));
}


// QRegularExpression QCborValueRef::toRegularExpression(const QRegularExpression &defaultValue)


static void _init_f_toRegularExpression_c3188 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("defaultValue", true, "{}");
  decl->add_arg<const QRegularExpression & > (argspec_0);
  decl->set_return<QRegularExpression > ();
}

static void _call_f_toRegularExpression_c3188 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QRegularExpression &arg1 = args ? gsi::arg_reader<const QRegularExpression & >() (args, heap) : gsi::arg_maker<const QRegularExpression & >() ({}, heap);
  ret.write<QRegularExpression > ((QRegularExpression)((QCborValueRef *)cls)->toRegularExpression (arg1));
}


// QString QCborValueRef::toString(const QString &defaultValue)


static void _init_f_toString_c2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("defaultValue", true, "{}");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<QString > ();
}

static void _call_f_toString_c2025 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = args ? gsi::arg_reader<const QString & >() (args, heap) : gsi::arg_maker<const QString & >() ({}, heap);
  ret.write<QString > ((QString)((QCborValueRef *)cls)->toString (arg1));
}


// QUrl QCborValueRef::toUrl(const QUrl &defaultValue)


static void _init_f_toUrl_c1701 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("defaultValue", true, "{}");
  decl->add_arg<const QUrl & > (argspec_0);
  decl->set_return<QUrl > ();
}

static void _call_f_toUrl_c1701 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QUrl &arg1 = args ? gsi::arg_reader<const QUrl & >() (args, heap) : gsi::arg_maker<const QUrl & >() ({}, heap);
  ret.write<QUrl > ((QUrl)((QCborValueRef *)cls)->toUrl (arg1));
}


// QUuid QCborValueRef::toUuid(const QUuid &defaultValue)


static void _init_f_toUuid_c1801 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("defaultValue", true, "{}");
  decl->add_arg<const QUuid & > (argspec_0);
  decl->set_return<QUuid > ();
}

static void _call_f_toUuid_c1801 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QUuid &arg1 = args ? gsi::arg_reader<const QUuid & >() (args, heap) : gsi::arg_maker<const QUuid & >() ({}, heap);
  ret.write<QUuid > ((QUuid)((QCborValueRef *)cls)->toUuid (arg1));
}


// QVariant QCborValueRef::toVariant()


static void _init_f_toVariant_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QVariant > ();
}

static void _call_f_toVariant_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVariant > ((QVariant)((QCborValueRef *)cls)->toVariant ());
}


// QCborValue::Type QCborValueRef::type()


static void _init_f_type_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QCborValue::Type>::target_type > ();
}

static void _call_f_type_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QCborValue::Type>::target_type > ((qt_gsi::Converter<QCborValue::Type>::target_type)qt_gsi::CppToQtAdaptor<QCborValue::Type>(((QCborValueRef *)cls)->type ()));
}



namespace gsi
{

static gsi::Methods methods_QCborValueRef () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QCborValueRef::QCborValueRef(const QCborValueRef &)\nThis method creates an object of class QCborValueRef.", &_init_ctor_QCborValueRef_2578, &_call_ctor_QCborValueRef_2578);
  methods += new qt_gsi::GenericMethod ("compare", "@brief Method int QCborValueRef::compare(const QCborValue &other)\n", true, &_init_f_compare_c2293, &_call_f_compare_c2293);
  methods += new qt_gsi::GenericMethod ("isArray?", "@brief Method bool QCborValueRef::isArray()\n", true, &_init_f_isArray_c0, &_call_f_isArray_c0);
  methods += new qt_gsi::GenericMethod ("isBool?", "@brief Method bool QCborValueRef::isBool()\n", true, &_init_f_isBool_c0, &_call_f_isBool_c0);
  methods += new qt_gsi::GenericMethod ("isByteArray?", "@brief Method bool QCborValueRef::isByteArray()\n", true, &_init_f_isByteArray_c0, &_call_f_isByteArray_c0);
  methods += new qt_gsi::GenericMethod ("isContainer?", "@brief Method bool QCborValueRef::isContainer()\n", true, &_init_f_isContainer_c0, &_call_f_isContainer_c0);
  methods += new qt_gsi::GenericMethod ("isDateTime?", "@brief Method bool QCborValueRef::isDateTime()\n", true, &_init_f_isDateTime_c0, &_call_f_isDateTime_c0);
  methods += new qt_gsi::GenericMethod ("isDouble?", "@brief Method bool QCborValueRef::isDouble()\n", true, &_init_f_isDouble_c0, &_call_f_isDouble_c0);
  methods += new qt_gsi::GenericMethod ("isFalse?", "@brief Method bool QCborValueRef::isFalse()\n", true, &_init_f_isFalse_c0, &_call_f_isFalse_c0);
  methods += new qt_gsi::GenericMethod ("isInteger?", "@brief Method bool QCborValueRef::isInteger()\n", true, &_init_f_isInteger_c0, &_call_f_isInteger_c0);
  methods += new qt_gsi::GenericMethod ("isInvalid?", "@brief Method bool QCborValueRef::isInvalid()\n", true, &_init_f_isInvalid_c0, &_call_f_isInvalid_c0);
  methods += new qt_gsi::GenericMethod ("isMap?", "@brief Method bool QCborValueRef::isMap()\n", true, &_init_f_isMap_c0, &_call_f_isMap_c0);
  methods += new qt_gsi::GenericMethod ("isNull?", "@brief Method bool QCborValueRef::isNull()\n", true, &_init_f_isNull_c0, &_call_f_isNull_c0);
  methods += new qt_gsi::GenericMethod ("isRegularExpression?", "@brief Method bool QCborValueRef::isRegularExpression()\n", true, &_init_f_isRegularExpression_c0, &_call_f_isRegularExpression_c0);
  methods += new qt_gsi::GenericMethod ("isSimpleType?", "@brief Method bool QCborValueRef::isSimpleType()\n", true, &_init_f_isSimpleType_c0, &_call_f_isSimpleType_c0);
  methods += new qt_gsi::GenericMethod ("isSimpleType?", "@brief Method bool QCborValueRef::isSimpleType(QCborSimpleType st)\n", true, &_init_f_isSimpleType_c1943, &_call_f_isSimpleType_c1943);
  methods += new qt_gsi::GenericMethod ("isString?", "@brief Method bool QCborValueRef::isString()\n", true, &_init_f_isString_c0, &_call_f_isString_c0);
  methods += new qt_gsi::GenericMethod ("isTag?", "@brief Method bool QCborValueRef::isTag()\n", true, &_init_f_isTag_c0, &_call_f_isTag_c0);
  methods += new qt_gsi::GenericMethod ("isTrue?", "@brief Method bool QCborValueRef::isTrue()\n", true, &_init_f_isTrue_c0, &_call_f_isTrue_c0);
  methods += new qt_gsi::GenericMethod ("isUndefined?", "@brief Method bool QCborValueRef::isUndefined()\n", true, &_init_f_isUndefined_c0, &_call_f_isUndefined_c0);
  methods += new qt_gsi::GenericMethod ("isUrl?", "@brief Method bool QCborValueRef::isUrl()\n", true, &_init_f_isUrl_c0, &_call_f_isUrl_c0);
  methods += new qt_gsi::GenericMethod ("isUuid?", "@brief Method bool QCborValueRef::isUuid()\n", true, &_init_f_isUuid_c0, &_call_f_isUuid_c0);
  methods += new qt_gsi::GenericMethod ("!=", "@brief Method bool QCborValueRef::operator!=(const QCborValue &other)\n", true, &_init_f_operator_excl__eq__c2293, &_call_f_operator_excl__eq__c2293);
  methods += new qt_gsi::GenericMethod ("<", "@brief Method bool QCborValueRef::operator<(const QCborValue &other)\n", true, &_init_f_operator_lt__c2293, &_call_f_operator_lt__c2293);
  methods += new qt_gsi::GenericMethod ("assign", "@brief Method QCborValueRef &QCborValueRef::operator=(const QCborValue &other)\n", false, &_init_f_operator_eq__2293, &_call_f_operator_eq__2293);
  methods += new qt_gsi::GenericMethod ("assign", "@brief Method QCborValueRef &QCborValueRef::operator=(const QCborValueRef &other)\n", false, &_init_f_operator_eq__2578, &_call_f_operator_eq__2578);
  methods += new qt_gsi::GenericMethod ("==", "@brief Method bool QCborValueRef::operator==(const QCborValue &other)\n", true, &_init_f_operator_eq__eq__c2293, &_call_f_operator_eq__eq__c2293);
  methods += new qt_gsi::GenericMethod ("[]", "@brief Method const QCborValue QCborValueRef::operator[](const QString &key)\n", true, &_init_f_operator_index__c2025, &_call_f_operator_index__c2025);
  methods += new qt_gsi::GenericMethod ("[]", "@brief Method const QCborValue QCborValueRef::operator[](QLatin1String key)\n", true, &_init_f_operator_index__c1701, &_call_f_operator_index__c1701);
  methods += new qt_gsi::GenericMethod ("[]", "@brief Method const QCborValue QCborValueRef::operator[](qint64 key)\n", true, &_init_f_operator_index__c986, &_call_f_operator_index__c986);
  methods += new qt_gsi::GenericMethod ("[]", "@brief Method QCborValueRef QCborValueRef::operator[](qint64 key)\n", false, &_init_f_operator_index__986, &_call_f_operator_index__986);
  methods += new qt_gsi::GenericMethod ("[]", "@brief Method QCborValueRef QCborValueRef::operator[](QLatin1String key)\n", false, &_init_f_operator_index__1701, &_call_f_operator_index__1701);
  methods += new qt_gsi::GenericMethod ("[]", "@brief Method QCborValueRef QCborValueRef::operator[](const QString &key)\n", false, &_init_f_operator_index__2025, &_call_f_operator_index__2025);
  methods += new qt_gsi::GenericMethod ("tag", "@brief Method QCborTag QCborValueRef::tag(QCborTag defaultValue)\n", true, &_init_f_tag_c1191, &_call_f_tag_c1191);
  methods += new qt_gsi::GenericMethod ("taggedValue", "@brief Method QCborValue QCborValueRef::taggedValue(const QCborValue &defaultValue)\n", true, &_init_f_taggedValue_c2293, &_call_f_taggedValue_c2293);
  methods += new qt_gsi::GenericMethod ("toArray", "@brief Method QCborArray QCborValueRef::toArray()\n", true, &_init_f_toArray_c0, &_call_f_toArray_c0);
  methods += new qt_gsi::GenericMethod ("toArray", "@brief Method QCborArray QCborValueRef::toArray(const QCborArray &a)\n", true, &_init_f_toArray_c2295, &_call_f_toArray_c2295);
  methods += new qt_gsi::GenericMethod ("toBool", "@brief Method bool QCborValueRef::toBool(bool defaultValue)\n", true, &_init_f_toBool_c864, &_call_f_toBool_c864);
  methods += new qt_gsi::GenericMethod ("toByteArray", "@brief Method QByteArray QCborValueRef::toByteArray(const QByteArray &defaultValue)\n", true, &_init_f_toByteArray_c2309, &_call_f_toByteArray_c2309);
  methods += new qt_gsi::GenericMethod ("toCbor", "@brief Method QByteArray QCborValueRef::toCbor(QFlags<QCborValue::EncodingOption> opt)\n", false, &_init_f_toCbor_3668, &_call_f_toCbor_3668);
  methods += new qt_gsi::GenericMethod ("toCbor", "@brief Method void QCborValueRef::toCbor(QCborStreamWriter &writer, QFlags<QCborValue::EncodingOption> opt)\n", false, &_init_f_toCbor_5906, &_call_f_toCbor_5906);
  methods += new qt_gsi::GenericMethod ("toDateTime", "@brief Method QDateTime QCborValueRef::toDateTime(const QDateTime &defaultValue)\n", true, &_init_f_toDateTime_c2175, &_call_f_toDateTime_c2175);
  methods += new qt_gsi::GenericMethod ("toDiagnosticNotation", "@brief Method QString QCborValueRef::toDiagnosticNotation(QFlags<QCborValue::DiagnosticNotationOption> opt)\n", false, &_init_f_toDiagnosticNotation_4734, &_call_f_toDiagnosticNotation_4734);
  methods += new qt_gsi::GenericMethod ("toDouble", "@brief Method double QCborValueRef::toDouble(double defaultValue)\n", true, &_init_f_toDouble_c1071, &_call_f_toDouble_c1071);
  methods += new qt_gsi::GenericMethod ("toInteger", "@brief Method qint64 QCborValueRef::toInteger(qint64 defaultValue)\n", true, &_init_f_toInteger_c986, &_call_f_toInteger_c986);
  methods += new qt_gsi::GenericMethod ("toJsonValue", "@brief Method QJsonValue QCborValueRef::toJsonValue()\n", true, &_init_f_toJsonValue_c0, &_call_f_toJsonValue_c0);
  methods += new qt_gsi::GenericMethod ("toMap", "@brief Method QCborMap QCborValueRef::toMap()\n", true, &_init_f_toMap_c0, &_call_f_toMap_c0);
  methods += new qt_gsi::GenericMethod ("toMap", "@brief Method QCborMap QCborValueRef::toMap(const QCborMap &m)\n", true, &_init_f_toMap_c2070, &_call_f_toMap_c2070);
  methods += new qt_gsi::GenericMethod ("toRegularExpression", "@brief Method QRegularExpression QCborValueRef::toRegularExpression(const QRegularExpression &defaultValue)\n", true, &_init_f_toRegularExpression_c3188, &_call_f_toRegularExpression_c3188);
  methods += new qt_gsi::GenericMethod ("toString", "@brief Method QString QCborValueRef::toString(const QString &defaultValue)\n", true, &_init_f_toString_c2025, &_call_f_toString_c2025);
  methods += new qt_gsi::GenericMethod ("toUrl", "@brief Method QUrl QCborValueRef::toUrl(const QUrl &defaultValue)\n", true, &_init_f_toUrl_c1701, &_call_f_toUrl_c1701);
  methods += new qt_gsi::GenericMethod ("toUuid", "@brief Method QUuid QCborValueRef::toUuid(const QUuid &defaultValue)\n", true, &_init_f_toUuid_c1801, &_call_f_toUuid_c1801);
  methods += new qt_gsi::GenericMethod ("toVariant", "@brief Method QVariant QCborValueRef::toVariant()\n", true, &_init_f_toVariant_c0, &_call_f_toVariant_c0);
  methods += new qt_gsi::GenericMethod ("type", "@brief Method QCborValue::Type QCborValueRef::type()\n", true, &_init_f_type_c0, &_call_f_type_c0);
  return methods;
}

gsi::Class<QCborValueRef> decl_QCborValueRef ("QtCore", "QCborValueRef",
  methods_QCborValueRef (),
  "@qt\n@brief Binding of QCborValueRef");


GSI_QTCORE_PUBLIC gsi::Class<QCborValueRef> &qtdecl_QCborValueRef () { return decl_QCborValueRef; }

}

