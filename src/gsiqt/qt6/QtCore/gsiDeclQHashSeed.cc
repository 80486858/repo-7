
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQHashSeed.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QHashSeed>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include "gsiDeclQtCoreTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// struct QHashSeed

//  Constructor QHashSeed::QHashSeed(QHashSeed::size_t d)


static void _init_ctor_QHashSeed_2060 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("d", true, "0");
  decl->add_arg<QHashSeed::size_t > (argspec_0);
  decl->set_return_new<QHashSeed> ();
}

static void _call_ctor_QHashSeed_2060 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QHashSeed::size_t arg1 = args ? gsi::arg_reader<QHashSeed::size_t >() (args, heap) : gsi::arg_maker<QHashSeed::size_t >() (0, heap);
  ret.write<QHashSeed *> (new QHashSeed (arg1));
}


// operator QHashSeed::size_t()


static void _init_f_size_t_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<operator > ();
}

static void _call_f_size_t_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<operator > ((operator)((QHashSeed *)cls)->size_t ());
}


// static QHashSeed QHashSeed::globalSeed()


static void _init_f_globalSeed_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<QHashSeed > ();
}

static void _call_f_globalSeed_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QHashSeed > ((QHashSeed)QHashSeed::globalSeed ());
}


// static void QHashSeed::resetRandomGlobalSeed()


static void _init_f_resetRandomGlobalSeed_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_resetRandomGlobalSeed_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  __SUPPRESS_UNUSED_WARNING(ret);
  QHashSeed::resetRandomGlobalSeed ();
}


// static void QHashSeed::setDeterministicGlobalSeed()


static void _init_f_setDeterministicGlobalSeed_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_setDeterministicGlobalSeed_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  __SUPPRESS_UNUSED_WARNING(ret);
  QHashSeed::setDeterministicGlobalSeed ();
}



namespace gsi
{

static gsi::Methods methods_QHashSeed () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QHashSeed::QHashSeed(QHashSeed::size_t d)\nThis method creates an object of class QHashSeed.", &_init_ctor_QHashSeed_2060, &_call_ctor_QHashSeed_2060);
  methods += new qt_gsi::GenericMethod ("size_t", "@brief Method operator QHashSeed::size_t()\n", true, &_init_f_size_t_c0, &_call_f_size_t_c0);
  methods += new qt_gsi::GenericStaticMethod ("globalSeed", "@brief Static method QHashSeed QHashSeed::globalSeed()\nThis method is static and can be called without an instance.", &_init_f_globalSeed_0, &_call_f_globalSeed_0);
  methods += new qt_gsi::GenericStaticMethod ("resetRandomGlobalSeed", "@brief Static method void QHashSeed::resetRandomGlobalSeed()\nThis method is static and can be called without an instance.", &_init_f_resetRandomGlobalSeed_0, &_call_f_resetRandomGlobalSeed_0);
  methods += new qt_gsi::GenericStaticMethod ("setDeterministicGlobalSeed", "@brief Static method void QHashSeed::setDeterministicGlobalSeed()\nThis method is static and can be called without an instance.", &_init_f_setDeterministicGlobalSeed_0, &_call_f_setDeterministicGlobalSeed_0);
  return methods;
}

gsi::Class<QHashSeed> decl_QHashSeed ("QtCore", "QHashSeed",
  methods_QHashSeed (),
  "@qt\n@brief Binding of QHashSeed");


GSI_QTCORE_PUBLIC gsi::Class<QHashSeed> &qtdecl_QHashSeed () { return decl_QHashSeed; }

}

