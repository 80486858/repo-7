
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQStringView.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QStringView>
#include <QRegularExpression>
#include <QRegularExpressionMatch>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QStringView

//  Constructor QStringView::QStringView()


static void _init_ctor_QStringView_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QStringView> ();
}

static void _call_ctor_QStringView_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QStringView *> (new QStringView ());
}


//  Constructor QStringView::QStringView(std::nullptr_t)


static void _init_ctor_QStringView_1879 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("arg1");
  decl->add_arg<std::nullptr_t > (argspec_0);
  decl->set_return_new<QStringView> ();
}

static void _call_ctor_QStringView_1879 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  std::nullptr_t arg1 = gsi::arg_reader<std::nullptr_t >() (args, heap);
  ret.write<QStringView *> (new QStringView (arg1));
}


// QChar QStringView::at(qsizetype n)


static void _init_f_at_c1442 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("n");
  decl->add_arg<qsizetype > (argspec_0);
  decl->set_return<qt_gsi::Converter<QChar>::target_type > ();
}

static void _call_f_at_c1442 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qsizetype arg1 = gsi::arg_reader<qsizetype >() (args, heap);
  ret.write<qt_gsi::Converter<QChar>::target_type > ((qt_gsi::Converter<QChar>::target_type)qt_gsi::CppToQtAdaptor<QChar>(((QStringView *)cls)->at (arg1)));
}


// QChar QStringView::back()


static void _init_f_back_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QChar>::target_type > ();
}

static void _call_f_back_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QChar>::target_type > ((qt_gsi::Converter<QChar>::target_type)qt_gsi::CppToQtAdaptor<QChar>(((QStringView *)cls)->back ()));
}


// const QChar *QStringView::begin()


static void _init_f_begin_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QChar>::target_type > ();
}

static void _call_f_begin_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QChar>::target_type > ((qt_gsi::Converter<QChar>::target_type)qt_gsi::CppToQtAdaptor<QChar>(*((QStringView *)cls)->begin ()));
}


// const QChar *QStringView::cbegin()


static void _init_f_cbegin_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QChar>::target_type > ();
}

static void _call_f_cbegin_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QChar>::target_type > ((qt_gsi::Converter<QChar>::target_type)qt_gsi::CppToQtAdaptor<QChar>(*((QStringView *)cls)->cbegin ()));
}


// const QChar *QStringView::cend()


static void _init_f_cend_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QChar>::target_type > ();
}

static void _call_f_cend_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QChar>::target_type > ((qt_gsi::Converter<QChar>::target_type)qt_gsi::CppToQtAdaptor<QChar>(*((QStringView *)cls)->cend ()));
}


// void QStringView::chop(qsizetype n)


static void _init_f_chop_1442 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("n");
  decl->add_arg<qsizetype > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_chop_1442 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qsizetype arg1 = gsi::arg_reader<qsizetype >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QStringView *)cls)->chop (arg1);
}


// QStringView QStringView::chopped(qsizetype n)


static void _init_f_chopped_c1442 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("n");
  decl->add_arg<qsizetype > (argspec_0);
  decl->set_return<QStringView > ();
}

static void _call_f_chopped_c1442 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qsizetype arg1 = gsi::arg_reader<qsizetype >() (args, heap);
  ret.write<QStringView > ((QStringView)((QStringView *)cls)->chopped (arg1));
}


// int QStringView::compare(QStringView other, Qt::CaseSensitivity cs)


static void _init_f_compare_c3775 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<QStringView > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_1);
  decl->set_return<int > ();
}

static void _call_f_compare_c3775 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QStringView arg1 = gsi::arg_reader<QStringView >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg2 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<int > ((int)((QStringView *)cls)->compare (arg1, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg2).cref()));
}


// int QStringView::compare(QLatin1String other, Qt::CaseSensitivity cs)


static void _init_f_compare_c3917 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("other");
  decl->add_arg<QLatin1String > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_1);
  decl->set_return<int > ();
}

static void _call_f_compare_c3917 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QLatin1String arg1 = gsi::arg_reader<QLatin1String >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg2 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<int > ((int)((QStringView *)cls)->compare (arg1, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg2).cref()));
}


// int QStringView::compare(QChar c)


static void _init_f_compare_c899 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("c");
  decl->add_arg<const qt_gsi::Converter<QChar>::target_type & > (argspec_0);
  decl->set_return<int > ();
}

static void _call_f_compare_c899 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QChar>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QChar>::target_type & >() (args, heap);
  ret.write<int > ((int)((QStringView *)cls)->compare (qt_gsi::QtToCppAdaptor<QChar>(arg1).cref()));
}


// int QStringView::compare(QChar c, Qt::CaseSensitivity cs)


static void _init_f_compare_c3115 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("c");
  decl->add_arg<const qt_gsi::Converter<QChar>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("cs");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_1);
  decl->set_return<int > ();
}

static void _call_f_compare_c3115 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QChar>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QChar>::target_type & >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg2 = gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap);
  ret.write<int > ((int)((QStringView *)cls)->compare (qt_gsi::QtToCppAdaptor<QChar>(arg1).cref(), qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg2).cref()));
}


// const QChar *QStringView::constBegin()


static void _init_f_constBegin_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QChar>::target_type > ();
}

static void _call_f_constBegin_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QChar>::target_type > ((qt_gsi::Converter<QChar>::target_type)qt_gsi::CppToQtAdaptor<QChar>(*((QStringView *)cls)->constBegin ()));
}


// const QChar *QStringView::constData()


static void _init_f_constData_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QChar>::target_type > ();
}

static void _call_f_constData_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QChar>::target_type > ((qt_gsi::Converter<QChar>::target_type)qt_gsi::CppToQtAdaptor<QChar>(*((QStringView *)cls)->constData ()));
}


// const QChar *QStringView::constEnd()


static void _init_f_constEnd_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QChar>::target_type > ();
}

static void _call_f_constEnd_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QChar>::target_type > ((qt_gsi::Converter<QChar>::target_type)qt_gsi::CppToQtAdaptor<QChar>(*((QStringView *)cls)->constEnd ()));
}


// bool QStringView::contains(QChar c, Qt::CaseSensitivity cs)


static void _init_f_contains_c3115 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("c");
  decl->add_arg<const qt_gsi::Converter<QChar>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_contains_c3115 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QChar>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QChar>::target_type & >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg2 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<bool > ((bool)((QStringView *)cls)->contains (qt_gsi::QtToCppAdaptor<QChar>(arg1).cref(), qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg2).cref()));
}


// bool QStringView::contains(QStringView s, Qt::CaseSensitivity cs)


static void _init_f_contains_c3775 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<QStringView > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_contains_c3775 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QStringView arg1 = gsi::arg_reader<QStringView >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg2 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<bool > ((bool)((QStringView *)cls)->contains (arg1, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg2).cref()));
}


// bool QStringView::contains(QLatin1String s, Qt::CaseSensitivity cs)


static void _init_f_contains_c3917 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<QLatin1String > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_contains_c3917 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QLatin1String arg1 = gsi::arg_reader<QLatin1String >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg2 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<bool > ((bool)((QStringView *)cls)->contains (arg1, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg2).cref()));
}


// bool QStringView::contains(const QRegularExpression &re, QRegularExpressionMatch *rmatch)


static void _init_f_contains_c6070 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("re");
  decl->add_arg<const QRegularExpression & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("rmatch", true, "nullptr");
  decl->add_arg<QRegularExpressionMatch * > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_contains_c6070 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QRegularExpression &arg1 = gsi::arg_reader<const QRegularExpression & >() (args, heap);
  QRegularExpressionMatch *arg2 = args ? gsi::arg_reader<QRegularExpressionMatch * >() (args, heap) : gsi::arg_maker<QRegularExpressionMatch * >() (nullptr, heap);
  ret.write<bool > ((bool)((QStringView *)cls)->contains (arg1, arg2));
}


// qsizetype QStringView::count(QChar c, Qt::CaseSensitivity cs)


static void _init_f_count_c3115 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("c");
  decl->add_arg<const qt_gsi::Converter<QChar>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_1);
  decl->set_return<qsizetype > ();
}

static void _call_f_count_c3115 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QChar>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QChar>::target_type & >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg2 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<qsizetype > ((qsizetype)((QStringView *)cls)->count (qt_gsi::QtToCppAdaptor<QChar>(arg1).cref(), qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg2).cref()));
}


// qsizetype QStringView::count(QStringView s, Qt::CaseSensitivity cs)


static void _init_f_count_c3775 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<QStringView > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_1);
  decl->set_return<qsizetype > ();
}

static void _call_f_count_c3775 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QStringView arg1 = gsi::arg_reader<QStringView >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg2 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<qsizetype > ((qsizetype)((QStringView *)cls)->count (arg1, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg2).cref()));
}


// qsizetype QStringView::count(const QRegularExpression &re)


static void _init_f_count_c3188 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("re");
  decl->add_arg<const QRegularExpression & > (argspec_0);
  decl->set_return<qsizetype > ();
}

static void _call_f_count_c3188 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QRegularExpression &arg1 = gsi::arg_reader<const QRegularExpression & >() (args, heap);
  ret.write<qsizetype > ((qsizetype)((QStringView *)cls)->count (arg1));
}


// std::reverse_iterator<QStringView::const_iterator> QStringView::crbegin()


static void _init_f_crbegin_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<std::reverse_iterator<QStringView::const_iterator> > ();
}

static void _call_f_crbegin_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<std::reverse_iterator<QStringView::const_iterator> > ((std::reverse_iterator<QStringView::const_iterator>)((QStringView *)cls)->crbegin ());
}


// std::reverse_iterator<QStringView::const_iterator> QStringView::crend()


static void _init_f_crend_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<std::reverse_iterator<QStringView::const_iterator> > ();
}

static void _call_f_crend_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<std::reverse_iterator<QStringView::const_iterator> > ((std::reverse_iterator<QStringView::const_iterator>)((QStringView *)cls)->crend ());
}


// const QChar *QStringView::data()


static void _init_f_data_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QChar>::target_type > ();
}

static void _call_f_data_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QChar>::target_type > ((qt_gsi::Converter<QChar>::target_type)qt_gsi::CppToQtAdaptor<QChar>(*((QStringView *)cls)->data ()));
}


// bool QStringView::empty()


static void _init_f_empty_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_empty_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QStringView *)cls)->empty ());
}


// const QChar *QStringView::end()


static void _init_f_end_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QChar>::target_type > ();
}

static void _call_f_end_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QChar>::target_type > ((qt_gsi::Converter<QChar>::target_type)qt_gsi::CppToQtAdaptor<QChar>(*((QStringView *)cls)->end ()));
}


// bool QStringView::endsWith(QStringView s, Qt::CaseSensitivity cs)


static void _init_f_endsWith_c3775 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<QStringView > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_endsWith_c3775 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QStringView arg1 = gsi::arg_reader<QStringView >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg2 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<bool > ((bool)((QStringView *)cls)->endsWith (arg1, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg2).cref()));
}


// bool QStringView::endsWith(QLatin1String s, Qt::CaseSensitivity cs)


static void _init_f_endsWith_c3917 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<QLatin1String > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_endsWith_c3917 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QLatin1String arg1 = gsi::arg_reader<QLatin1String >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg2 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<bool > ((bool)((QStringView *)cls)->endsWith (arg1, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg2).cref()));
}


// bool QStringView::endsWith(QChar c)


static void _init_f_endsWith_c899 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("c");
  decl->add_arg<const qt_gsi::Converter<QChar>::target_type & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_endsWith_c899 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QChar>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QChar>::target_type & >() (args, heap);
  ret.write<bool > ((bool)((QStringView *)cls)->endsWith (qt_gsi::QtToCppAdaptor<QChar>(arg1).cref()));
}


// bool QStringView::endsWith(QChar c, Qt::CaseSensitivity cs)


static void _init_f_endsWith_c3115 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("c");
  decl->add_arg<const qt_gsi::Converter<QChar>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("cs");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_endsWith_c3115 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QChar>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QChar>::target_type & >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg2 = gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap);
  ret.write<bool > ((bool)((QStringView *)cls)->endsWith (qt_gsi::QtToCppAdaptor<QChar>(arg1).cref(), qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg2).cref()));
}


// QStringView QStringView::first(qsizetype n)


static void _init_f_first_c1442 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("n");
  decl->add_arg<qsizetype > (argspec_0);
  decl->set_return<QStringView > ();
}

static void _call_f_first_c1442 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qsizetype arg1 = gsi::arg_reader<qsizetype >() (args, heap);
  ret.write<QStringView > ((QStringView)((QStringView *)cls)->first (arg1));
}


// QChar QStringView::first()


static void _init_f_first_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QChar>::target_type > ();
}

static void _call_f_first_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QChar>::target_type > ((qt_gsi::Converter<QChar>::target_type)qt_gsi::CppToQtAdaptor<QChar>(((QStringView *)cls)->first ()));
}


// QChar QStringView::front()


static void _init_f_front_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QChar>::target_type > ();
}

static void _call_f_front_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QChar>::target_type > ((qt_gsi::Converter<QChar>::target_type)qt_gsi::CppToQtAdaptor<QChar>(((QStringView *)cls)->front ()));
}


// qsizetype QStringView::indexOf(QChar c, qsizetype from, Qt::CaseSensitivity cs)


static void _init_f_indexOf_c4449 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("c");
  decl->add_arg<const qt_gsi::Converter<QChar>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("from", true, "0");
  decl->add_arg<qsizetype > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_2);
  decl->set_return<qsizetype > ();
}

static void _call_f_indexOf_c4449 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QChar>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QChar>::target_type & >() (args, heap);
  qsizetype arg2 = args ? gsi::arg_reader<qsizetype >() (args, heap) : gsi::arg_maker<qsizetype >() (0, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg3 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<qsizetype > ((qsizetype)((QStringView *)cls)->indexOf (qt_gsi::QtToCppAdaptor<QChar>(arg1).cref(), arg2, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg3).cref()));
}


// qsizetype QStringView::indexOf(QStringView s, qsizetype from, Qt::CaseSensitivity cs)


static void _init_f_indexOf_c5109 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<QStringView > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("from", true, "0");
  decl->add_arg<qsizetype > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_2);
  decl->set_return<qsizetype > ();
}

static void _call_f_indexOf_c5109 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QStringView arg1 = gsi::arg_reader<QStringView >() (args, heap);
  qsizetype arg2 = args ? gsi::arg_reader<qsizetype >() (args, heap) : gsi::arg_maker<qsizetype >() (0, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg3 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<qsizetype > ((qsizetype)((QStringView *)cls)->indexOf (arg1, arg2, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg3).cref()));
}


// qsizetype QStringView::indexOf(QLatin1String s, qsizetype from, Qt::CaseSensitivity cs)


static void _init_f_indexOf_c5251 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<QLatin1String > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("from", true, "0");
  decl->add_arg<qsizetype > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_2);
  decl->set_return<qsizetype > ();
}

static void _call_f_indexOf_c5251 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QLatin1String arg1 = gsi::arg_reader<QLatin1String >() (args, heap);
  qsizetype arg2 = args ? gsi::arg_reader<qsizetype >() (args, heap) : gsi::arg_maker<qsizetype >() (0, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg3 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<qsizetype > ((qsizetype)((QStringView *)cls)->indexOf (arg1, arg2, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg3).cref()));
}


// qsizetype QStringView::indexOf(const QRegularExpression &re, qsizetype from, QRegularExpressionMatch *rmatch)


static void _init_f_indexOf_c7404 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("re");
  decl->add_arg<const QRegularExpression & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("from", true, "0");
  decl->add_arg<qsizetype > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("rmatch", true, "nullptr");
  decl->add_arg<QRegularExpressionMatch * > (argspec_2);
  decl->set_return<qsizetype > ();
}

static void _call_f_indexOf_c7404 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QRegularExpression &arg1 = gsi::arg_reader<const QRegularExpression & >() (args, heap);
  qsizetype arg2 = args ? gsi::arg_reader<qsizetype >() (args, heap) : gsi::arg_maker<qsizetype >() (0, heap);
  QRegularExpressionMatch *arg3 = args ? gsi::arg_reader<QRegularExpressionMatch * >() (args, heap) : gsi::arg_maker<QRegularExpressionMatch * >() (nullptr, heap);
  ret.write<qsizetype > ((qsizetype)((QStringView *)cls)->indexOf (arg1, arg2, arg3));
}


// bool QStringView::isEmpty()


static void _init_f_isEmpty_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isEmpty_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QStringView *)cls)->isEmpty ());
}


// bool QStringView::isNull()


static void _init_f_isNull_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isNull_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QStringView *)cls)->isNull ());
}


// bool QStringView::isRightToLeft()


static void _init_f_isRightToLeft_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isRightToLeft_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QStringView *)cls)->isRightToLeft ());
}


// bool QStringView::isValidUtf16()


static void _init_f_isValidUtf16_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isValidUtf16_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QStringView *)cls)->isValidUtf16 ());
}


// QStringView QStringView::last(qsizetype n)


static void _init_f_last_c1442 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("n");
  decl->add_arg<qsizetype > (argspec_0);
  decl->set_return<QStringView > ();
}

static void _call_f_last_c1442 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qsizetype arg1 = gsi::arg_reader<qsizetype >() (args, heap);
  ret.write<QStringView > ((QStringView)((QStringView *)cls)->last (arg1));
}


// QChar QStringView::last()


static void _init_f_last_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qt_gsi::Converter<QChar>::target_type > ();
}

static void _call_f_last_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qt_gsi::Converter<QChar>::target_type > ((qt_gsi::Converter<QChar>::target_type)qt_gsi::CppToQtAdaptor<QChar>(((QStringView *)cls)->last ()));
}


// qsizetype QStringView::lastIndexOf(QChar c, qsizetype from, Qt::CaseSensitivity cs)


static void _init_f_lastIndexOf_c4449 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("c");
  decl->add_arg<const qt_gsi::Converter<QChar>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("from", true, "-1");
  decl->add_arg<qsizetype > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_2);
  decl->set_return<qsizetype > ();
}

static void _call_f_lastIndexOf_c4449 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QChar>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QChar>::target_type & >() (args, heap);
  qsizetype arg2 = args ? gsi::arg_reader<qsizetype >() (args, heap) : gsi::arg_maker<qsizetype >() (-1, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg3 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<qsizetype > ((qsizetype)((QStringView *)cls)->lastIndexOf (qt_gsi::QtToCppAdaptor<QChar>(arg1).cref(), arg2, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg3).cref()));
}


// qsizetype QStringView::lastIndexOf(QStringView s, Qt::CaseSensitivity cs)


static void _init_f_lastIndexOf_c3775 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<QStringView > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_1);
  decl->set_return<qsizetype > ();
}

static void _call_f_lastIndexOf_c3775 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QStringView arg1 = gsi::arg_reader<QStringView >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg2 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<qsizetype > ((qsizetype)((QStringView *)cls)->lastIndexOf (arg1, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg2).cref()));
}


// qsizetype QStringView::lastIndexOf(QStringView s, qsizetype from, Qt::CaseSensitivity cs)


static void _init_f_lastIndexOf_c5109 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<QStringView > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("from");
  decl->add_arg<qsizetype > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_2);
  decl->set_return<qsizetype > ();
}

static void _call_f_lastIndexOf_c5109 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QStringView arg1 = gsi::arg_reader<QStringView >() (args, heap);
  qsizetype arg2 = gsi::arg_reader<qsizetype >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg3 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<qsizetype > ((qsizetype)((QStringView *)cls)->lastIndexOf (arg1, arg2, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg3).cref()));
}


// qsizetype QStringView::lastIndexOf(QLatin1String s, Qt::CaseSensitivity cs)


static void _init_f_lastIndexOf_c3917 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<QLatin1String > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_1);
  decl->set_return<qsizetype > ();
}

static void _call_f_lastIndexOf_c3917 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QLatin1String arg1 = gsi::arg_reader<QLatin1String >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg2 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<qsizetype > ((qsizetype)((QStringView *)cls)->lastIndexOf (arg1, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg2).cref()));
}


// qsizetype QStringView::lastIndexOf(QLatin1String s, qsizetype from, Qt::CaseSensitivity cs)


static void _init_f_lastIndexOf_c5251 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<QLatin1String > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("from");
  decl->add_arg<qsizetype > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_2);
  decl->set_return<qsizetype > ();
}

static void _call_f_lastIndexOf_c5251 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QLatin1String arg1 = gsi::arg_reader<QLatin1String >() (args, heap);
  qsizetype arg2 = gsi::arg_reader<qsizetype >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg3 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<qsizetype > ((qsizetype)((QStringView *)cls)->lastIndexOf (arg1, arg2, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg3).cref()));
}


// qsizetype QStringView::lastIndexOf(const QRegularExpression &re, qsizetype from, QRegularExpressionMatch *rmatch)


static void _init_f_lastIndexOf_c7404 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("re");
  decl->add_arg<const QRegularExpression & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("from");
  decl->add_arg<qsizetype > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("rmatch", true, "nullptr");
  decl->add_arg<QRegularExpressionMatch * > (argspec_2);
  decl->set_return<qsizetype > ();
}

static void _call_f_lastIndexOf_c7404 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QRegularExpression &arg1 = gsi::arg_reader<const QRegularExpression & >() (args, heap);
  qsizetype arg2 = gsi::arg_reader<qsizetype >() (args, heap);
  QRegularExpressionMatch *arg3 = args ? gsi::arg_reader<QRegularExpressionMatch * >() (args, heap) : gsi::arg_maker<QRegularExpressionMatch * >() (nullptr, heap);
  ret.write<qsizetype > ((qsizetype)((QStringView *)cls)->lastIndexOf (arg1, arg2, arg3));
}


// QStringView QStringView::left(qsizetype n)


static void _init_f_left_c1442 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("n");
  decl->add_arg<qsizetype > (argspec_0);
  decl->set_return<QStringView > ();
}

static void _call_f_left_c1442 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qsizetype arg1 = gsi::arg_reader<qsizetype >() (args, heap);
  ret.write<QStringView > ((QStringView)((QStringView *)cls)->left (arg1));
}


// qsizetype QStringView::length()


static void _init_f_length_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qsizetype > ();
}

static void _call_f_length_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qsizetype > ((qsizetype)((QStringView *)cls)->length ());
}


// QStringView QStringView::mid(qsizetype pos, qsizetype n)


static void _init_f_mid_c2776 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pos");
  decl->add_arg<qsizetype > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("n", true, "-1");
  decl->add_arg<qsizetype > (argspec_1);
  decl->set_return<QStringView > ();
}

static void _call_f_mid_c2776 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qsizetype arg1 = gsi::arg_reader<qsizetype >() (args, heap);
  qsizetype arg2 = args ? gsi::arg_reader<qsizetype >() (args, heap) : gsi::arg_maker<qsizetype >() (-1, heap);
  ret.write<QStringView > ((QStringView)((QStringView *)cls)->mid (arg1, arg2));
}


// QChar QStringView::operator[](qsizetype n)


static void _init_f_operator_index__c1442 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("n");
  decl->add_arg<qsizetype > (argspec_0);
  decl->set_return<qt_gsi::Converter<QChar>::target_type > ();
}

static void _call_f_operator_index__c1442 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qsizetype arg1 = gsi::arg_reader<qsizetype >() (args, heap);
  ret.write<qt_gsi::Converter<QChar>::target_type > ((qt_gsi::Converter<QChar>::target_type)qt_gsi::CppToQtAdaptor<QChar>(((QStringView *)cls)->operator[] (arg1)));
}


// std::reverse_iterator<QStringView::const_iterator> QStringView::rbegin()


static void _init_f_rbegin_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<std::reverse_iterator<QStringView::const_iterator> > ();
}

static void _call_f_rbegin_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<std::reverse_iterator<QStringView::const_iterator> > ((std::reverse_iterator<QStringView::const_iterator>)((QStringView *)cls)->rbegin ());
}


// std::reverse_iterator<QStringView::const_iterator> QStringView::rend()


static void _init_f_rend_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<std::reverse_iterator<QStringView::const_iterator> > ();
}

static void _call_f_rend_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<std::reverse_iterator<QStringView::const_iterator> > ((std::reverse_iterator<QStringView::const_iterator>)((QStringView *)cls)->rend ());
}


// QStringView QStringView::right(qsizetype n)


static void _init_f_right_c1442 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("n");
  decl->add_arg<qsizetype > (argspec_0);
  decl->set_return<QStringView > ();
}

static void _call_f_right_c1442 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qsizetype arg1 = gsi::arg_reader<qsizetype >() (args, heap);
  ret.write<QStringView > ((QStringView)((QStringView *)cls)->right (arg1));
}


// qsizetype QStringView::size()


static void _init_f_size_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qsizetype > ();
}

static void _call_f_size_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qsizetype > ((qsizetype)((QStringView *)cls)->size ());
}


// QStringView QStringView::sliced(qsizetype pos)


static void _init_f_sliced_c1442 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pos");
  decl->add_arg<qsizetype > (argspec_0);
  decl->set_return<QStringView > ();
}

static void _call_f_sliced_c1442 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qsizetype arg1 = gsi::arg_reader<qsizetype >() (args, heap);
  ret.write<QStringView > ((QStringView)((QStringView *)cls)->sliced (arg1));
}


// QStringView QStringView::sliced(qsizetype pos, qsizetype n)


static void _init_f_sliced_c2776 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pos");
  decl->add_arg<qsizetype > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("n");
  decl->add_arg<qsizetype > (argspec_1);
  decl->set_return<QStringView > ();
}

static void _call_f_sliced_c2776 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qsizetype arg1 = gsi::arg_reader<qsizetype >() (args, heap);
  qsizetype arg2 = gsi::arg_reader<qsizetype >() (args, heap);
  ret.write<QStringView > ((QStringView)((QStringView *)cls)->sliced (arg1, arg2));
}


// QList<QStringView> QStringView::split(QStringView sep, QFlags<Qt::SplitBehaviorFlags> behavior, Qt::CaseSensitivity cs)


static void _init_f_split_c6945 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("sep");
  decl->add_arg<QStringView > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("behavior", true, "Qt::KeepEmptyParts");
  decl->add_arg<QFlags<Qt::SplitBehaviorFlags> > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_2);
  decl->set_return<QList<QStringView> > ();
}

static void _call_f_split_c6945 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QStringView arg1 = gsi::arg_reader<QStringView >() (args, heap);
  QFlags<Qt::SplitBehaviorFlags> arg2 = args ? gsi::arg_reader<QFlags<Qt::SplitBehaviorFlags> >() (args, heap) : gsi::arg_maker<QFlags<Qt::SplitBehaviorFlags> >() (Qt::KeepEmptyParts, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg3 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<QList<QStringView> > ((QList<QStringView>)((QStringView *)cls)->split (arg1, arg2, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg3).cref()));
}


// QList<QStringView> QStringView::split(QChar sep, QFlags<Qt::SplitBehaviorFlags> behavior, Qt::CaseSensitivity cs)


static void _init_f_split_c6285 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("sep");
  decl->add_arg<const qt_gsi::Converter<QChar>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("behavior", true, "Qt::KeepEmptyParts");
  decl->add_arg<QFlags<Qt::SplitBehaviorFlags> > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_2);
  decl->set_return<QList<QStringView> > ();
}

static void _call_f_split_c6285 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QChar>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QChar>::target_type & >() (args, heap);
  QFlags<Qt::SplitBehaviorFlags> arg2 = args ? gsi::arg_reader<QFlags<Qt::SplitBehaviorFlags> >() (args, heap) : gsi::arg_maker<QFlags<Qt::SplitBehaviorFlags> >() (Qt::KeepEmptyParts, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg3 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<QList<QStringView> > ((QList<QStringView>)((QStringView *)cls)->split (qt_gsi::QtToCppAdaptor<QChar>(arg1).cref(), arg2, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg3).cref()));
}


// QList<QStringView> QStringView::split(const QRegularExpression &sep, QFlags<Qt::SplitBehaviorFlags> behavior)


static void _init_f_split_c6358 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("sep");
  decl->add_arg<const QRegularExpression & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("behavior", true, "Qt::KeepEmptyParts");
  decl->add_arg<QFlags<Qt::SplitBehaviorFlags> > (argspec_1);
  decl->set_return<QList<QStringView> > ();
}

static void _call_f_split_c6358 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QRegularExpression &arg1 = gsi::arg_reader<const QRegularExpression & >() (args, heap);
  QFlags<Qt::SplitBehaviorFlags> arg2 = args ? gsi::arg_reader<QFlags<Qt::SplitBehaviorFlags> >() (args, heap) : gsi::arg_maker<QFlags<Qt::SplitBehaviorFlags> >() (Qt::KeepEmptyParts, heap);
  ret.write<QList<QStringView> > ((QList<QStringView>)((QStringView *)cls)->split (arg1, arg2));
}


// bool QStringView::startsWith(QStringView s, Qt::CaseSensitivity cs)


static void _init_f_startsWith_c3775 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<QStringView > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_startsWith_c3775 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QStringView arg1 = gsi::arg_reader<QStringView >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg2 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<bool > ((bool)((QStringView *)cls)->startsWith (arg1, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg2).cref()));
}


// bool QStringView::startsWith(QLatin1String s, Qt::CaseSensitivity cs)


static void _init_f_startsWith_c3917 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<QLatin1String > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("cs", true, "Qt::CaseSensitive");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_startsWith_c3917 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QLatin1String arg1 = gsi::arg_reader<QLatin1String >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg2 = args ? gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap) : gsi::arg_maker<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (qt_gsi::CppToQtReadAdaptor<Qt::CaseSensitivity>(heap, Qt::CaseSensitive), heap);
  ret.write<bool > ((bool)((QStringView *)cls)->startsWith (arg1, qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg2).cref()));
}


// bool QStringView::startsWith(QChar c)


static void _init_f_startsWith_c899 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("c");
  decl->add_arg<const qt_gsi::Converter<QChar>::target_type & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_startsWith_c899 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QChar>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QChar>::target_type & >() (args, heap);
  ret.write<bool > ((bool)((QStringView *)cls)->startsWith (qt_gsi::QtToCppAdaptor<QChar>(arg1).cref()));
}


// bool QStringView::startsWith(QChar c, Qt::CaseSensitivity cs)


static void _init_f_startsWith_c3115 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("c");
  decl->add_arg<const qt_gsi::Converter<QChar>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("cs");
  decl->add_arg<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_f_startsWith_c3115 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QChar>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QChar>::target_type & >() (args, heap);
  const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & arg2 = gsi::arg_reader<const qt_gsi::Converter<Qt::CaseSensitivity>::target_type & >() (args, heap);
  ret.write<bool > ((bool)((QStringView *)cls)->startsWith (qt_gsi::QtToCppAdaptor<QChar>(arg1).cref(), qt_gsi::QtToCppAdaptor<Qt::CaseSensitivity>(arg2).cref()));
}


// double QStringView::toDouble(bool *ok)


static void _init_f_toDouble_c1050 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("ok", true, "nullptr");
  decl->add_arg<bool * > (argspec_0);
  decl->set_return<double > ();
}

static void _call_f_toDouble_c1050 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool *arg1 = args ? gsi::arg_reader<bool * >() (args, heap) : gsi::arg_maker<bool * >() (nullptr, heap);
  ret.write<double > ((double)((QStringView *)cls)->toDouble (arg1));
}


// float QStringView::toFloat(bool *ok)


static void _init_f_toFloat_c1050 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("ok", true, "nullptr");
  decl->add_arg<bool * > (argspec_0);
  decl->set_return<float > ();
}

static void _call_f_toFloat_c1050 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool *arg1 = args ? gsi::arg_reader<bool * >() (args, heap) : gsi::arg_maker<bool * >() (nullptr, heap);
  ret.write<float > ((float)((QStringView *)cls)->toFloat (arg1));
}


// int QStringView::toInt(bool *ok, int base)


static void _init_f_toInt_c1709 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("ok", true, "nullptr");
  decl->add_arg<bool * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("base", true, "10");
  decl->add_arg<int > (argspec_1);
  decl->set_return<int > ();
}

static void _call_f_toInt_c1709 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool *arg1 = args ? gsi::arg_reader<bool * >() (args, heap) : gsi::arg_maker<bool * >() (nullptr, heap);
  int arg2 = args ? gsi::arg_reader<int >() (args, heap) : gsi::arg_maker<int >() (10, heap);
  ret.write<int > ((int)((QStringView *)cls)->toInt (arg1, arg2));
}


// QByteArray QStringView::toLatin1()


static void _init_f_toLatin1_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QByteArray > ();
}

static void _call_f_toLatin1_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QByteArray > ((QByteArray)((QStringView *)cls)->toLatin1 ());
}


// QByteArray QStringView::toLocal8Bit()


static void _init_f_toLocal8Bit_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QByteArray > ();
}

static void _call_f_toLocal8Bit_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QByteArray > ((QByteArray)((QStringView *)cls)->toLocal8Bit ());
}


// long int QStringView::toLong(bool *ok, int base)


static void _init_f_toLong_c1709 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("ok", true, "nullptr");
  decl->add_arg<bool * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("base", true, "10");
  decl->add_arg<int > (argspec_1);
  decl->set_return<long int > ();
}

static void _call_f_toLong_c1709 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool *arg1 = args ? gsi::arg_reader<bool * >() (args, heap) : gsi::arg_maker<bool * >() (nullptr, heap);
  int arg2 = args ? gsi::arg_reader<int >() (args, heap) : gsi::arg_maker<int >() (10, heap);
  ret.write<long int > ((long int)((QStringView *)cls)->toLong (arg1, arg2));
}


// qlonglong QStringView::toLongLong(bool *ok, int base)


static void _init_f_toLongLong_c1709 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("ok", true, "nullptr");
  decl->add_arg<bool * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("base", true, "10");
  decl->add_arg<int > (argspec_1);
  decl->set_return<qlonglong > ();
}

static void _call_f_toLongLong_c1709 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool *arg1 = args ? gsi::arg_reader<bool * >() (args, heap) : gsi::arg_maker<bool * >() (nullptr, heap);
  int arg2 = args ? gsi::arg_reader<int >() (args, heap) : gsi::arg_maker<int >() (10, heap);
  ret.write<qlonglong > ((qlonglong)((QStringView *)cls)->toLongLong (arg1, arg2));
}


// short int QStringView::toShort(bool *ok, int base)


static void _init_f_toShort_c1709 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("ok", true, "nullptr");
  decl->add_arg<bool * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("base", true, "10");
  decl->add_arg<int > (argspec_1);
  decl->set_return<short int > ();
}

static void _call_f_toShort_c1709 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool *arg1 = args ? gsi::arg_reader<bool * >() (args, heap) : gsi::arg_maker<bool * >() (nullptr, heap);
  int arg2 = args ? gsi::arg_reader<int >() (args, heap) : gsi::arg_maker<int >() (10, heap);
  ret.write<short int > ((short int)((QStringView *)cls)->toShort (arg1, arg2));
}


// QString QStringView::toString()


static void _init_f_toString_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QString > ();
}

static void _call_f_toString_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QString > ((QString)((QStringView *)cls)->toString ());
}


// unsigned int QStringView::toUInt(bool *ok, int base)


static void _init_f_toUInt_c1709 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("ok", true, "nullptr");
  decl->add_arg<bool * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("base", true, "10");
  decl->add_arg<int > (argspec_1);
  decl->set_return<unsigned int > ();
}

static void _call_f_toUInt_c1709 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool *arg1 = args ? gsi::arg_reader<bool * >() (args, heap) : gsi::arg_maker<bool * >() (nullptr, heap);
  int arg2 = args ? gsi::arg_reader<int >() (args, heap) : gsi::arg_maker<int >() (10, heap);
  ret.write<unsigned int > ((unsigned int)((QStringView *)cls)->toUInt (arg1, arg2));
}


// unsigned long int QStringView::toULong(bool *ok, int base)


static void _init_f_toULong_c1709 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("ok", true, "nullptr");
  decl->add_arg<bool * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("base", true, "10");
  decl->add_arg<int > (argspec_1);
  decl->set_return<unsigned long int > ();
}

static void _call_f_toULong_c1709 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool *arg1 = args ? gsi::arg_reader<bool * >() (args, heap) : gsi::arg_maker<bool * >() (nullptr, heap);
  int arg2 = args ? gsi::arg_reader<int >() (args, heap) : gsi::arg_maker<int >() (10, heap);
  ret.write<unsigned long int > ((unsigned long int)((QStringView *)cls)->toULong (arg1, arg2));
}


// qulonglong QStringView::toULongLong(bool *ok, int base)


static void _init_f_toULongLong_c1709 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("ok", true, "nullptr");
  decl->add_arg<bool * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("base", true, "10");
  decl->add_arg<int > (argspec_1);
  decl->set_return<qulonglong > ();
}

static void _call_f_toULongLong_c1709 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool *arg1 = args ? gsi::arg_reader<bool * >() (args, heap) : gsi::arg_maker<bool * >() (nullptr, heap);
  int arg2 = args ? gsi::arg_reader<int >() (args, heap) : gsi::arg_maker<int >() (10, heap);
  ret.write<qulonglong > ((qulonglong)((QStringView *)cls)->toULongLong (arg1, arg2));
}


// unsigned short int QStringView::toUShort(bool *ok, int base)


static void _init_f_toUShort_c1709 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("ok", true, "nullptr");
  decl->add_arg<bool * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("base", true, "10");
  decl->add_arg<int > (argspec_1);
  decl->set_return<unsigned short int > ();
}

static void _call_f_toUShort_c1709 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  bool *arg1 = args ? gsi::arg_reader<bool * >() (args, heap) : gsi::arg_maker<bool * >() (nullptr, heap);
  int arg2 = args ? gsi::arg_reader<int >() (args, heap) : gsi::arg_maker<int >() (10, heap);
  ret.write<unsigned short int > ((unsigned short int)((QStringView *)cls)->toUShort (arg1, arg2));
}


// QList<uint> QStringView::toUcs4()


static void _init_f_toUcs4_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QList<uint> > ();
}

static void _call_f_toUcs4_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QList<uint> > ((QList<uint>)((QStringView *)cls)->toUcs4 ());
}


// QByteArray QStringView::toUtf8()


static void _init_f_toUtf8_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QByteArray > ();
}

static void _call_f_toUtf8_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QByteArray > ((QByteArray)((QStringView *)cls)->toUtf8 ());
}


// qsizetype QStringView::toWCharArray(wchar_t *array)


static void _init_f_toWCharArray_c1366 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("array");
  decl->add_arg<wchar_t * > (argspec_0);
  decl->set_return<qsizetype > ();
}

static void _call_f_toWCharArray_c1366 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  wchar_t *arg1 = gsi::arg_reader<wchar_t * >() (args, heap);
  ret.write<qsizetype > ((qsizetype)((QStringView *)cls)->toWCharArray (arg1));
}


// QStringView QStringView::trimmed()


static void _init_f_trimmed_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QStringView > ();
}

static void _call_f_trimmed_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QStringView > ((QStringView)((QStringView *)cls)->trimmed ());
}


// void QStringView::truncate(qsizetype n)


static void _init_f_truncate_1442 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("n");
  decl->add_arg<qsizetype > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_truncate_1442 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qsizetype arg1 = gsi::arg_reader<qsizetype >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QStringView *)cls)->truncate (arg1);
}


// const char16_t *QStringView::utf16()


static void _init_f_utf16_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<const char16_t * > ();
}

static void _call_f_utf16_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<const char16_t * > ((const char16_t *)((QStringView *)cls)->utf16 ());
}



namespace gsi
{

static gsi::Methods methods_QStringView () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QStringView::QStringView()\nThis method creates an object of class QStringView.", &_init_ctor_QStringView_0, &_call_ctor_QStringView_0);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QStringView::QStringView(std::nullptr_t)\nThis method creates an object of class QStringView.", &_init_ctor_QStringView_1879, &_call_ctor_QStringView_1879);
  methods += new qt_gsi::GenericMethod ("at", "@brief Method QChar QStringView::at(qsizetype n)\n", true, &_init_f_at_c1442, &_call_f_at_c1442);
  methods += new qt_gsi::GenericMethod ("back", "@brief Method QChar QStringView::back()\n", true, &_init_f_back_c0, &_call_f_back_c0);
  methods += new qt_gsi::GenericMethod ("begin", "@brief Method const QChar *QStringView::begin()\n", true, &_init_f_begin_c0, &_call_f_begin_c0);
  methods += new qt_gsi::GenericMethod ("cbegin", "@brief Method const QChar *QStringView::cbegin()\n", true, &_init_f_cbegin_c0, &_call_f_cbegin_c0);
  methods += new qt_gsi::GenericMethod ("cend", "@brief Method const QChar *QStringView::cend()\n", true, &_init_f_cend_c0, &_call_f_cend_c0);
  methods += new qt_gsi::GenericMethod ("chop", "@brief Method void QStringView::chop(qsizetype n)\n", false, &_init_f_chop_1442, &_call_f_chop_1442);
  methods += new qt_gsi::GenericMethod ("chopped", "@brief Method QStringView QStringView::chopped(qsizetype n)\n", true, &_init_f_chopped_c1442, &_call_f_chopped_c1442);
  methods += new qt_gsi::GenericMethod ("compare", "@brief Method int QStringView::compare(QStringView other, Qt::CaseSensitivity cs)\n", true, &_init_f_compare_c3775, &_call_f_compare_c3775);
  methods += new qt_gsi::GenericMethod ("compare", "@brief Method int QStringView::compare(QLatin1String other, Qt::CaseSensitivity cs)\n", true, &_init_f_compare_c3917, &_call_f_compare_c3917);
  methods += new qt_gsi::GenericMethod ("compare", "@brief Method int QStringView::compare(QChar c)\n", true, &_init_f_compare_c899, &_call_f_compare_c899);
  methods += new qt_gsi::GenericMethod ("compare", "@brief Method int QStringView::compare(QChar c, Qt::CaseSensitivity cs)\n", true, &_init_f_compare_c3115, &_call_f_compare_c3115);
  methods += new qt_gsi::GenericMethod ("constBegin", "@brief Method const QChar *QStringView::constBegin()\n", true, &_init_f_constBegin_c0, &_call_f_constBegin_c0);
  methods += new qt_gsi::GenericMethod ("constData", "@brief Method const QChar *QStringView::constData()\n", true, &_init_f_constData_c0, &_call_f_constData_c0);
  methods += new qt_gsi::GenericMethod ("constEnd", "@brief Method const QChar *QStringView::constEnd()\n", true, &_init_f_constEnd_c0, &_call_f_constEnd_c0);
  methods += new qt_gsi::GenericMethod ("contains", "@brief Method bool QStringView::contains(QChar c, Qt::CaseSensitivity cs)\n", true, &_init_f_contains_c3115, &_call_f_contains_c3115);
  methods += new qt_gsi::GenericMethod ("contains", "@brief Method bool QStringView::contains(QStringView s, Qt::CaseSensitivity cs)\n", true, &_init_f_contains_c3775, &_call_f_contains_c3775);
  methods += new qt_gsi::GenericMethod ("contains", "@brief Method bool QStringView::contains(QLatin1String s, Qt::CaseSensitivity cs)\n", true, &_init_f_contains_c3917, &_call_f_contains_c3917);
  methods += new qt_gsi::GenericMethod ("contains", "@brief Method bool QStringView::contains(const QRegularExpression &re, QRegularExpressionMatch *rmatch)\n", true, &_init_f_contains_c6070, &_call_f_contains_c6070);
  methods += new qt_gsi::GenericMethod ("count", "@brief Method qsizetype QStringView::count(QChar c, Qt::CaseSensitivity cs)\n", true, &_init_f_count_c3115, &_call_f_count_c3115);
  methods += new qt_gsi::GenericMethod ("count", "@brief Method qsizetype QStringView::count(QStringView s, Qt::CaseSensitivity cs)\n", true, &_init_f_count_c3775, &_call_f_count_c3775);
  methods += new qt_gsi::GenericMethod ("count", "@brief Method qsizetype QStringView::count(const QRegularExpression &re)\n", true, &_init_f_count_c3188, &_call_f_count_c3188);
  methods += new qt_gsi::GenericMethod ("crbegin", "@brief Method std::reverse_iterator<QStringView::const_iterator> QStringView::crbegin()\n", true, &_init_f_crbegin_c0, &_call_f_crbegin_c0);
  methods += new qt_gsi::GenericMethod ("crend", "@brief Method std::reverse_iterator<QStringView::const_iterator> QStringView::crend()\n", true, &_init_f_crend_c0, &_call_f_crend_c0);
  methods += new qt_gsi::GenericMethod ("data", "@brief Method const QChar *QStringView::data()\n", true, &_init_f_data_c0, &_call_f_data_c0);
  methods += new qt_gsi::GenericMethod ("empty", "@brief Method bool QStringView::empty()\n", true, &_init_f_empty_c0, &_call_f_empty_c0);
  methods += new qt_gsi::GenericMethod ("end", "@brief Method const QChar *QStringView::end()\n", true, &_init_f_end_c0, &_call_f_end_c0);
  methods += new qt_gsi::GenericMethod ("endsWith", "@brief Method bool QStringView::endsWith(QStringView s, Qt::CaseSensitivity cs)\n", true, &_init_f_endsWith_c3775, &_call_f_endsWith_c3775);
  methods += new qt_gsi::GenericMethod ("endsWith", "@brief Method bool QStringView::endsWith(QLatin1String s, Qt::CaseSensitivity cs)\n", true, &_init_f_endsWith_c3917, &_call_f_endsWith_c3917);
  methods += new qt_gsi::GenericMethod ("endsWith", "@brief Method bool QStringView::endsWith(QChar c)\n", true, &_init_f_endsWith_c899, &_call_f_endsWith_c899);
  methods += new qt_gsi::GenericMethod ("endsWith", "@brief Method bool QStringView::endsWith(QChar c, Qt::CaseSensitivity cs)\n", true, &_init_f_endsWith_c3115, &_call_f_endsWith_c3115);
  methods += new qt_gsi::GenericMethod ("first", "@brief Method QStringView QStringView::first(qsizetype n)\n", true, &_init_f_first_c1442, &_call_f_first_c1442);
  methods += new qt_gsi::GenericMethod ("first", "@brief Method QChar QStringView::first()\n", true, &_init_f_first_c0, &_call_f_first_c0);
  methods += new qt_gsi::GenericMethod ("front", "@brief Method QChar QStringView::front()\n", true, &_init_f_front_c0, &_call_f_front_c0);
  methods += new qt_gsi::GenericMethod ("indexOf", "@brief Method qsizetype QStringView::indexOf(QChar c, qsizetype from, Qt::CaseSensitivity cs)\n", true, &_init_f_indexOf_c4449, &_call_f_indexOf_c4449);
  methods += new qt_gsi::GenericMethod ("indexOf", "@brief Method qsizetype QStringView::indexOf(QStringView s, qsizetype from, Qt::CaseSensitivity cs)\n", true, &_init_f_indexOf_c5109, &_call_f_indexOf_c5109);
  methods += new qt_gsi::GenericMethod ("indexOf", "@brief Method qsizetype QStringView::indexOf(QLatin1String s, qsizetype from, Qt::CaseSensitivity cs)\n", true, &_init_f_indexOf_c5251, &_call_f_indexOf_c5251);
  methods += new qt_gsi::GenericMethod ("indexOf", "@brief Method qsizetype QStringView::indexOf(const QRegularExpression &re, qsizetype from, QRegularExpressionMatch *rmatch)\n", true, &_init_f_indexOf_c7404, &_call_f_indexOf_c7404);
  methods += new qt_gsi::GenericMethod ("isEmpty?", "@brief Method bool QStringView::isEmpty()\n", true, &_init_f_isEmpty_c0, &_call_f_isEmpty_c0);
  methods += new qt_gsi::GenericMethod ("isNull?", "@brief Method bool QStringView::isNull()\n", true, &_init_f_isNull_c0, &_call_f_isNull_c0);
  methods += new qt_gsi::GenericMethod ("isRightToLeft?", "@brief Method bool QStringView::isRightToLeft()\n", true, &_init_f_isRightToLeft_c0, &_call_f_isRightToLeft_c0);
  methods += new qt_gsi::GenericMethod ("isValidUtf16?", "@brief Method bool QStringView::isValidUtf16()\n", true, &_init_f_isValidUtf16_c0, &_call_f_isValidUtf16_c0);
  methods += new qt_gsi::GenericMethod ("last", "@brief Method QStringView QStringView::last(qsizetype n)\n", true, &_init_f_last_c1442, &_call_f_last_c1442);
  methods += new qt_gsi::GenericMethod ("last", "@brief Method QChar QStringView::last()\n", true, &_init_f_last_c0, &_call_f_last_c0);
  methods += new qt_gsi::GenericMethod ("lastIndexOf", "@brief Method qsizetype QStringView::lastIndexOf(QChar c, qsizetype from, Qt::CaseSensitivity cs)\n", true, &_init_f_lastIndexOf_c4449, &_call_f_lastIndexOf_c4449);
  methods += new qt_gsi::GenericMethod ("lastIndexOf", "@brief Method qsizetype QStringView::lastIndexOf(QStringView s, Qt::CaseSensitivity cs)\n", true, &_init_f_lastIndexOf_c3775, &_call_f_lastIndexOf_c3775);
  methods += new qt_gsi::GenericMethod ("lastIndexOf", "@brief Method qsizetype QStringView::lastIndexOf(QStringView s, qsizetype from, Qt::CaseSensitivity cs)\n", true, &_init_f_lastIndexOf_c5109, &_call_f_lastIndexOf_c5109);
  methods += new qt_gsi::GenericMethod ("lastIndexOf", "@brief Method qsizetype QStringView::lastIndexOf(QLatin1String s, Qt::CaseSensitivity cs)\n", true, &_init_f_lastIndexOf_c3917, &_call_f_lastIndexOf_c3917);
  methods += new qt_gsi::GenericMethod ("lastIndexOf", "@brief Method qsizetype QStringView::lastIndexOf(QLatin1String s, qsizetype from, Qt::CaseSensitivity cs)\n", true, &_init_f_lastIndexOf_c5251, &_call_f_lastIndexOf_c5251);
  methods += new qt_gsi::GenericMethod ("lastIndexOf", "@brief Method qsizetype QStringView::lastIndexOf(const QRegularExpression &re, qsizetype from, QRegularExpressionMatch *rmatch)\n", true, &_init_f_lastIndexOf_c7404, &_call_f_lastIndexOf_c7404);
  methods += new qt_gsi::GenericMethod ("left", "@brief Method QStringView QStringView::left(qsizetype n)\n", true, &_init_f_left_c1442, &_call_f_left_c1442);
  methods += new qt_gsi::GenericMethod ("length", "@brief Method qsizetype QStringView::length()\n", true, &_init_f_length_c0, &_call_f_length_c0);
  methods += new qt_gsi::GenericMethod ("mid", "@brief Method QStringView QStringView::mid(qsizetype pos, qsizetype n)\n", true, &_init_f_mid_c2776, &_call_f_mid_c2776);
  methods += new qt_gsi::GenericMethod ("[]", "@brief Method QChar QStringView::operator[](qsizetype n)\n", true, &_init_f_operator_index__c1442, &_call_f_operator_index__c1442);
  methods += new qt_gsi::GenericMethod ("rbegin", "@brief Method std::reverse_iterator<QStringView::const_iterator> QStringView::rbegin()\n", true, &_init_f_rbegin_c0, &_call_f_rbegin_c0);
  methods += new qt_gsi::GenericMethod ("rend", "@brief Method std::reverse_iterator<QStringView::const_iterator> QStringView::rend()\n", true, &_init_f_rend_c0, &_call_f_rend_c0);
  methods += new qt_gsi::GenericMethod ("right", "@brief Method QStringView QStringView::right(qsizetype n)\n", true, &_init_f_right_c1442, &_call_f_right_c1442);
  methods += new qt_gsi::GenericMethod ("size", "@brief Method qsizetype QStringView::size()\n", true, &_init_f_size_c0, &_call_f_size_c0);
  methods += new qt_gsi::GenericMethod ("sliced", "@brief Method QStringView QStringView::sliced(qsizetype pos)\n", true, &_init_f_sliced_c1442, &_call_f_sliced_c1442);
  methods += new qt_gsi::GenericMethod ("sliced", "@brief Method QStringView QStringView::sliced(qsizetype pos, qsizetype n)\n", true, &_init_f_sliced_c2776, &_call_f_sliced_c2776);
  methods += new qt_gsi::GenericMethod ("split", "@brief Method QList<QStringView> QStringView::split(QStringView sep, QFlags<Qt::SplitBehaviorFlags> behavior, Qt::CaseSensitivity cs)\n", true, &_init_f_split_c6945, &_call_f_split_c6945);
  methods += new qt_gsi::GenericMethod ("split", "@brief Method QList<QStringView> QStringView::split(QChar sep, QFlags<Qt::SplitBehaviorFlags> behavior, Qt::CaseSensitivity cs)\n", true, &_init_f_split_c6285, &_call_f_split_c6285);
  methods += new qt_gsi::GenericMethod ("split", "@brief Method QList<QStringView> QStringView::split(const QRegularExpression &sep, QFlags<Qt::SplitBehaviorFlags> behavior)\n", true, &_init_f_split_c6358, &_call_f_split_c6358);
  methods += new qt_gsi::GenericMethod ("startsWith", "@brief Method bool QStringView::startsWith(QStringView s, Qt::CaseSensitivity cs)\n", true, &_init_f_startsWith_c3775, &_call_f_startsWith_c3775);
  methods += new qt_gsi::GenericMethod ("startsWith", "@brief Method bool QStringView::startsWith(QLatin1String s, Qt::CaseSensitivity cs)\n", true, &_init_f_startsWith_c3917, &_call_f_startsWith_c3917);
  methods += new qt_gsi::GenericMethod ("startsWith", "@brief Method bool QStringView::startsWith(QChar c)\n", true, &_init_f_startsWith_c899, &_call_f_startsWith_c899);
  methods += new qt_gsi::GenericMethod ("startsWith", "@brief Method bool QStringView::startsWith(QChar c, Qt::CaseSensitivity cs)\n", true, &_init_f_startsWith_c3115, &_call_f_startsWith_c3115);
  methods += new qt_gsi::GenericMethod ("toDouble", "@brief Method double QStringView::toDouble(bool *ok)\n", true, &_init_f_toDouble_c1050, &_call_f_toDouble_c1050);
  methods += new qt_gsi::GenericMethod ("toFloat", "@brief Method float QStringView::toFloat(bool *ok)\n", true, &_init_f_toFloat_c1050, &_call_f_toFloat_c1050);
  methods += new qt_gsi::GenericMethod ("toInt", "@brief Method int QStringView::toInt(bool *ok, int base)\n", true, &_init_f_toInt_c1709, &_call_f_toInt_c1709);
  methods += new qt_gsi::GenericMethod ("toLatin1", "@brief Method QByteArray QStringView::toLatin1()\n", true, &_init_f_toLatin1_c0, &_call_f_toLatin1_c0);
  methods += new qt_gsi::GenericMethod ("toLocal8Bit", "@brief Method QByteArray QStringView::toLocal8Bit()\n", true, &_init_f_toLocal8Bit_c0, &_call_f_toLocal8Bit_c0);
  methods += new qt_gsi::GenericMethod ("toLong", "@brief Method long int QStringView::toLong(bool *ok, int base)\n", true, &_init_f_toLong_c1709, &_call_f_toLong_c1709);
  methods += new qt_gsi::GenericMethod ("toLongLong", "@brief Method qlonglong QStringView::toLongLong(bool *ok, int base)\n", true, &_init_f_toLongLong_c1709, &_call_f_toLongLong_c1709);
  methods += new qt_gsi::GenericMethod ("toShort", "@brief Method short int QStringView::toShort(bool *ok, int base)\n", true, &_init_f_toShort_c1709, &_call_f_toShort_c1709);
  methods += new qt_gsi::GenericMethod ("toString", "@brief Method QString QStringView::toString()\n", true, &_init_f_toString_c0, &_call_f_toString_c0);
  methods += new qt_gsi::GenericMethod ("toUInt", "@brief Method unsigned int QStringView::toUInt(bool *ok, int base)\n", true, &_init_f_toUInt_c1709, &_call_f_toUInt_c1709);
  methods += new qt_gsi::GenericMethod ("toULong", "@brief Method unsigned long int QStringView::toULong(bool *ok, int base)\n", true, &_init_f_toULong_c1709, &_call_f_toULong_c1709);
  methods += new qt_gsi::GenericMethod ("toULongLong", "@brief Method qulonglong QStringView::toULongLong(bool *ok, int base)\n", true, &_init_f_toULongLong_c1709, &_call_f_toULongLong_c1709);
  methods += new qt_gsi::GenericMethod ("toUShort", "@brief Method unsigned short int QStringView::toUShort(bool *ok, int base)\n", true, &_init_f_toUShort_c1709, &_call_f_toUShort_c1709);
  methods += new qt_gsi::GenericMethod ("toUcs4", "@brief Method QList<uint> QStringView::toUcs4()\n", true, &_init_f_toUcs4_c0, &_call_f_toUcs4_c0);
  methods += new qt_gsi::GenericMethod ("toUtf8", "@brief Method QByteArray QStringView::toUtf8()\n", true, &_init_f_toUtf8_c0, &_call_f_toUtf8_c0);
  methods += new qt_gsi::GenericMethod ("toWCharArray", "@brief Method qsizetype QStringView::toWCharArray(wchar_t *array)\n", true, &_init_f_toWCharArray_c1366, &_call_f_toWCharArray_c1366);
  methods += new qt_gsi::GenericMethod ("trimmed", "@brief Method QStringView QStringView::trimmed()\n", true, &_init_f_trimmed_c0, &_call_f_trimmed_c0);
  methods += new qt_gsi::GenericMethod ("truncate", "@brief Method void QStringView::truncate(qsizetype n)\n", false, &_init_f_truncate_1442, &_call_f_truncate_1442);
  methods += new qt_gsi::GenericMethod ("utf16", "@brief Method const char16_t *QStringView::utf16()\n", true, &_init_f_utf16_c0, &_call_f_utf16_c0);
  return methods;
}

gsi::Class<QStringView> decl_QStringView ("QtCore", "QStringView",
  methods_QStringView (),
  "@qt\n@brief Binding of QStringView");


GSI_QTCORE_PUBLIC gsi::Class<QStringView> &qtdecl_QStringView () { return decl_QStringView; }

}

