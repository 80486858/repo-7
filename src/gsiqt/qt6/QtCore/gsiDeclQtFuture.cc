
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQtFuture.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QtFuture>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include "gsiDeclQtCoreTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// namespace QtFuture

class QtFuture_Namespace { };

namespace gsi
{
gsi::Class<QtFuture_Namespace> decl_QtFuture_Namespace ("QtCore", "QtFuture",
  gsi::Methods(),
  "@qt\n@brief This class represents the QtFuture namespace");
}


//  Implementation of the enum wrapper class for QtFuture::Launch
namespace qt_gsi
{

static gsi::Enum<QtFuture::Launch> decl_QtFuture_Launch_Enum ("QtCore", "QtFuture_Launch",
    gsi::enum_const ("Sync", QtFuture::Launch::Sync, "@brief Enum constant QtFuture::Launch::Sync") +
    gsi::enum_const ("Async", QtFuture::Launch::Async, "@brief Enum constant QtFuture::Launch::Async") +
    gsi::enum_const ("Inherit", QtFuture::Launch::Inherit, "@brief Enum constant QtFuture::Launch::Inherit"),
  "@qt\n@brief This class represents the QtFuture::Launch enum");

static gsi::QFlagsClass<QtFuture::Launch > decl_QtFuture_Launch_Enums ("QtCore", "QtFuture_QFlags_Launch",
  "@qt\n@brief This class represents the QFlags<QtFuture::Launch> flag set");

static gsi::ClassExt<QtFuture_Namespace> decl_QtFuture_Launch_Enum_as_child (decl_QtFuture_Launch_Enum, "Launch");
static gsi::ClassExt<QtFuture_Namespace> decl_QtFuture_Launch_Enums_as_child (decl_QtFuture_Launch_Enums, "QFlags_Launch");

}

