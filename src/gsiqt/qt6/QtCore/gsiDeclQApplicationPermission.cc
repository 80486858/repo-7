
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQApplicationPermission.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QApplicationPermission>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include "gsiDeclQtCoreTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// namespace QApplicationPermission

class QApplicationPermission_Namespace { };

namespace gsi
{
gsi::Class<QApplicationPermission_Namespace> decl_QApplicationPermission_Namespace ("QtCore", "QApplicationPermission",
  gsi::Methods(),
  "@qt\n@brief This class represents the QApplicationPermission namespace");
}


//  Implementation of the enum wrapper class for QApplicationPermission::PermissionResult
namespace qt_gsi
{

static gsi::Enum<QApplicationPermission::PermissionResult> decl_QApplicationPermission_PermissionResult_Enum ("QtCore", "QApplicationPermission_PermissionResult",
    gsi::enum_const ("Undetermined", QApplicationPermission::Undetermined, "@brief Enum constant QApplicationPermission::Undetermined") +
    gsi::enum_const ("Authorized", QApplicationPermission::Authorized, "@brief Enum constant QApplicationPermission::Authorized") +
    gsi::enum_const ("Denied", QApplicationPermission::Denied, "@brief Enum constant QApplicationPermission::Denied"),
  "@qt\n@brief This class represents the QApplicationPermission::PermissionResult enum");

static gsi::QFlagsClass<QApplicationPermission::PermissionResult > decl_QApplicationPermission_PermissionResult_Enums ("QtCore", "QApplicationPermission_QFlags_PermissionResult",
  "@qt\n@brief This class represents the QFlags<QApplicationPermission::PermissionResult> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<QApplicationPermission_Namespace> inject_QApplicationPermission_PermissionResult_Enum_in_parent (decl_QApplicationPermission_PermissionResult_Enum.defs ());
static gsi::ClassExt<QApplicationPermission_Namespace> decl_QApplicationPermission_PermissionResult_Enum_as_child (decl_QApplicationPermission_PermissionResult_Enum, "PermissionResult");
static gsi::ClassExt<QApplicationPermission_Namespace> decl_QApplicationPermission_PermissionResult_Enums_as_child (decl_QApplicationPermission_PermissionResult_Enums, "QFlags_PermissionResult");

}


//  Implementation of the enum wrapper class for QApplicationPermission::PermissionType
namespace qt_gsi
{

static gsi::Enum<QApplicationPermission::PermissionType> decl_QApplicationPermission_PermissionType_Enum ("QtCore", "QApplicationPermission_PermissionType",
    gsi::enum_const ("Camera", QApplicationPermission::Camera, "@brief Enum constant QApplicationPermission::Camera") +
    gsi::enum_const ("Microphone", QApplicationPermission::Microphone, "@brief Enum constant QApplicationPermission::Microphone") +
    gsi::enum_const ("Bluetooth", QApplicationPermission::Bluetooth, "@brief Enum constant QApplicationPermission::Bluetooth") +
    gsi::enum_const ("Location", QApplicationPermission::Location, "@brief Enum constant QApplicationPermission::Location") +
    gsi::enum_const ("PreciseLocation", QApplicationPermission::PreciseLocation, "@brief Enum constant QApplicationPermission::PreciseLocation") +
    gsi::enum_const ("BackgroundLocation", QApplicationPermission::BackgroundLocation, "@brief Enum constant QApplicationPermission::BackgroundLocation") +
    gsi::enum_const ("PreciseBackgroundLocation", QApplicationPermission::PreciseBackgroundLocation, "@brief Enum constant QApplicationPermission::PreciseBackgroundLocation") +
    gsi::enum_const ("BodySensors", QApplicationPermission::BodySensors, "@brief Enum constant QApplicationPermission::BodySensors") +
    gsi::enum_const ("PhysicalActivity", QApplicationPermission::PhysicalActivity, "@brief Enum constant QApplicationPermission::PhysicalActivity") +
    gsi::enum_const ("Contacts", QApplicationPermission::Contacts, "@brief Enum constant QApplicationPermission::Contacts") +
    gsi::enum_const ("Storage", QApplicationPermission::Storage, "@brief Enum constant QApplicationPermission::Storage") +
    gsi::enum_const ("WriteStorage", QApplicationPermission::WriteStorage, "@brief Enum constant QApplicationPermission::WriteStorage") +
    gsi::enum_const ("Calendar", QApplicationPermission::Calendar, "@brief Enum constant QApplicationPermission::Calendar"),
  "@qt\n@brief This class represents the QApplicationPermission::PermissionType enum");

static gsi::QFlagsClass<QApplicationPermission::PermissionType > decl_QApplicationPermission_PermissionType_Enums ("QtCore", "QApplicationPermission_QFlags_PermissionType",
  "@qt\n@brief This class represents the QFlags<QApplicationPermission::PermissionType> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<QApplicationPermission_Namespace> inject_QApplicationPermission_PermissionType_Enum_in_parent (decl_QApplicationPermission_PermissionType_Enum.defs ());
static gsi::ClassExt<QApplicationPermission_Namespace> decl_QApplicationPermission_PermissionType_Enum_as_child (decl_QApplicationPermission_PermissionType_Enum, "PermissionType");
static gsi::ClassExt<QApplicationPermission_Namespace> decl_QApplicationPermission_PermissionType_Enums_as_child (decl_QApplicationPermission_PermissionType_Enums, "QFlags_PermissionType");

}

