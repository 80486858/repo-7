
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQtMetaContainerPrivate.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QtMetaContainerPrivate>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include "gsiDeclQtCoreTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// namespace QtMetaContainerPrivate

class QtMetaContainerPrivate_Namespace { };

namespace gsi
{
gsi::Class<QtMetaContainerPrivate_Namespace> decl_QtMetaContainerPrivate_Namespace ("QtCore", "QtMetaContainerPrivate",
  gsi::Methods(),
  "@qt\n@brief This class represents the QtMetaContainerPrivate namespace");
}


//  Implementation of the enum wrapper class for QtMetaContainerPrivate::AddRemoveCapability
namespace qt_gsi
{

static gsi::Enum<QtMetaContainerPrivate::AddRemoveCapability> decl_QtMetaContainerPrivate_AddRemoveCapability_Enum ("QtCore", "QtMetaContainerPrivate_AddRemoveCapability",
    gsi::enum_const ("CanAddAtBegin", QtMetaContainerPrivate::CanAddAtBegin, "@brief Enum constant QtMetaContainerPrivate::CanAddAtBegin") +
    gsi::enum_const ("CanRemoveAtBegin", QtMetaContainerPrivate::CanRemoveAtBegin, "@brief Enum constant QtMetaContainerPrivate::CanRemoveAtBegin") +
    gsi::enum_const ("CanAddAtEnd", QtMetaContainerPrivate::CanAddAtEnd, "@brief Enum constant QtMetaContainerPrivate::CanAddAtEnd") +
    gsi::enum_const ("CanRemoveAtEnd", QtMetaContainerPrivate::CanRemoveAtEnd, "@brief Enum constant QtMetaContainerPrivate::CanRemoveAtEnd"),
  "@qt\n@brief This class represents the QtMetaContainerPrivate::AddRemoveCapability enum");

static gsi::QFlagsClass<QtMetaContainerPrivate::AddRemoveCapability > decl_QtMetaContainerPrivate_AddRemoveCapability_Enums ("QtCore", "QtMetaContainerPrivate_QFlags_AddRemoveCapability",
  "@qt\n@brief This class represents the QFlags<QtMetaContainerPrivate::AddRemoveCapability> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<QtMetaContainerPrivate_Namespace> inject_QtMetaContainerPrivate_AddRemoveCapability_Enum_in_parent (decl_QtMetaContainerPrivate_AddRemoveCapability_Enum.defs ());
static gsi::ClassExt<QtMetaContainerPrivate_Namespace> decl_QtMetaContainerPrivate_AddRemoveCapability_Enum_as_child (decl_QtMetaContainerPrivate_AddRemoveCapability_Enum, "AddRemoveCapability");
static gsi::ClassExt<QtMetaContainerPrivate_Namespace> decl_QtMetaContainerPrivate_AddRemoveCapability_Enums_as_child (decl_QtMetaContainerPrivate_AddRemoveCapability_Enums, "QFlags_AddRemoveCapability");

}


//  Implementation of the enum wrapper class for QtMetaContainerPrivate::IteratorCapability
namespace qt_gsi
{

static gsi::Enum<QtMetaContainerPrivate::IteratorCapability> decl_QtMetaContainerPrivate_IteratorCapability_Enum ("QtCore", "QtMetaContainerPrivate_IteratorCapability",
    gsi::enum_const ("InputCapability", QtMetaContainerPrivate::InputCapability, "@brief Enum constant QtMetaContainerPrivate::InputCapability") +
    gsi::enum_const ("ForwardCapability", QtMetaContainerPrivate::ForwardCapability, "@brief Enum constant QtMetaContainerPrivate::ForwardCapability") +
    gsi::enum_const ("BiDirectionalCapability", QtMetaContainerPrivate::BiDirectionalCapability, "@brief Enum constant QtMetaContainerPrivate::BiDirectionalCapability") +
    gsi::enum_const ("RandomAccessCapability", QtMetaContainerPrivate::RandomAccessCapability, "@brief Enum constant QtMetaContainerPrivate::RandomAccessCapability"),
  "@qt\n@brief This class represents the QtMetaContainerPrivate::IteratorCapability enum");

static gsi::QFlagsClass<QtMetaContainerPrivate::IteratorCapability > decl_QtMetaContainerPrivate_IteratorCapability_Enums ("QtCore", "QtMetaContainerPrivate_QFlags_IteratorCapability",
  "@qt\n@brief This class represents the QFlags<QtMetaContainerPrivate::IteratorCapability> flag set");

//  Inject the declarations into the parent
static gsi::ClassExt<QtMetaContainerPrivate_Namespace> inject_QtMetaContainerPrivate_IteratorCapability_Enum_in_parent (decl_QtMetaContainerPrivate_IteratorCapability_Enum.defs ());
static gsi::ClassExt<QtMetaContainerPrivate_Namespace> decl_QtMetaContainerPrivate_IteratorCapability_Enum_as_child (decl_QtMetaContainerPrivate_IteratorCapability_Enum, "IteratorCapability");
static gsi::ClassExt<QtMetaContainerPrivate_Namespace> decl_QtMetaContainerPrivate_IteratorCapability_Enums_as_child (decl_QtMetaContainerPrivate_IteratorCapability_Enums, "QFlags_IteratorCapability");

}

