
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQUntypedBindable.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QUntypedBindable>
#include <QMetaType>
#include <QPropertyBindingSourceLocation>
#include <QPropertyObserver>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QUntypedBindable

//  Constructor QUntypedBindable::QUntypedBindable()


static void _init_ctor_QUntypedBindable_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QUntypedBindable> ();
}

static void _call_ctor_QUntypedBindable_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QUntypedBindable *> (new QUntypedBindable ());
}


// QUntypedPropertyBinding QUntypedBindable::binding()


static void _init_f_binding_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QUntypedPropertyBinding > ();
}

static void _call_f_binding_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QUntypedPropertyBinding > ((QUntypedPropertyBinding)((QUntypedBindable *)cls)->binding ());
}


// bool QUntypedBindable::hasBinding()


static void _init_f_hasBinding_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_hasBinding_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QUntypedBindable *)cls)->hasBinding ());
}


// bool QUntypedBindable::isBindable()


static void _init_f_isBindable_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isBindable_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QUntypedBindable *)cls)->isBindable ());
}


// bool QUntypedBindable::isReadOnly()


static void _init_f_isReadOnly_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isReadOnly_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QUntypedBindable *)cls)->isReadOnly ());
}


// bool QUntypedBindable::isValid()


static void _init_f_isValid_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isValid_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QUntypedBindable *)cls)->isValid ());
}


// QUntypedPropertyBinding QUntypedBindable::makeBinding(const QPropertyBindingSourceLocation &location)


static void _init_f_makeBinding_c4412 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("location", true, "QPropertyBindingSourceLocation(std::experimental::source_location::current())");
  decl->add_arg<const QPropertyBindingSourceLocation & > (argspec_0);
  decl->set_return<QUntypedPropertyBinding > ();
}

static void _call_f_makeBinding_c4412 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QPropertyBindingSourceLocation &arg1 = args ? gsi::arg_reader<const QPropertyBindingSourceLocation & >() (args, heap) : gsi::arg_maker<const QPropertyBindingSourceLocation & >() (QPropertyBindingSourceLocation(std::experimental::source_location::current()), heap);
  ret.write<QUntypedPropertyBinding > ((QUntypedPropertyBinding)((QUntypedBindable *)cls)->makeBinding (arg1));
}


// QMetaType QUntypedBindable::metaType()


static void _init_f_metaType_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QMetaType > ();
}

static void _call_f_metaType_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QMetaType > ((QMetaType)((QUntypedBindable *)cls)->metaType ());
}


// void QUntypedBindable::observe(QPropertyObserver *observer)


static void _init_f_observe_c2412 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("observer");
  decl->add_arg<QPropertyObserver * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_observe_c2412 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QPropertyObserver *arg1 = gsi::arg_reader<QPropertyObserver * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QUntypedBindable *)cls)->observe (arg1);
}


// bool QUntypedBindable::setBinding(const QUntypedPropertyBinding &binding)


static void _init_f_setBinding_3707 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("binding");
  decl->add_arg<const QUntypedPropertyBinding & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_setBinding_3707 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QUntypedPropertyBinding &arg1 = gsi::arg_reader<const QUntypedPropertyBinding & >() (args, heap);
  ret.write<bool > ((bool)((QUntypedBindable *)cls)->setBinding (arg1));
}


// QUntypedPropertyBinding QUntypedBindable::takeBinding()


static void _init_f_takeBinding_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QUntypedPropertyBinding > ();
}

static void _call_f_takeBinding_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QUntypedPropertyBinding > ((QUntypedPropertyBinding)((QUntypedBindable *)cls)->takeBinding ());
}



namespace gsi
{

static gsi::Methods methods_QUntypedBindable () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QUntypedBindable::QUntypedBindable()\nThis method creates an object of class QUntypedBindable.", &_init_ctor_QUntypedBindable_0, &_call_ctor_QUntypedBindable_0);
  methods += new qt_gsi::GenericMethod ("binding", "@brief Method QUntypedPropertyBinding QUntypedBindable::binding()\n", true, &_init_f_binding_c0, &_call_f_binding_c0);
  methods += new qt_gsi::GenericMethod ("hasBinding", "@brief Method bool QUntypedBindable::hasBinding()\n", true, &_init_f_hasBinding_c0, &_call_f_hasBinding_c0);
  methods += new qt_gsi::GenericMethod ("isBindable?", "@brief Method bool QUntypedBindable::isBindable()\n", true, &_init_f_isBindable_c0, &_call_f_isBindable_c0);
  methods += new qt_gsi::GenericMethod ("isReadOnly?", "@brief Method bool QUntypedBindable::isReadOnly()\n", true, &_init_f_isReadOnly_c0, &_call_f_isReadOnly_c0);
  methods += new qt_gsi::GenericMethod ("isValid?", "@brief Method bool QUntypedBindable::isValid()\n", true, &_init_f_isValid_c0, &_call_f_isValid_c0);
  methods += new qt_gsi::GenericMethod ("makeBinding", "@brief Method QUntypedPropertyBinding QUntypedBindable::makeBinding(const QPropertyBindingSourceLocation &location)\n", true, &_init_f_makeBinding_c4412, &_call_f_makeBinding_c4412);
  methods += new qt_gsi::GenericMethod ("metaType", "@brief Method QMetaType QUntypedBindable::metaType()\n", true, &_init_f_metaType_c0, &_call_f_metaType_c0);
  methods += new qt_gsi::GenericMethod ("observe", "@brief Method void QUntypedBindable::observe(QPropertyObserver *observer)\n", true, &_init_f_observe_c2412, &_call_f_observe_c2412);
  methods += new qt_gsi::GenericMethod ("setBinding", "@brief Method bool QUntypedBindable::setBinding(const QUntypedPropertyBinding &binding)\n", false, &_init_f_setBinding_3707, &_call_f_setBinding_3707);
  methods += new qt_gsi::GenericMethod ("takeBinding", "@brief Method QUntypedPropertyBinding QUntypedBindable::takeBinding()\n", false, &_init_f_takeBinding_0, &_call_f_takeBinding_0);
  return methods;
}

gsi::Class<QUntypedBindable> decl_QUntypedBindable ("QtCore", "QUntypedBindable",
  methods_QUntypedBindable (),
  "@qt\n@brief Binding of QUntypedBindable");


GSI_QTCORE_PUBLIC gsi::Class<QUntypedBindable> &qtdecl_QUntypedBindable () { return decl_QUntypedBindable; }

}

