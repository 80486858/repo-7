
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQBindingStorage.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QBindingStorage>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QBindingStorage

//  Constructor QBindingStorage::QBindingStorage()


static void _init_ctor_QBindingStorage_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QBindingStorage> ();
}

static void _call_ctor_QBindingStorage_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QBindingStorage *> (new QBindingStorage ());
}


// QtPrivate::QPropertyBindingData *QBindingStorage::bindingData(const QUntypedPropertyData *data)


static void _init_f_bindingData_c3390 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("data");
  decl->add_arg<const QUntypedPropertyData * > (argspec_0);
  decl->set_return<QtPrivate::QPropertyBindingData * > ();
}

static void _call_f_bindingData_c3390 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QUntypedPropertyData *arg1 = gsi::arg_reader<const QUntypedPropertyData * >() (args, heap);
  ret.write<QtPrivate::QPropertyBindingData * > ((QtPrivate::QPropertyBindingData *)((QBindingStorage *)cls)->bindingData (arg1));
}


// QtPrivate::QPropertyBindingData *QBindingStorage::bindingData(QUntypedPropertyData *data, bool create)


static void _init_f_bindingData_3451 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("data");
  decl->add_arg<QUntypedPropertyData * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("create");
  decl->add_arg<bool > (argspec_1);
  decl->set_return<QtPrivate::QPropertyBindingData * > ();
}

static void _call_f_bindingData_3451 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QUntypedPropertyData *arg1 = gsi::arg_reader<QUntypedPropertyData * >() (args, heap);
  bool arg2 = gsi::arg_reader<bool >() (args, heap);
  ret.write<QtPrivate::QPropertyBindingData * > ((QtPrivate::QPropertyBindingData *)((QBindingStorage *)cls)->bindingData (arg1, arg2));
}


// bool QBindingStorage::isEmpty()


static void _init_f_isEmpty_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isEmpty_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QBindingStorage *)cls)->isEmpty ());
}


// void QBindingStorage::maybeUpdateBindingAndRegister(const QUntypedPropertyData *data)


static void _init_f_maybeUpdateBindingAndRegister_c3390 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("data");
  decl->add_arg<const QUntypedPropertyData * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_maybeUpdateBindingAndRegister_c3390 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QUntypedPropertyData *arg1 = gsi::arg_reader<const QUntypedPropertyData * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QBindingStorage *)cls)->maybeUpdateBindingAndRegister (arg1);
}


// void QBindingStorage::registerDependency(const QUntypedPropertyData *data)


static void _init_f_registerDependency_c3390 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("data");
  decl->add_arg<const QUntypedPropertyData * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_registerDependency_c3390 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QUntypedPropertyData *arg1 = gsi::arg_reader<const QUntypedPropertyData * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QBindingStorage *)cls)->registerDependency (arg1);
}



namespace gsi
{

static gsi::Methods methods_QBindingStorage () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QBindingStorage::QBindingStorage()\nThis method creates an object of class QBindingStorage.", &_init_ctor_QBindingStorage_0, &_call_ctor_QBindingStorage_0);
  methods += new qt_gsi::GenericMethod ("bindingData", "@brief Method QtPrivate::QPropertyBindingData *QBindingStorage::bindingData(const QUntypedPropertyData *data)\n", true, &_init_f_bindingData_c3390, &_call_f_bindingData_c3390);
  methods += new qt_gsi::GenericMethod ("bindingData", "@brief Method QtPrivate::QPropertyBindingData *QBindingStorage::bindingData(QUntypedPropertyData *data, bool create)\n", false, &_init_f_bindingData_3451, &_call_f_bindingData_3451);
  methods += new qt_gsi::GenericMethod ("isEmpty?", "@brief Method bool QBindingStorage::isEmpty()\n", false, &_init_f_isEmpty_0, &_call_f_isEmpty_0);
  methods += new qt_gsi::GenericMethod ("maybeUpdateBindingAndRegister", "@brief Method void QBindingStorage::maybeUpdateBindingAndRegister(const QUntypedPropertyData *data)\n", true, &_init_f_maybeUpdateBindingAndRegister_c3390, &_call_f_maybeUpdateBindingAndRegister_c3390);
  methods += new qt_gsi::GenericMethod ("registerDependency", "@brief Method void QBindingStorage::registerDependency(const QUntypedPropertyData *data)\n", true, &_init_f_registerDependency_c3390, &_call_f_registerDependency_c3390);
  return methods;
}

gsi::Class<QBindingStorage> decl_QBindingStorage ("QtCore", "QBindingStorage",
  methods_QBindingStorage (),
  "@qt\n@brief Binding of QBindingStorage");


GSI_QTCORE_PUBLIC gsi::Class<QBindingStorage> &qtdecl_QBindingStorage () { return decl_QBindingStorage; }

}

