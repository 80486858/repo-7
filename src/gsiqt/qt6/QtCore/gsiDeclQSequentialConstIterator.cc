
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQSequentialConstIterator.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QSequentialConstIterator>
#include <QVariantConstPointer>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include "gsiDeclQtCoreTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QSequentialConstIterator

// QVariant QSequentialConstIterator::operator*()


static void _init_f_operator_star__c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QVariant > ();
}

static void _call_f_operator_star__c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVariant > ((QVariant)((QSequentialConstIterator *)cls)->operator* ());
}


// QVariantConstPointer QSequentialConstIterator::operator->()


static void _init_f_operator_minus__gt__c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QVariantConstPointer > ();
}

static void _call_f_operator_minus__gt__c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QVariantConstPointer > ((QVariantConstPointer)((QSequentialConstIterator *)cls)->operator-> ());
}



namespace gsi
{

static gsi::Methods methods_QSequentialConstIterator () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericMethod ("*", "@brief Method QVariant QSequentialConstIterator::operator*()\n", true, &_init_f_operator_star__c0, &_call_f_operator_star__c0);
  methods += new qt_gsi::GenericMethod ("->", "@brief Method QVariantConstPointer QSequentialConstIterator::operator->()\n", true, &_init_f_operator_minus__gt__c0, &_call_f_operator_minus__gt__c0);
  return methods;
}

gsi::Class<QConstIterator<QMetaSequence>> &qtdecl_QConstIterator<QMetaSequence> ();

gsi::Class<QSequentialConstIterator> decl_QSequentialConstIterator (qtdecl_QConstIterator<QMetaSequence> (), "QtCore", "QSequentialConstIterator",
  methods_QSequentialConstIterator (),
  "@qt\n@brief Binding of QSequentialConstIterator");


GSI_QTCORE_PUBLIC gsi::Class<QSequentialConstIterator> &qtdecl_QSequentialConstIterator () { return decl_QSequentialConstIterator; }

}

