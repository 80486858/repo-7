
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQBigEndianStorageType.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QBigEndianStorageType>
#include "gsiQt.h"
#include "gsiQtCoreCommon.h"
#include "gsiDeclQtCoreTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// class QBigEndianStorageType

//  Constructor QBigEndianStorageType::QBigEndianStorageType()


static void _init_ctor_QBigEndianStorageType_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QBigEndianStorageType> ();
}

static void _call_ctor_QBigEndianStorageType_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QBigEndianStorageType *> (new QBigEndianStorageType ());
}


// static T QBigEndianStorageType::fromSpecial(T source)


static void _init_f_fromSpecial_520 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("source");
  decl->add_arg<T > (argspec_0);
  decl->set_return<T > ();
}

static void _call_f_fromSpecial_520 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  T arg1 = gsi::arg_reader<T >() (args, heap);
  ret.write<T > ((T)QBigEndianStorageType::fromSpecial (arg1));
}


// static T QBigEndianStorageType::toSpecial(T source)


static void _init_f_toSpecial_520 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("source");
  decl->add_arg<T > (argspec_0);
  decl->set_return<T > ();
}

static void _call_f_toSpecial_520 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  T arg1 = gsi::arg_reader<T >() (args, heap);
  ret.write<T > ((T)QBigEndianStorageType::toSpecial (arg1));
}



namespace gsi
{

static gsi::Methods methods_QBigEndianStorageType () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QBigEndianStorageType::QBigEndianStorageType()\nThis method creates an object of class QBigEndianStorageType.", &_init_ctor_QBigEndianStorageType_0, &_call_ctor_QBigEndianStorageType_0);
  methods += new qt_gsi::GenericStaticMethod ("fromSpecial", "@brief Static method T QBigEndianStorageType::fromSpecial(T source)\nThis method is static and can be called without an instance.", &_init_f_fromSpecial_520, &_call_f_fromSpecial_520);
  methods += new qt_gsi::GenericStaticMethod ("toSpecial", "@brief Static method T QBigEndianStorageType::toSpecial(T source)\nThis method is static and can be called without an instance.", &_init_f_toSpecial_520, &_call_f_toSpecial_520);
  return methods;
}

gsi::Class<QBigEndianStorageType> decl_QBigEndianStorageType ("QtCore", "QBigEndianStorageType",
  methods_QBigEndianStorageType (),
  "@qt\n@brief Binding of QBigEndianStorageType");


GSI_QTCORE_PUBLIC gsi::Class<QBigEndianStorageType> &qtdecl_QBigEndianStorageType () { return decl_QBigEndianStorageType; }

}

