
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQAudioFrame.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QAudioFrame>
#include "gsiQt.h"
#include "gsiQtMultimediaCommon.h"
#include "gsiDeclQtMultimediaTypeTraits.h"
#include <memory>

// -----------------------------------------------------------------------
// struct QAudioFrame

//  Constructor QAudioFrame::QAudioFrame()


static void _init_ctor_QAudioFrame_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return_new<QAudioFrame> ();
}

static void _call_ctor_QAudioFrame_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QAudioFrame *> (new QAudioFrame ());
}


// void QAudioFrame::clear()


static void _init_f_clear_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_clear_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QAudioFrame *)cls)->clear ();
}


// QAudioFrame::value_type QAudioFrame::operator[](QAudioFormat::AudioChannelPosition pos)


static void _init_f_operator_index__c3796 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pos");
  decl->add_arg<const qt_gsi::Converter<QAudioFormat::AudioChannelPosition>::target_type & > (argspec_0);
  decl->set_return<QAudioFrame::value_type > ();
}

static void _call_f_operator_index__c3796 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QAudioFormat::AudioChannelPosition>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QAudioFormat::AudioChannelPosition>::target_type & >() (args, heap);
  ret.write<QAudioFrame::value_type > ((QAudioFrame::value_type)((QAudioFrame *)cls)->operator[] (qt_gsi::QtToCppAdaptor<QAudioFormat::AudioChannelPosition>(arg1).cref()));
}


// void QAudioFrame::setValue(QAudioFormat::AudioChannelPosition pos, QAudioFrame::value_type val)


static void _init_f_setValue_c6396 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pos");
  decl->add_arg<const qt_gsi::Converter<QAudioFormat::AudioChannelPosition>::target_type & > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("val");
  decl->add_arg<QAudioFrame::value_type > (argspec_1);
  decl->set_return<void > ();
}

static void _call_f_setValue_c6396 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QAudioFormat::AudioChannelPosition>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QAudioFormat::AudioChannelPosition>::target_type & >() (args, heap);
  QAudioFrame::value_type arg2 = gsi::arg_reader<QAudioFrame::value_type >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QAudioFrame *)cls)->setValue (qt_gsi::QtToCppAdaptor<QAudioFormat::AudioChannelPosition>(arg1).cref(), arg2);
}


// QAudioFrame::value_type QAudioFrame::value(QAudioFormat::AudioChannelPosition pos)


static void _init_f_value_c3796 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pos");
  decl->add_arg<const qt_gsi::Converter<QAudioFormat::AudioChannelPosition>::target_type & > (argspec_0);
  decl->set_return<QAudioFrame::value_type > ();
}

static void _call_f_value_c3796 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QAudioFormat::AudioChannelPosition>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QAudioFormat::AudioChannelPosition>::target_type & >() (args, heap);
  ret.write<QAudioFrame::value_type > ((QAudioFrame::value_type)((QAudioFrame *)cls)->value (qt_gsi::QtToCppAdaptor<QAudioFormat::AudioChannelPosition>(arg1).cref()));
}


// static int QAudioFrame::positionToIndex(QAudioFormat::AudioChannelPosition pos)


static void _init_f_positionToIndex_3796 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pos");
  decl->add_arg<const qt_gsi::Converter<QAudioFormat::AudioChannelPosition>::target_type & > (argspec_0);
  decl->set_return<int > ();
}

static void _call_f_positionToIndex_3796 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const qt_gsi::Converter<QAudioFormat::AudioChannelPosition>::target_type & arg1 = gsi::arg_reader<const qt_gsi::Converter<QAudioFormat::AudioChannelPosition>::target_type & >() (args, heap);
  ret.write<int > ((int)QAudioFrame::positionToIndex (qt_gsi::QtToCppAdaptor<QAudioFormat::AudioChannelPosition>(arg1).cref()));
}



namespace gsi
{

static gsi::Methods methods_QAudioFrame () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QAudioFrame::QAudioFrame()\nThis method creates an object of class QAudioFrame.", &_init_ctor_QAudioFrame_0, &_call_ctor_QAudioFrame_0);
  methods += new qt_gsi::GenericMethod ("clear", "@brief Method void QAudioFrame::clear()\n", false, &_init_f_clear_0, &_call_f_clear_0);
  methods += new qt_gsi::GenericMethod ("[]", "@brief Method QAudioFrame::value_type QAudioFrame::operator[](QAudioFormat::AudioChannelPosition pos)\n", true, &_init_f_operator_index__c3796, &_call_f_operator_index__c3796);
  methods += new qt_gsi::GenericMethod ("setValue", "@brief Method void QAudioFrame::setValue(QAudioFormat::AudioChannelPosition pos, QAudioFrame::value_type val)\n", true, &_init_f_setValue_c6396, &_call_f_setValue_c6396);
  methods += new qt_gsi::GenericMethod ("value", "@brief Method QAudioFrame::value_type QAudioFrame::value(QAudioFormat::AudioChannelPosition pos)\n", true, &_init_f_value_c3796, &_call_f_value_c3796);
  methods += new qt_gsi::GenericStaticMethod ("positionToIndex", "@brief Static method int QAudioFrame::positionToIndex(QAudioFormat::AudioChannelPosition pos)\nThis method is static and can be called without an instance.", &_init_f_positionToIndex_3796, &_call_f_positionToIndex_3796);
  return methods;
}

gsi::Class<QAudioFrame> decl_QAudioFrame ("QtMultimedia", "QAudioFrame",
  methods_QAudioFrame (),
  "@qt\n@brief Binding of QAudioFrame");


GSI_QTMULTIMEDIA_PUBLIC gsi::Class<QAudioFrame> &qtdecl_QAudioFrame () { return decl_QAudioFrame; }

}

