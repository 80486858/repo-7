
/*

  KLayout Layout Viewer
  Copyright (C) 2006-2021 Matthias Koefferlein

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

/**
*  @file gsiDeclQWaveDecoder.cc 
*
*  DO NOT EDIT THIS FILE. 
*  This file has been created automatically
*/

#include <QWaveDecoder>
#include <QAudioFormat>
#include <QBindingStorage>
#include <QChildEvent>
#include <QEvent>
#include <QIODevice>
#include <QMetaMethod>
#include <QObject>
#include <QThread>
#include <QTimerEvent>
#include "gsiQt.h"
#include "gsiQtMultimediaCommon.h"
#include <memory>

// -----------------------------------------------------------------------
// class QWaveDecoder

//  get static meta object

static void _init_smo (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<const QMetaObject &> ();
}

static void _call_smo (const qt_gsi::GenericStaticMethod *, gsi::SerialArgs &, gsi::SerialArgs &ret) 
{
  ret.write<const QMetaObject &> (QWaveDecoder::staticMetaObject);
}


// QAudioFormat QWaveDecoder::audioFormat()


static void _init_f_audioFormat_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QAudioFormat > ();
}

static void _call_f_audioFormat_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QAudioFormat > ((QAudioFormat)((QWaveDecoder *)cls)->audioFormat ());
}


// qint64 QWaveDecoder::bytesAvailable()


static void _init_f_bytesAvailable_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_f_bytesAvailable_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qint64 > ((qint64)((QWaveDecoder *)cls)->bytesAvailable ());
}


// void QWaveDecoder::close()


static void _init_f_close_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_close_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QWaveDecoder *)cls)->close ();
}


// int QWaveDecoder::duration()


static void _init_f_duration_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_f_duration_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<int > ((int)((QWaveDecoder *)cls)->duration ());
}


// void QWaveDecoder::formatKnown()


static void _init_f_formatKnown_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_formatKnown_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QWaveDecoder *)cls)->formatKnown ();
}


// QIODevice *QWaveDecoder::getDevice()


static void _init_f_getDevice_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QIODevice * > ();
}

static void _call_f_getDevice_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QIODevice * > ((QIODevice *)((QWaveDecoder *)cls)->getDevice ());
}


// bool QWaveDecoder::isSequential()


static void _init_f_isSequential_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_f_isSequential_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QWaveDecoder *)cls)->isSequential ());
}


// bool QWaveDecoder::open(QFlags<QIODeviceBase::OpenModeFlag> mode)


static void _init_f_open_3621 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("mode");
  decl->add_arg<QFlags<QIODeviceBase::OpenModeFlag> > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_open_3621 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QFlags<QIODeviceBase::OpenModeFlag> arg1 = gsi::arg_reader<QFlags<QIODeviceBase::OpenModeFlag> >() (args, heap);
  ret.write<bool > ((bool)((QWaveDecoder *)cls)->open (arg1));
}


// void QWaveDecoder::parsingError()


static void _init_f_parsingError_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_f_parsingError_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QWaveDecoder *)cls)->parsingError ();
}


// qint64 QWaveDecoder::pos()


static void _init_f_pos_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_f_pos_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qint64 > ((qint64)((QWaveDecoder *)cls)->pos ());
}


// bool QWaveDecoder::seek(qint64 pos)


static void _init_f_seek_986 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pos");
  decl->add_arg<qint64 > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_f_seek_986 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qint64 arg1 = gsi::arg_reader<qint64 >() (args, heap);
  ret.write<bool > ((bool)((QWaveDecoder *)cls)->seek (arg1));
}


// void QWaveDecoder::setIODevice(QIODevice *device)


static void _init_f_setIODevice_1447 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<QIODevice * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_f_setIODevice_1447 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QIODevice *arg1 = gsi::arg_reader<QIODevice * >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QWaveDecoder *)cls)->setIODevice (arg1);
}


// qint64 QWaveDecoder::size()


static void _init_f_size_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_f_size_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qint64 > ((qint64)((QWaveDecoder *)cls)->size ());
}


// static qint64 QWaveDecoder::headerLength()


static void _init_f_headerLength_0 (qt_gsi::GenericStaticMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_f_headerLength_0 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qint64 > ((qint64)QWaveDecoder::headerLength ());
}


// static QString QWaveDecoder::tr(const char *s, const char *c, int n)


static void _init_f_tr_4013 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("s");
  decl->add_arg<const char * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("c", true, "nullptr");
  decl->add_arg<const char * > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("n", true, "-1");
  decl->add_arg<int > (argspec_2);
  decl->set_return<QString > ();
}

static void _call_f_tr_4013 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const char *arg1 = gsi::arg_reader<const char * >() (args, heap);
  const char *arg2 = args ? gsi::arg_reader<const char * >() (args, heap) : gsi::arg_maker<const char * >() (nullptr, heap);
  int arg3 = args ? gsi::arg_reader<int >() (args, heap) : gsi::arg_maker<int >() (-1, heap);
  ret.write<QString > ((QString)QWaveDecoder::tr (arg1, arg2, arg3));
}


namespace gsi
{

static gsi::Methods methods_QWaveDecoder () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("staticMetaObject", "@brief Obtains the static MetaObject for this class.", &_init_smo, &_call_smo);
  methods += new qt_gsi::GenericMethod ("audioFormat", "@brief Method QAudioFormat QWaveDecoder::audioFormat()\n", true, &_init_f_audioFormat_c0, &_call_f_audioFormat_c0);
  methods += new qt_gsi::GenericMethod ("bytesAvailable", "@brief Method qint64 QWaveDecoder::bytesAvailable()\nThis is a reimplementation of QIODevice::bytesAvailable", true, &_init_f_bytesAvailable_c0, &_call_f_bytesAvailable_c0);
  methods += new qt_gsi::GenericMethod ("close", "@brief Method void QWaveDecoder::close()\nThis is a reimplementation of QIODevice::close", false, &_init_f_close_0, &_call_f_close_0);
  methods += new qt_gsi::GenericMethod ("duration", "@brief Method int QWaveDecoder::duration()\n", true, &_init_f_duration_c0, &_call_f_duration_c0);
  methods += new qt_gsi::GenericMethod ("formatKnown", "@brief Method void QWaveDecoder::formatKnown()\n", false, &_init_f_formatKnown_0, &_call_f_formatKnown_0);
  methods += new qt_gsi::GenericMethod ("getDevice", "@brief Method QIODevice *QWaveDecoder::getDevice()\n", false, &_init_f_getDevice_0, &_call_f_getDevice_0);
  methods += new qt_gsi::GenericMethod ("isSequential?", "@brief Method bool QWaveDecoder::isSequential()\nThis is a reimplementation of QIODevice::isSequential", true, &_init_f_isSequential_c0, &_call_f_isSequential_c0);
  methods += new qt_gsi::GenericMethod ("open", "@brief Method bool QWaveDecoder::open(QFlags<QIODeviceBase::OpenModeFlag> mode)\nThis is a reimplementation of QIODevice::open", false, &_init_f_open_3621, &_call_f_open_3621);
  methods += new qt_gsi::GenericMethod ("parsingError", "@brief Method void QWaveDecoder::parsingError()\n", false, &_init_f_parsingError_0, &_call_f_parsingError_0);
  methods += new qt_gsi::GenericMethod ("pos", "@brief Method qint64 QWaveDecoder::pos()\nThis is a reimplementation of QIODevice::pos", true, &_init_f_pos_c0, &_call_f_pos_c0);
  methods += new qt_gsi::GenericMethod ("seek", "@brief Method bool QWaveDecoder::seek(qint64 pos)\nThis is a reimplementation of QIODevice::seek", false, &_init_f_seek_986, &_call_f_seek_986);
  methods += new qt_gsi::GenericMethod ("setIODevice", "@brief Method void QWaveDecoder::setIODevice(QIODevice *device)\n", false, &_init_f_setIODevice_1447, &_call_f_setIODevice_1447);
  methods += new qt_gsi::GenericMethod ("size", "@brief Method qint64 QWaveDecoder::size()\nThis is a reimplementation of QIODevice::size", true, &_init_f_size_c0, &_call_f_size_c0);
  methods += new qt_gsi::GenericStaticMethod ("headerLength", "@brief Static method qint64 QWaveDecoder::headerLength()\nThis method is static and can be called without an instance.", &_init_f_headerLength_0, &_call_f_headerLength_0);
  methods += new qt_gsi::GenericStaticMethod ("tr", "@brief Static method QString QWaveDecoder::tr(const char *s, const char *c, int n)\nThis method is static and can be called without an instance.", &_init_f_tr_4013, &_call_f_tr_4013);
  return methods;
}

gsi::Class<QIODevice> &qtdecl_QIODevice ();

qt_gsi::QtNativeClass<QWaveDecoder> decl_QWaveDecoder (qtdecl_QIODevice (), "QtMultimedia", "QWaveDecoder_Native",
  methods_QWaveDecoder (),
  "@hide\n@alias QWaveDecoder");

GSI_QTMULTIMEDIA_PUBLIC gsi::Class<QWaveDecoder> &qtdecl_QWaveDecoder () { return decl_QWaveDecoder; }

}


class QWaveDecoder_Adaptor : public QWaveDecoder, public qt_gsi::QtObjectBase
{
public:

  virtual ~QWaveDecoder_Adaptor();

  //  [adaptor ctor] QWaveDecoder::QWaveDecoder(QIODevice *device, QObject *parent)
  QWaveDecoder_Adaptor(QIODevice *device) : QWaveDecoder(device)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QWaveDecoder::QWaveDecoder(QIODevice *device, QObject *parent)
  QWaveDecoder_Adaptor(QIODevice *device, QObject *parent) : QWaveDecoder(device, parent)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QWaveDecoder::QWaveDecoder(QIODevice *device, const QAudioFormat &format, QObject *parent)
  QWaveDecoder_Adaptor(QIODevice *device, const QAudioFormat &format) : QWaveDecoder(device, format)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [adaptor ctor] QWaveDecoder::QWaveDecoder(QIODevice *device, const QAudioFormat &format, QObject *parent)
  QWaveDecoder_Adaptor(QIODevice *device, const QAudioFormat &format, QObject *parent) : QWaveDecoder(device, format, parent)
  {
    qt_gsi::QtObjectBase::init (this);
  }

  //  [expose] bool QWaveDecoder::isSignalConnected(const QMetaMethod &signal)
  bool fp_QWaveDecoder_isSignalConnected_c2394 (const QMetaMethod &signal) const {
    return QWaveDecoder::isSignalConnected(signal);
  }

  //  [expose] int QWaveDecoder::receivers(const char *signal)
  int fp_QWaveDecoder_receivers_c1731 (const char *signal) const {
    return QWaveDecoder::receivers(signal);
  }

  //  [expose] QObject *QWaveDecoder::sender()
  QObject * fp_QWaveDecoder_sender_c0 () const {
    return QWaveDecoder::sender();
  }

  //  [expose] int QWaveDecoder::senderSignalIndex()
  int fp_QWaveDecoder_senderSignalIndex_c0 () const {
    return QWaveDecoder::senderSignalIndex();
  }

  //  [expose] void QWaveDecoder::setErrorString(const QString &errorString)
  void fp_QWaveDecoder_setErrorString_2025 (const QString &errorString) {
    QWaveDecoder::setErrorString(errorString);
  }

  //  [expose] void QWaveDecoder::setOpenMode(QFlags<QIODeviceBase::OpenModeFlag> openMode)
  void fp_QWaveDecoder_setOpenMode_3621 (QFlags<QIODeviceBase::OpenModeFlag> openMode) {
    QWaveDecoder::setOpenMode(openMode);
  }

  //  [adaptor impl] bool QWaveDecoder::atEnd()
  bool cbs_atEnd_c0_0() const
  {
    return QWaveDecoder::atEnd();
  }

  virtual bool atEnd() const
  {
    if (cb_atEnd_c0_0.can_issue()) {
      return cb_atEnd_c0_0.issue<QWaveDecoder_Adaptor, bool>(&QWaveDecoder_Adaptor::cbs_atEnd_c0_0);
    } else {
      return QWaveDecoder::atEnd();
    }
  }

  //  [adaptor impl] qint64 QWaveDecoder::bytesAvailable()
  qint64 cbs_bytesAvailable_c0_0() const
  {
    return QWaveDecoder::bytesAvailable();
  }

  virtual qint64 bytesAvailable() const
  {
    if (cb_bytesAvailable_c0_0.can_issue()) {
      return cb_bytesAvailable_c0_0.issue<QWaveDecoder_Adaptor, qint64>(&QWaveDecoder_Adaptor::cbs_bytesAvailable_c0_0);
    } else {
      return QWaveDecoder::bytesAvailable();
    }
  }

  //  [adaptor impl] qint64 QWaveDecoder::bytesToWrite()
  qint64 cbs_bytesToWrite_c0_0() const
  {
    return QWaveDecoder::bytesToWrite();
  }

  virtual qint64 bytesToWrite() const
  {
    if (cb_bytesToWrite_c0_0.can_issue()) {
      return cb_bytesToWrite_c0_0.issue<QWaveDecoder_Adaptor, qint64>(&QWaveDecoder_Adaptor::cbs_bytesToWrite_c0_0);
    } else {
      return QWaveDecoder::bytesToWrite();
    }
  }

  //  [adaptor impl] bool QWaveDecoder::canReadLine()
  bool cbs_canReadLine_c0_0() const
  {
    return QWaveDecoder::canReadLine();
  }

  virtual bool canReadLine() const
  {
    if (cb_canReadLine_c0_0.can_issue()) {
      return cb_canReadLine_c0_0.issue<QWaveDecoder_Adaptor, bool>(&QWaveDecoder_Adaptor::cbs_canReadLine_c0_0);
    } else {
      return QWaveDecoder::canReadLine();
    }
  }

  //  [adaptor impl] void QWaveDecoder::close()
  void cbs_close_0_0()
  {
    QWaveDecoder::close();
  }

  virtual void close()
  {
    if (cb_close_0_0.can_issue()) {
      cb_close_0_0.issue<QWaveDecoder_Adaptor>(&QWaveDecoder_Adaptor::cbs_close_0_0);
    } else {
      QWaveDecoder::close();
    }
  }

  //  [adaptor impl] bool QWaveDecoder::event(QEvent *event)
  bool cbs_event_1217_0(QEvent *_event)
  {
    return QWaveDecoder::event(_event);
  }

  virtual bool event(QEvent *_event)
  {
    if (cb_event_1217_0.can_issue()) {
      return cb_event_1217_0.issue<QWaveDecoder_Adaptor, bool, QEvent *>(&QWaveDecoder_Adaptor::cbs_event_1217_0, _event);
    } else {
      return QWaveDecoder::event(_event);
    }
  }

  //  [adaptor impl] bool QWaveDecoder::eventFilter(QObject *watched, QEvent *event)
  bool cbs_eventFilter_2411_0(QObject *watched, QEvent *event)
  {
    return QWaveDecoder::eventFilter(watched, event);
  }

  virtual bool eventFilter(QObject *watched, QEvent *event)
  {
    if (cb_eventFilter_2411_0.can_issue()) {
      return cb_eventFilter_2411_0.issue<QWaveDecoder_Adaptor, bool, QObject *, QEvent *>(&QWaveDecoder_Adaptor::cbs_eventFilter_2411_0, watched, event);
    } else {
      return QWaveDecoder::eventFilter(watched, event);
    }
  }

  //  [adaptor impl] bool QWaveDecoder::isSequential()
  bool cbs_isSequential_c0_0() const
  {
    return QWaveDecoder::isSequential();
  }

  virtual bool isSequential() const
  {
    if (cb_isSequential_c0_0.can_issue()) {
      return cb_isSequential_c0_0.issue<QWaveDecoder_Adaptor, bool>(&QWaveDecoder_Adaptor::cbs_isSequential_c0_0);
    } else {
      return QWaveDecoder::isSequential();
    }
  }

  //  [adaptor impl] bool QWaveDecoder::open(QFlags<QIODeviceBase::OpenModeFlag> mode)
  bool cbs_open_3621_0(QFlags<QIODeviceBase::OpenModeFlag> mode)
  {
    return QWaveDecoder::open(mode);
  }

  virtual bool open(QFlags<QIODeviceBase::OpenModeFlag> mode)
  {
    if (cb_open_3621_0.can_issue()) {
      return cb_open_3621_0.issue<QWaveDecoder_Adaptor, bool, QFlags<QIODeviceBase::OpenModeFlag> >(&QWaveDecoder_Adaptor::cbs_open_3621_0, mode);
    } else {
      return QWaveDecoder::open(mode);
    }
  }

  //  [adaptor impl] qint64 QWaveDecoder::pos()
  qint64 cbs_pos_c0_0() const
  {
    return QWaveDecoder::pos();
  }

  virtual qint64 pos() const
  {
    if (cb_pos_c0_0.can_issue()) {
      return cb_pos_c0_0.issue<QWaveDecoder_Adaptor, qint64>(&QWaveDecoder_Adaptor::cbs_pos_c0_0);
    } else {
      return QWaveDecoder::pos();
    }
  }

  //  [adaptor impl] bool QWaveDecoder::reset()
  bool cbs_reset_0_0()
  {
    return QWaveDecoder::reset();
  }

  virtual bool reset()
  {
    if (cb_reset_0_0.can_issue()) {
      return cb_reset_0_0.issue<QWaveDecoder_Adaptor, bool>(&QWaveDecoder_Adaptor::cbs_reset_0_0);
    } else {
      return QWaveDecoder::reset();
    }
  }

  //  [adaptor impl] bool QWaveDecoder::seek(qint64 pos)
  bool cbs_seek_986_0(qint64 pos)
  {
    return QWaveDecoder::seek(pos);
  }

  virtual bool seek(qint64 pos)
  {
    if (cb_seek_986_0.can_issue()) {
      return cb_seek_986_0.issue<QWaveDecoder_Adaptor, bool, qint64>(&QWaveDecoder_Adaptor::cbs_seek_986_0, pos);
    } else {
      return QWaveDecoder::seek(pos);
    }
  }

  //  [adaptor impl] qint64 QWaveDecoder::size()
  qint64 cbs_size_c0_0() const
  {
    return QWaveDecoder::size();
  }

  virtual qint64 size() const
  {
    if (cb_size_c0_0.can_issue()) {
      return cb_size_c0_0.issue<QWaveDecoder_Adaptor, qint64>(&QWaveDecoder_Adaptor::cbs_size_c0_0);
    } else {
      return QWaveDecoder::size();
    }
  }

  //  [adaptor impl] bool QWaveDecoder::waitForBytesWritten(int msecs)
  bool cbs_waitForBytesWritten_767_0(int msecs)
  {
    return QWaveDecoder::waitForBytesWritten(msecs);
  }

  virtual bool waitForBytesWritten(int msecs)
  {
    if (cb_waitForBytesWritten_767_0.can_issue()) {
      return cb_waitForBytesWritten_767_0.issue<QWaveDecoder_Adaptor, bool, int>(&QWaveDecoder_Adaptor::cbs_waitForBytesWritten_767_0, msecs);
    } else {
      return QWaveDecoder::waitForBytesWritten(msecs);
    }
  }

  //  [adaptor impl] bool QWaveDecoder::waitForReadyRead(int msecs)
  bool cbs_waitForReadyRead_767_0(int msecs)
  {
    return QWaveDecoder::waitForReadyRead(msecs);
  }

  virtual bool waitForReadyRead(int msecs)
  {
    if (cb_waitForReadyRead_767_0.can_issue()) {
      return cb_waitForReadyRead_767_0.issue<QWaveDecoder_Adaptor, bool, int>(&QWaveDecoder_Adaptor::cbs_waitForReadyRead_767_0, msecs);
    } else {
      return QWaveDecoder::waitForReadyRead(msecs);
    }
  }

  //  [adaptor impl] void QWaveDecoder::childEvent(QChildEvent *event)
  void cbs_childEvent_1701_0(QChildEvent *event)
  {
    QWaveDecoder::childEvent(event);
  }

  virtual void childEvent(QChildEvent *event)
  {
    if (cb_childEvent_1701_0.can_issue()) {
      cb_childEvent_1701_0.issue<QWaveDecoder_Adaptor, QChildEvent *>(&QWaveDecoder_Adaptor::cbs_childEvent_1701_0, event);
    } else {
      QWaveDecoder::childEvent(event);
    }
  }

  //  [adaptor impl] void QWaveDecoder::customEvent(QEvent *event)
  void cbs_customEvent_1217_0(QEvent *event)
  {
    QWaveDecoder::customEvent(event);
  }

  virtual void customEvent(QEvent *event)
  {
    if (cb_customEvent_1217_0.can_issue()) {
      cb_customEvent_1217_0.issue<QWaveDecoder_Adaptor, QEvent *>(&QWaveDecoder_Adaptor::cbs_customEvent_1217_0, event);
    } else {
      QWaveDecoder::customEvent(event);
    }
  }

  //  [adaptor impl] void QWaveDecoder::disconnectNotify(const QMetaMethod &signal)
  void cbs_disconnectNotify_2394_0(const QMetaMethod &signal)
  {
    QWaveDecoder::disconnectNotify(signal);
  }

  virtual void disconnectNotify(const QMetaMethod &signal)
  {
    if (cb_disconnectNotify_2394_0.can_issue()) {
      cb_disconnectNotify_2394_0.issue<QWaveDecoder_Adaptor, const QMetaMethod &>(&QWaveDecoder_Adaptor::cbs_disconnectNotify_2394_0, signal);
    } else {
      QWaveDecoder::disconnectNotify(signal);
    }
  }

  //  [adaptor impl] qint64 QWaveDecoder::skipData(qint64 maxSize)
  qint64 cbs_skipData_986_0(qint64 maxSize)
  {
    return QWaveDecoder::skipData(maxSize);
  }

  virtual qint64 skipData(qint64 maxSize)
  {
    if (cb_skipData_986_0.can_issue()) {
      return cb_skipData_986_0.issue<QWaveDecoder_Adaptor, qint64, qint64>(&QWaveDecoder_Adaptor::cbs_skipData_986_0, maxSize);
    } else {
      return QWaveDecoder::skipData(maxSize);
    }
  }

  //  [adaptor impl] void QWaveDecoder::timerEvent(QTimerEvent *event)
  void cbs_timerEvent_1730_0(QTimerEvent *event)
  {
    QWaveDecoder::timerEvent(event);
  }

  virtual void timerEvent(QTimerEvent *event)
  {
    if (cb_timerEvent_1730_0.can_issue()) {
      cb_timerEvent_1730_0.issue<QWaveDecoder_Adaptor, QTimerEvent *>(&QWaveDecoder_Adaptor::cbs_timerEvent_1730_0, event);
    } else {
      QWaveDecoder::timerEvent(event);
    }
  }

  gsi::Callback cb_atEnd_c0_0;
  gsi::Callback cb_bytesAvailable_c0_0;
  gsi::Callback cb_bytesToWrite_c0_0;
  gsi::Callback cb_canReadLine_c0_0;
  gsi::Callback cb_close_0_0;
  gsi::Callback cb_event_1217_0;
  gsi::Callback cb_eventFilter_2411_0;
  gsi::Callback cb_isSequential_c0_0;
  gsi::Callback cb_open_3621_0;
  gsi::Callback cb_pos_c0_0;
  gsi::Callback cb_reset_0_0;
  gsi::Callback cb_seek_986_0;
  gsi::Callback cb_size_c0_0;
  gsi::Callback cb_waitForBytesWritten_767_0;
  gsi::Callback cb_waitForReadyRead_767_0;
  gsi::Callback cb_childEvent_1701_0;
  gsi::Callback cb_customEvent_1217_0;
  gsi::Callback cb_disconnectNotify_2394_0;
  gsi::Callback cb_skipData_986_0;
  gsi::Callback cb_timerEvent_1730_0;
};

QWaveDecoder_Adaptor::~QWaveDecoder_Adaptor() { }

//  Constructor QWaveDecoder::QWaveDecoder(QIODevice *device, QObject *parent) (adaptor class)

static void _init_ctor_QWaveDecoder_Adaptor_2641 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<QIODevice * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("parent", true, "nullptr");
  decl->add_arg<QObject * > (argspec_1);
  decl->set_return_new<QWaveDecoder_Adaptor> ();
}

static void _call_ctor_QWaveDecoder_Adaptor_2641 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QIODevice *arg1 = gsi::arg_reader<QIODevice * >() (args, heap);
  QObject *arg2 = args ? gsi::arg_reader<QObject * >() (args, heap) : gsi::arg_maker<QObject * >() (nullptr, heap);
  ret.write<QWaveDecoder_Adaptor *> (new QWaveDecoder_Adaptor (arg1, arg2));
}


//  Constructor QWaveDecoder::QWaveDecoder(QIODevice *device, const QAudioFormat &format, QObject *parent) (adaptor class)

static void _init_ctor_QWaveDecoder_Adaptor_5042 (qt_gsi::GenericStaticMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("device");
  decl->add_arg<QIODevice * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("format");
  decl->add_arg<const QAudioFormat & > (argspec_1);
  static gsi::ArgSpecBase argspec_2 ("parent", true, "nullptr");
  decl->add_arg<QObject * > (argspec_2);
  decl->set_return_new<QWaveDecoder_Adaptor> ();
}

static void _call_ctor_QWaveDecoder_Adaptor_5042 (const qt_gsi::GenericStaticMethod * /*decl*/, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QIODevice *arg1 = gsi::arg_reader<QIODevice * >() (args, heap);
  const QAudioFormat &arg2 = gsi::arg_reader<const QAudioFormat & >() (args, heap);
  QObject *arg3 = args ? gsi::arg_reader<QObject * >() (args, heap) : gsi::arg_maker<QObject * >() (nullptr, heap);
  ret.write<QWaveDecoder_Adaptor *> (new QWaveDecoder_Adaptor (arg1, arg2, arg3));
}


// bool QWaveDecoder::atEnd()

static void _init_cbs_atEnd_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_cbs_atEnd_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QWaveDecoder_Adaptor *)cls)->cbs_atEnd_c0_0 ());
}

static void _set_callback_cbs_atEnd_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_atEnd_c0_0 = cb;
}


// qint64 QWaveDecoder::bytesAvailable()

static void _init_cbs_bytesAvailable_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_cbs_bytesAvailable_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qint64 > ((qint64)((QWaveDecoder_Adaptor *)cls)->cbs_bytesAvailable_c0_0 ());
}

static void _set_callback_cbs_bytesAvailable_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_bytesAvailable_c0_0 = cb;
}


// qint64 QWaveDecoder::bytesToWrite()

static void _init_cbs_bytesToWrite_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_cbs_bytesToWrite_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qint64 > ((qint64)((QWaveDecoder_Adaptor *)cls)->cbs_bytesToWrite_c0_0 ());
}

static void _set_callback_cbs_bytesToWrite_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_bytesToWrite_c0_0 = cb;
}


// bool QWaveDecoder::canReadLine()

static void _init_cbs_canReadLine_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_cbs_canReadLine_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QWaveDecoder_Adaptor *)cls)->cbs_canReadLine_c0_0 ());
}

static void _set_callback_cbs_canReadLine_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_canReadLine_c0_0 = cb;
}


// void QWaveDecoder::childEvent(QChildEvent *event)

static void _init_cbs_childEvent_1701_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QChildEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_childEvent_1701_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QChildEvent *arg1 = args.read<QChildEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QWaveDecoder_Adaptor *)cls)->cbs_childEvent_1701_0 (arg1);
}

static void _set_callback_cbs_childEvent_1701_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_childEvent_1701_0 = cb;
}


// void QWaveDecoder::close()

static void _init_cbs_close_0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<void > ();
}

static void _call_cbs_close_0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QWaveDecoder_Adaptor *)cls)->cbs_close_0_0 ();
}

static void _set_callback_cbs_close_0_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_close_0_0 = cb;
}


// void QWaveDecoder::customEvent(QEvent *event)

static void _init_cbs_customEvent_1217_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_customEvent_1217_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QEvent *arg1 = args.read<QEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QWaveDecoder_Adaptor *)cls)->cbs_customEvent_1217_0 (arg1);
}

static void _set_callback_cbs_customEvent_1217_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_customEvent_1217_0 = cb;
}


// void QWaveDecoder::disconnectNotify(const QMetaMethod &signal)

static void _init_cbs_disconnectNotify_2394_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("signal");
  decl->add_arg<const QMetaMethod & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_disconnectNotify_2394_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QMetaMethod &arg1 = args.read<const QMetaMethod & > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QWaveDecoder_Adaptor *)cls)->cbs_disconnectNotify_2394_0 (arg1);
}

static void _set_callback_cbs_disconnectNotify_2394_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_disconnectNotify_2394_0 = cb;
}


// bool QWaveDecoder::event(QEvent *event)

static void _init_cbs_event_1217_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QEvent * > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_event_1217_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QEvent *arg1 = args.read<QEvent * > (heap);
  ret.write<bool > ((bool)((QWaveDecoder_Adaptor *)cls)->cbs_event_1217_0 (arg1));
}

static void _set_callback_cbs_event_1217_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_event_1217_0 = cb;
}


// bool QWaveDecoder::eventFilter(QObject *watched, QEvent *event)

static void _init_cbs_eventFilter_2411_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("watched");
  decl->add_arg<QObject * > (argspec_0);
  static gsi::ArgSpecBase argspec_1 ("event");
  decl->add_arg<QEvent * > (argspec_1);
  decl->set_return<bool > ();
}

static void _call_cbs_eventFilter_2411_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QObject *arg1 = args.read<QObject * > (heap);
  QEvent *arg2 = args.read<QEvent * > (heap);
  ret.write<bool > ((bool)((QWaveDecoder_Adaptor *)cls)->cbs_eventFilter_2411_0 (arg1, arg2));
}

static void _set_callback_cbs_eventFilter_2411_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_eventFilter_2411_0 = cb;
}


// bool QWaveDecoder::isSequential()

static void _init_cbs_isSequential_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_cbs_isSequential_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QWaveDecoder_Adaptor *)cls)->cbs_isSequential_c0_0 ());
}

static void _set_callback_cbs_isSequential_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_isSequential_c0_0 = cb;
}


// exposed bool QWaveDecoder::isSignalConnected(const QMetaMethod &signal)

static void _init_fp_isSignalConnected_c2394 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("signal");
  decl->add_arg<const QMetaMethod & > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_fp_isSignalConnected_c2394 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QMetaMethod &arg1 = gsi::arg_reader<const QMetaMethod & >() (args, heap);
  ret.write<bool > ((bool)((QWaveDecoder_Adaptor *)cls)->fp_QWaveDecoder_isSignalConnected_c2394 (arg1));
}


// bool QWaveDecoder::open(QFlags<QIODeviceBase::OpenModeFlag> mode)

static void _init_cbs_open_3621_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("mode");
  decl->add_arg<QFlags<QIODeviceBase::OpenModeFlag> > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_open_3621_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QFlags<QIODeviceBase::OpenModeFlag> arg1 = args.read<QFlags<QIODeviceBase::OpenModeFlag> > (heap);
  ret.write<bool > ((bool)((QWaveDecoder_Adaptor *)cls)->cbs_open_3621_0 (arg1));
}

static void _set_callback_cbs_open_3621_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_open_3621_0 = cb;
}


// qint64 QWaveDecoder::pos()

static void _init_cbs_pos_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_cbs_pos_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qint64 > ((qint64)((QWaveDecoder_Adaptor *)cls)->cbs_pos_c0_0 ());
}

static void _set_callback_cbs_pos_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_pos_c0_0 = cb;
}


// exposed int QWaveDecoder::receivers(const char *signal)

static void _init_fp_receivers_c1731 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("signal");
  decl->add_arg<const char * > (argspec_0);
  decl->set_return<int > ();
}

static void _call_fp_receivers_c1731 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const char *arg1 = gsi::arg_reader<const char * >() (args, heap);
  ret.write<int > ((int)((QWaveDecoder_Adaptor *)cls)->fp_QWaveDecoder_receivers_c1731 (arg1));
}


// bool QWaveDecoder::reset()

static void _init_cbs_reset_0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<bool > ();
}

static void _call_cbs_reset_0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<bool > ((bool)((QWaveDecoder_Adaptor *)cls)->cbs_reset_0_0 ());
}

static void _set_callback_cbs_reset_0_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_reset_0_0 = cb;
}


// bool QWaveDecoder::seek(qint64 pos)

static void _init_cbs_seek_986_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("pos");
  decl->add_arg<qint64 > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_seek_986_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qint64 arg1 = args.read<qint64 > (heap);
  ret.write<bool > ((bool)((QWaveDecoder_Adaptor *)cls)->cbs_seek_986_0 (arg1));
}

static void _set_callback_cbs_seek_986_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_seek_986_0 = cb;
}


// exposed QObject *QWaveDecoder::sender()

static void _init_fp_sender_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<QObject * > ();
}

static void _call_fp_sender_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<QObject * > ((QObject *)((QWaveDecoder_Adaptor *)cls)->fp_QWaveDecoder_sender_c0 ());
}


// exposed int QWaveDecoder::senderSignalIndex()

static void _init_fp_senderSignalIndex_c0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<int > ();
}

static void _call_fp_senderSignalIndex_c0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<int > ((int)((QWaveDecoder_Adaptor *)cls)->fp_QWaveDecoder_senderSignalIndex_c0 ());
}


// exposed void QWaveDecoder::setErrorString(const QString &errorString)

static void _init_fp_setErrorString_2025 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("errorString");
  decl->add_arg<const QString & > (argspec_0);
  decl->set_return<void > ();
}

static void _call_fp_setErrorString_2025 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  const QString &arg1 = gsi::arg_reader<const QString & >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QWaveDecoder_Adaptor *)cls)->fp_QWaveDecoder_setErrorString_2025 (arg1);
}


// exposed void QWaveDecoder::setOpenMode(QFlags<QIODeviceBase::OpenModeFlag> openMode)

static void _init_fp_setOpenMode_3621 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("openMode");
  decl->add_arg<QFlags<QIODeviceBase::OpenModeFlag> > (argspec_0);
  decl->set_return<void > ();
}

static void _call_fp_setOpenMode_3621 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QFlags<QIODeviceBase::OpenModeFlag> arg1 = gsi::arg_reader<QFlags<QIODeviceBase::OpenModeFlag> >() (args, heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QWaveDecoder_Adaptor *)cls)->fp_QWaveDecoder_setOpenMode_3621 (arg1);
}


// qint64 QWaveDecoder::size()

static void _init_cbs_size_c0_0 (qt_gsi::GenericMethod *decl)
{
  decl->set_return<qint64 > ();
}

static void _call_cbs_size_c0_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  ret.write<qint64 > ((qint64)((QWaveDecoder_Adaptor *)cls)->cbs_size_c0_0 ());
}

static void _set_callback_cbs_size_c0_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_size_c0_0 = cb;
}


// qint64 QWaveDecoder::skipData(qint64 maxSize)

static void _init_cbs_skipData_986_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("maxSize");
  decl->add_arg<qint64 > (argspec_0);
  decl->set_return<qint64 > ();
}

static void _call_cbs_skipData_986_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  qint64 arg1 = args.read<qint64 > (heap);
  ret.write<qint64 > ((qint64)((QWaveDecoder_Adaptor *)cls)->cbs_skipData_986_0 (arg1));
}

static void _set_callback_cbs_skipData_986_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_skipData_986_0 = cb;
}


// void QWaveDecoder::timerEvent(QTimerEvent *event)

static void _init_cbs_timerEvent_1730_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("event");
  decl->add_arg<QTimerEvent * > (argspec_0);
  decl->set_return<void > ();
}

static void _call_cbs_timerEvent_1730_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  QTimerEvent *arg1 = args.read<QTimerEvent * > (heap);
  __SUPPRESS_UNUSED_WARNING(ret);
  ((QWaveDecoder_Adaptor *)cls)->cbs_timerEvent_1730_0 (arg1);
}

static void _set_callback_cbs_timerEvent_1730_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_timerEvent_1730_0 = cb;
}


// bool QWaveDecoder::waitForBytesWritten(int msecs)

static void _init_cbs_waitForBytesWritten_767_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("msecs");
  decl->add_arg<int > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_waitForBytesWritten_767_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  int arg1 = args.read<int > (heap);
  ret.write<bool > ((bool)((QWaveDecoder_Adaptor *)cls)->cbs_waitForBytesWritten_767_0 (arg1));
}

static void _set_callback_cbs_waitForBytesWritten_767_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_waitForBytesWritten_767_0 = cb;
}


// bool QWaveDecoder::waitForReadyRead(int msecs)

static void _init_cbs_waitForReadyRead_767_0 (qt_gsi::GenericMethod *decl)
{
  static gsi::ArgSpecBase argspec_0 ("msecs");
  decl->add_arg<int > (argspec_0);
  decl->set_return<bool > ();
}

static void _call_cbs_waitForReadyRead_767_0 (const qt_gsi::GenericMethod * /*decl*/, void *cls, gsi::SerialArgs &args, gsi::SerialArgs &ret) 
{
  __SUPPRESS_UNUSED_WARNING(args);
  tl::Heap heap;
  int arg1 = args.read<int > (heap);
  ret.write<bool > ((bool)((QWaveDecoder_Adaptor *)cls)->cbs_waitForReadyRead_767_0 (arg1));
}

static void _set_callback_cbs_waitForReadyRead_767_0 (void *cls, const gsi::Callback &cb)
{
  ((QWaveDecoder_Adaptor *)cls)->cb_waitForReadyRead_767_0 = cb;
}


namespace gsi
{

gsi::Class<QWaveDecoder> &qtdecl_QWaveDecoder ();

static gsi::Methods methods_QWaveDecoder_Adaptor () {
  gsi::Methods methods;
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QWaveDecoder::QWaveDecoder(QIODevice *device, QObject *parent)\nThis method creates an object of class QWaveDecoder.", &_init_ctor_QWaveDecoder_Adaptor_2641, &_call_ctor_QWaveDecoder_Adaptor_2641);
  methods += new qt_gsi::GenericStaticMethod ("new", "@brief Constructor QWaveDecoder::QWaveDecoder(QIODevice *device, const QAudioFormat &format, QObject *parent)\nThis method creates an object of class QWaveDecoder.", &_init_ctor_QWaveDecoder_Adaptor_5042, &_call_ctor_QWaveDecoder_Adaptor_5042);
  methods += new qt_gsi::GenericMethod ("atEnd", "@brief Virtual method bool QWaveDecoder::atEnd()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_atEnd_c0_0, &_call_cbs_atEnd_c0_0);
  methods += new qt_gsi::GenericMethod ("atEnd", "@hide", true, &_init_cbs_atEnd_c0_0, &_call_cbs_atEnd_c0_0, &_set_callback_cbs_atEnd_c0_0);
  methods += new qt_gsi::GenericMethod ("bytesAvailable", "@brief Virtual method qint64 QWaveDecoder::bytesAvailable()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_bytesAvailable_c0_0, &_call_cbs_bytesAvailable_c0_0);
  methods += new qt_gsi::GenericMethod ("bytesAvailable", "@hide", true, &_init_cbs_bytesAvailable_c0_0, &_call_cbs_bytesAvailable_c0_0, &_set_callback_cbs_bytesAvailable_c0_0);
  methods += new qt_gsi::GenericMethod ("bytesToWrite", "@brief Virtual method qint64 QWaveDecoder::bytesToWrite()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_bytesToWrite_c0_0, &_call_cbs_bytesToWrite_c0_0);
  methods += new qt_gsi::GenericMethod ("bytesToWrite", "@hide", true, &_init_cbs_bytesToWrite_c0_0, &_call_cbs_bytesToWrite_c0_0, &_set_callback_cbs_bytesToWrite_c0_0);
  methods += new qt_gsi::GenericMethod ("canReadLine", "@brief Virtual method bool QWaveDecoder::canReadLine()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_canReadLine_c0_0, &_call_cbs_canReadLine_c0_0);
  methods += new qt_gsi::GenericMethod ("canReadLine", "@hide", true, &_init_cbs_canReadLine_c0_0, &_call_cbs_canReadLine_c0_0, &_set_callback_cbs_canReadLine_c0_0);
  methods += new qt_gsi::GenericMethod ("*childEvent", "@brief Virtual method void QWaveDecoder::childEvent(QChildEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_childEvent_1701_0, &_call_cbs_childEvent_1701_0);
  methods += new qt_gsi::GenericMethod ("*childEvent", "@hide", false, &_init_cbs_childEvent_1701_0, &_call_cbs_childEvent_1701_0, &_set_callback_cbs_childEvent_1701_0);
  methods += new qt_gsi::GenericMethod ("close", "@brief Virtual method void QWaveDecoder::close()\nThis method can be reimplemented in a derived class.", false, &_init_cbs_close_0_0, &_call_cbs_close_0_0);
  methods += new qt_gsi::GenericMethod ("close", "@hide", false, &_init_cbs_close_0_0, &_call_cbs_close_0_0, &_set_callback_cbs_close_0_0);
  methods += new qt_gsi::GenericMethod ("*customEvent", "@brief Virtual method void QWaveDecoder::customEvent(QEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_customEvent_1217_0, &_call_cbs_customEvent_1217_0);
  methods += new qt_gsi::GenericMethod ("*customEvent", "@hide", false, &_init_cbs_customEvent_1217_0, &_call_cbs_customEvent_1217_0, &_set_callback_cbs_customEvent_1217_0);
  methods += new qt_gsi::GenericMethod ("*disconnectNotify", "@brief Virtual method void QWaveDecoder::disconnectNotify(const QMetaMethod &signal)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_disconnectNotify_2394_0, &_call_cbs_disconnectNotify_2394_0);
  methods += new qt_gsi::GenericMethod ("*disconnectNotify", "@hide", false, &_init_cbs_disconnectNotify_2394_0, &_call_cbs_disconnectNotify_2394_0, &_set_callback_cbs_disconnectNotify_2394_0);
  methods += new qt_gsi::GenericMethod ("event", "@brief Virtual method bool QWaveDecoder::event(QEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_event_1217_0, &_call_cbs_event_1217_0);
  methods += new qt_gsi::GenericMethod ("event", "@hide", false, &_init_cbs_event_1217_0, &_call_cbs_event_1217_0, &_set_callback_cbs_event_1217_0);
  methods += new qt_gsi::GenericMethod ("eventFilter", "@brief Virtual method bool QWaveDecoder::eventFilter(QObject *watched, QEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_eventFilter_2411_0, &_call_cbs_eventFilter_2411_0);
  methods += new qt_gsi::GenericMethod ("eventFilter", "@hide", false, &_init_cbs_eventFilter_2411_0, &_call_cbs_eventFilter_2411_0, &_set_callback_cbs_eventFilter_2411_0);
  methods += new qt_gsi::GenericMethod ("isSequential", "@brief Virtual method bool QWaveDecoder::isSequential()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_isSequential_c0_0, &_call_cbs_isSequential_c0_0);
  methods += new qt_gsi::GenericMethod ("isSequential", "@hide", true, &_init_cbs_isSequential_c0_0, &_call_cbs_isSequential_c0_0, &_set_callback_cbs_isSequential_c0_0);
  methods += new qt_gsi::GenericMethod ("*isSignalConnected", "@brief Method bool QWaveDecoder::isSignalConnected(const QMetaMethod &signal)\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_isSignalConnected_c2394, &_call_fp_isSignalConnected_c2394);
  methods += new qt_gsi::GenericMethod ("open", "@brief Virtual method bool QWaveDecoder::open(QFlags<QIODeviceBase::OpenModeFlag> mode)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_open_3621_0, &_call_cbs_open_3621_0);
  methods += new qt_gsi::GenericMethod ("open", "@hide", false, &_init_cbs_open_3621_0, &_call_cbs_open_3621_0, &_set_callback_cbs_open_3621_0);
  methods += new qt_gsi::GenericMethod ("pos", "@brief Virtual method qint64 QWaveDecoder::pos()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_pos_c0_0, &_call_cbs_pos_c0_0);
  methods += new qt_gsi::GenericMethod ("pos", "@hide", true, &_init_cbs_pos_c0_0, &_call_cbs_pos_c0_0, &_set_callback_cbs_pos_c0_0);
  methods += new qt_gsi::GenericMethod ("*receivers", "@brief Method int QWaveDecoder::receivers(const char *signal)\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_receivers_c1731, &_call_fp_receivers_c1731);
  methods += new qt_gsi::GenericMethod ("reset", "@brief Virtual method bool QWaveDecoder::reset()\nThis method can be reimplemented in a derived class.", false, &_init_cbs_reset_0_0, &_call_cbs_reset_0_0);
  methods += new qt_gsi::GenericMethod ("reset", "@hide", false, &_init_cbs_reset_0_0, &_call_cbs_reset_0_0, &_set_callback_cbs_reset_0_0);
  methods += new qt_gsi::GenericMethod ("seek", "@brief Virtual method bool QWaveDecoder::seek(qint64 pos)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_seek_986_0, &_call_cbs_seek_986_0);
  methods += new qt_gsi::GenericMethod ("seek", "@hide", false, &_init_cbs_seek_986_0, &_call_cbs_seek_986_0, &_set_callback_cbs_seek_986_0);
  methods += new qt_gsi::GenericMethod ("*sender", "@brief Method QObject *QWaveDecoder::sender()\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_sender_c0, &_call_fp_sender_c0);
  methods += new qt_gsi::GenericMethod ("*senderSignalIndex", "@brief Method int QWaveDecoder::senderSignalIndex()\nThis method is protected and can only be called from inside a derived class.", true, &_init_fp_senderSignalIndex_c0, &_call_fp_senderSignalIndex_c0);
  methods += new qt_gsi::GenericMethod ("*setErrorString", "@brief Method void QWaveDecoder::setErrorString(const QString &errorString)\nThis method is protected and can only be called from inside a derived class.", false, &_init_fp_setErrorString_2025, &_call_fp_setErrorString_2025);
  methods += new qt_gsi::GenericMethod ("*setOpenMode", "@brief Method void QWaveDecoder::setOpenMode(QFlags<QIODeviceBase::OpenModeFlag> openMode)\nThis method is protected and can only be called from inside a derived class.", false, &_init_fp_setOpenMode_3621, &_call_fp_setOpenMode_3621);
  methods += new qt_gsi::GenericMethod ("size", "@brief Virtual method qint64 QWaveDecoder::size()\nThis method can be reimplemented in a derived class.", true, &_init_cbs_size_c0_0, &_call_cbs_size_c0_0);
  methods += new qt_gsi::GenericMethod ("size", "@hide", true, &_init_cbs_size_c0_0, &_call_cbs_size_c0_0, &_set_callback_cbs_size_c0_0);
  methods += new qt_gsi::GenericMethod ("*skipData", "@brief Virtual method qint64 QWaveDecoder::skipData(qint64 maxSize)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_skipData_986_0, &_call_cbs_skipData_986_0);
  methods += new qt_gsi::GenericMethod ("*skipData", "@hide", false, &_init_cbs_skipData_986_0, &_call_cbs_skipData_986_0, &_set_callback_cbs_skipData_986_0);
  methods += new qt_gsi::GenericMethod ("*timerEvent", "@brief Virtual method void QWaveDecoder::timerEvent(QTimerEvent *event)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_timerEvent_1730_0, &_call_cbs_timerEvent_1730_0);
  methods += new qt_gsi::GenericMethod ("*timerEvent", "@hide", false, &_init_cbs_timerEvent_1730_0, &_call_cbs_timerEvent_1730_0, &_set_callback_cbs_timerEvent_1730_0);
  methods += new qt_gsi::GenericMethod ("waitForBytesWritten", "@brief Virtual method bool QWaveDecoder::waitForBytesWritten(int msecs)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_waitForBytesWritten_767_0, &_call_cbs_waitForBytesWritten_767_0);
  methods += new qt_gsi::GenericMethod ("waitForBytesWritten", "@hide", false, &_init_cbs_waitForBytesWritten_767_0, &_call_cbs_waitForBytesWritten_767_0, &_set_callback_cbs_waitForBytesWritten_767_0);
  methods += new qt_gsi::GenericMethod ("waitForReadyRead", "@brief Virtual method bool QWaveDecoder::waitForReadyRead(int msecs)\nThis method can be reimplemented in a derived class.", false, &_init_cbs_waitForReadyRead_767_0, &_call_cbs_waitForReadyRead_767_0);
  methods += new qt_gsi::GenericMethod ("waitForReadyRead", "@hide", false, &_init_cbs_waitForReadyRead_767_0, &_call_cbs_waitForReadyRead_767_0, &_set_callback_cbs_waitForReadyRead_767_0);
  return methods;
}

gsi::Class<QWaveDecoder_Adaptor> decl_QWaveDecoder_Adaptor (qtdecl_QWaveDecoder (), "QtMultimedia", "QWaveDecoder",
  methods_QWaveDecoder_Adaptor (),
  "@qt\n@brief Binding of QWaveDecoder");

}

